<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>生活日记</title>
      <link href="/2022/12/23/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/"/>
      <url>/2022/12/23/%E7%94%9F%E6%B4%BB%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h2><h3 id="12-24"><a href="#12-24" class="headerlink" title="12-24"></a>12-24</h3><blockquote><p>2022-12-24        晴        -3℃-8℃</p></blockquote><p>大概是发烧了，全身上下除了嘴是硬的，其他都是软的。凌晨就已经感觉不对劲，以为是冻的，早上起来后头开始变重，中午量了个体温 37.5，还好，是低烧，就简单的喝了感冒灵。到了晚上睡觉，起初非常冷，后来感觉像是火焰包裹住自己，但是依旧感觉冷，手表一直发高心率通知，一直维持在 120 次以上；</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221225115320643.png" alt="image-20221225115320643"></p><p>浑身发热，头晕目眩，翻来覆去也睡不着，喉咙像是刚从沙漠走出来的旅人，无奈十一点左右去吃了片布洛芬，顺便量了个体温，39℃</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221225120729123.png" alt="image-20221225120729123"></p><p>平安夜快乐 🎄</p><h3 id="12-26"><a href="#12-26" class="headerlink" title="12-26"></a>12-26</h3><blockquote><p>2022-12-26        多云        -3℃-6℃</p></blockquote><p>头疼，注意保暖，谨防感冒 🤧！！！</p><h3 id="12-28"><a href="#12-28" class="headerlink" title="12-28"></a>12-28</h3><blockquote><p>2022-12-28        多云        -2℃-7℃</p></blockquote><p>退烧了，但依旧头昏眼花，鼻子不通气，嗓子疼。</p><h3 id="12-29"><a href="#12-29" class="headerlink" title="12-29"></a>12-29</h3><blockquote><p>2022-12-29        多云转晴        -5℃-8℃</p></blockquote><p>感冒好的差不多了，只剩咳嗽和嗓子疼了。头发接近三个月没剪了，长的戳眼睛，一直想剪的，但一直拖，现在实在太长了，正好感冒好了，也到年底了，剪个头迎接新的一年。到了理发店把要剪的发型图片给老板看了一下，并且告诉他稍微修一下，不需要剪得太多，老板说：“好”。剪之前像刘青松，剪完后像刘华强。😶老板，听我说谢谢你，因为有你……以下是我想剪的发型和老板给我剪的。</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/12ec5df28480b437b12597ccd5367fa.jpg" alt="12ec5df28480b437b12597ccd5367fa"></p><p>老板说：“我就是按图片剪的，你看不一样的嘛!”。至今我都不知道老板是什么时候瞎的，这里祝老板生意兴隆，好，有请下一位处刑者上刑台。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章2</title>
      <link href="/2022/12/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A02/"/>
      <url>/2022/12/23/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A02/</url>
      
        <content type="html"><![CDATA[<h2 id="我是测试文章2，你能看见我吗"><a href="#我是测试文章2，你能看见我吗" class="headerlink" title="我是测试文章2，你能看见我吗"></a>我是测试文章2，你能看见我吗</h2><p>写点东西：东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 基础知识</title>
      <link href="/2022/12/21/Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/12/21/Vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="一、Vue-nextTick-原理"><a href="#一、Vue-nextTick-原理" class="headerlink" title="一、Vue nextTick 原理"></a>一、Vue nextTick 原理</h2><p>我们知道：如果在 Vue 组件中修改了数据后，再立马调用 <code>nextTick</code>，能获取到更新后的 DOM。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div ref=&quot;mydiv&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 msg 之前存的是 &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mydiv</span>) <span class="comment">// abc</span></span><br><span class="line"><span class="comment">// 在 nextTick 回调中获取 DOM</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mydiv</span>) <span class="comment">// hello</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>原因和实现原理</strong></p><p>这是因为 <code>nextTick</code> 的回调函数是在下一次 DOM 更新循环完成后才被执行的。</p><p>Vue 内部实现该功能时，利用了 <strong>异步的微任务优先执行</strong> 这一特性，通过异步方法包装和执行 <code>nextTick</code> 上设置的回调函数</p><p>进阶知识：Vue 源代码解析</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callbacks = []</span><br><span class="line"><span class="keyword">let</span> pending = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushCallbacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 把标签还原为false</span></span><br><span class="line">  pending = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 依次执行回调</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; callbacks.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    callbacks[i]()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义异步方法</span></span><br><span class="line"><span class="comment">// (这里采用优雅降级处理，尝试不同方式产生异步微任务)</span></span><br><span class="line"><span class="keyword">let</span> timerFunc</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前环境支持 Promise，则利用 Promise 产生微任务</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    p.<span class="title function_">then</span>(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前环境支持 MutationObserve，则利用 MutationObserve 产生微任务</span></span><br><span class="line"><span class="comment">// MutationObserve 主要是监听 DOM 变化，也是一个异步方法</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">MutationObserve</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></span><br><span class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserve</span>(flushCallbacks)</span><br><span class="line">  <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="title class_">String</span>(counter))</span><br><span class="line"></span><br><span class="line">  observer.<span class="title function_">observe</span>(textNode, &#123;</span><br><span class="line">    <span class="attr">characterData</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></span><br><span class="line">    textNode.<span class="property">data</span> = <span class="title class_">String</span>(counter)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果当前环境支持 setImmediate，则利用 setImmediate 产生微任务</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setImmediate</span>(flushCallbacks)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上都不支持，则最后降级为采用 setTimeout 产生宏任务</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  timerFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(flushCallbacks, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 nextTick 函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nextTick</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  callbacks.<span class="title function_">push</span>(cb)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用节流阀机制，让回调没执行完之前，忽略后续 nextTick 的执行</span></span><br><span class="line">  <span class="keyword">if</span> (!pending) &#123;</span><br><span class="line">    pending = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 执行异步任务，并触发 nextTick 回调函数的执行</span></span><br><span class="line">    <span class="title function_">timerFunc</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、Vue-的虚拟-DOM-diff-算法原理"><a href="#二、Vue-的虚拟-DOM-diff-算法原理" class="headerlink" title="二、Vue 的虚拟 DOM diff 算法原理"></a>二、Vue 的虚拟 DOM diff 算法原理</h2><p>首先要明确：和 React 的全量 diff 不一样，Vue 的 diff 是采用订阅机制下的局部 diff 。</p><p>diff 的过程：</p><p>DOM 更新的时候：先比较同级节点</p><p>p ==&gt; div 就直接替换 p ==&gt; p 就直接改属性值</p><p>子节点 key <code>key一致==&gt;不动</code> <code>key多了或者少了==&gt;新增或者删除dom</code></p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221114200239537.png" alt="image-20221114200239537"></p><h2 id="三、hash-和-history-两种路由模式"><a href="#三、hash-和-history-两种路由模式" class="headerlink" title="三、hash 和 history 两种路由模式"></a>三、hash 和 history 两种路由模式</h2><h3 id="3-1-什么是前端路由"><a href="#3-1-什么是前端路由" class="headerlink" title="3.1 什么是前端路由"></a>3.1 什么是前端路由</h3><p>前端路由：url 和 组件视图映射关系</p><p>就是：变换 URL 浏览器的路径，并更新视图，但不用重新向服务器请求页面</p><h3 id="3-2-hash"><a href="#3-2-hash" class="headerlink" title="3.2 hash"></a>3.2 hash</h3><p><strong>hash 路由的实现原理和特点</strong></p><p>hash 是指 URL 中 <code>#</code> 后面携带的信息，它可通过 <code>window.location.hash</code> 获取到。</p><p>虽然 hash 属于 URL 的一部分，但它并不属于 HTTP 标准请求路径的一部分，因此改变 hash 内容并不会引起页面刷新。</p><p>而当 hash 发生改变时，能通过 <code>window</code> 的 <code>hashchange</code> 事件监听到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>且当改变 hash 时，会在浏览器访问历史中增加一条记录，所以利用该特点，就能用来实现上面提到的前端路由”变换 URL 浏览器的路径，并更新视图，但不用重新向服务器请求页面”的功能了。</p><blockquote><p>hash 路由的特点：</p><ul><li>兼容性好(目前的浏览器都支持)</li><li>URL 不美观(带#)</li></ul></blockquote><h3 id="3-3-history"><a href="#3-3-history" class="headerlink" title="3.3 history"></a>3.3 history</h3><p><strong>history 路由的实现原理和特点：</strong></p><p>这种路由模式的实现，利用了 HTML5 标准中 history 对象新增的 <code>pushState()</code> 和 <code>replaceState()</code> 方法</p><p>在老版 <code>history</code> 对象上有 <code>back、forward、go</code> 这些方法；而在新版中又加入了以上两个方法，它们的作用是：修改浏览器历史。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加一条 URL 记录</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(state, title, targetURL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接替换掉当前的 URL 记录</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">replaceState</span>(state, title, targetURL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// state:传递给目标路由的信息</span></span><br><span class="line"><span class="comment">// title:页面标题</span></span><br><span class="line"><span class="comment">// targetURL:要设置的 URL 历史记录</span></span><br></pre></td></tr></table></figure><p>当调用这两个方法，进行浏览器历史记录的修改后，浏览器上的 URL 会发生改变，但页面并不会刷新，这就为实现前端路由提供了基础。</p><blockquote><p>history 路由的特点：</p><ul><li>URL 美观</li><li>刷新页面会出现 404（需要后端进行配置设置）</li></ul></blockquote><h2 id="四、Vue-生命周期"><a href="#四、Vue-生命周期" class="headerlink" title="四、Vue 生命周期"></a>四、Vue 生命周期</h2><p>每个实例从创建到销毁的过程，就是生命周期。</p><blockquote><p>生命周期 =&gt; 一个事物从出生 到 消亡的全部过程</p><p>生命周期（Life Cycle）是指一个组件从<code>创建</code>=&gt; <code>运行</code> =&gt; <code>销毁</code>的整个阶段，强调的是一个时间段</p><ul><li>张三出生，表示这个人生命周期的开始</li><li>张三离世，表示这个人生命周期的结束</li><li>中间张三的一生，就是张三的生命周期</li></ul><p>我们可以把<code>每个 vue 组件运行的过程</code>，也概括为生命周期：</p><ul><li>vue 组件的初始化，表示生命周期的开始</li><li>vue 组件的销毁，表示生命周期的结束</li><li>vue 组件中间运行的过程，就是组件的生命周期</li></ul></blockquote><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221114203830261.png" alt="image-20221114203830261"></p><p>Vue 共有以下生命周期：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> beforecreated：data数据初始化之前，组件还没有数据</span><br><span class="line"><span class="number">2.</span> <span class="attr">created</span>: data数据初始化之后，可以获取到组件的数据</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> beforeMount：<span class="variable constant_">DOM</span>渲染之前，<span class="variable constant_">DOM</span>还没渲染</span><br><span class="line"><span class="number">4.</span> mount：<span class="variable constant_">DOM</span>渲染之后，可以操作<span class="variable constant_">DOM</span>了</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="attr">beforeUpdate</span>: 数据更新，<span class="variable constant_">DOM</span>更新前</span><br><span class="line"><span class="number">6.</span> <span class="attr">updated</span>: 数据更新，<span class="variable constant_">DOM</span>更新后</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> <span class="attr">beforeDestroy</span>: 组件销毁前</span><br><span class="line"><span class="number">8.</span> <span class="attr">destroyed</span>: 组件销毁后</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> activated：使用 keep-alive 时，当缓存的组件激活时</span><br><span class="line"><span class="number">10.</span> deactivated：使用 keep-alive 时，当缓存的组件停用时</span><br><span class="line"></span><br><span class="line"><span class="number">11.</span> errorCaptured：当捕获到一个来自子孙组件中的错误时</span><br></pre></td></tr></table></figure><p><strong>使用场景：</strong></p><ul><li><p>created: 发送请求，因为有数据了</p></li><li><p>mounted: 操作 DOM， 因为有 dom 了</p></li><li><p>updated: 数据变化之后，操作 DOM （用的并不多，因为有 nextTick）</p></li><li><p>beforeDestory : 释放资源，需要释放一些全局资源，比如定时器，比如全局事件（重要，容易造成内存泄漏）</p></li></ul><h2 id="五、new-Vue-执行后的整个流程"><a href="#五、new-Vue-执行后的整个流程" class="headerlink" title="五、new Vue() 执行后的整个流程"></a>五、new Vue() 执行后的整个流程</h2><p>Vue 的生命周期有三大阶段：</p><ul><li>创建阶段</li><li>运行阶段</li><li>销毁阶段</li></ul><p>而执行 <code>new Vue()</code> 后发生的整个流程，其实就是经历 Vue 实例的第一阶段：创建阶段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 渲染</span></span><br><span class="line">  <span class="comment">// 这里的 h 是 createElement 方法</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/vue生命周期.png" alt="vue生命周期"></p><h2 id="六、v-model-的实现原理"><a href="#六、v-model-的实现原理" class="headerlink" title="六、v-model 的实现原理"></a>六、v-model 的实现原理</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><code>v-model</code> 指令可用来在表单元素 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 上创建双向数据绑定。</p><p><code>v-model</code> 会忽略所有表单元素自身的 <code>value</code>、<code>checked</code>、<code>selected</code> 属性的初始值，而总是以 Vue 实例的 data 作为数据来源，因此你应该通过绑定的组件的 <code>data</code> 属性来设置初始值。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><code>v-model</code> 只不过是一个语法糖，它是以下两个功能的简写：</p><ul><li>通过 <code>v-bind</code> 来绑定响应式数据</li><li>通过触发 <code>input事件</code> 来传递数据</li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;content&quot; /&gt;</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-bind:value=&quot;content&quot; @input=&quot;content = $event.target.value&quot; /&gt;</span><br></pre></td></tr></table></figure><p><code>Object.defineProperty()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span><br><span class="line"><span class="comment">// 参数1 就是要处理的对象，参数2 这个对象上的某个属性，参数3是一个配置对象</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// value: 18, // 默认情况age属性只能读，不能改，而且不能被遍历</span></span><br><span class="line">  <span class="comment">// enumerable: true, // 控制当前属性可以枚举(遍历)</span></span><br><span class="line">  <span class="comment">// writable: true // 允许属性值被修改</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span> <span class="comment">// 20也会被当做 age属性的值，不能和value同时存在</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="comment">// 涉及到属性值的修改就会触发set</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set触发了&#x27;</span>, val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 18&#125;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">99</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 18&#125;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(k) <span class="comment">// name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是 <code>Object.defineProperty()</code> 中的 get 和 set 方法</p><p><strong>js 实现 v-model</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需求：使用原生 js 实现一个 v-model 的效果 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    vue中的 v-model 是：:value + @input</span></span><br><span class="line"><span class="comment">    vue响应式 核心 Object.defineProperty这个方法</span></span><br><span class="line"><span class="comment">    Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ipt = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> h2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span> &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// vue2中是将我们定义在data中的数据 重新搞一份新的，我们在页面中操作的其实是vue做的新对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> _data = &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> watch = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">name</span>(<span class="params">newVal, oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal, oldVal)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_data, <span class="string">&#x27;name&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> obj.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">set</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 数据发生变化，将数据同步给视图，数据驱动视图</span></span></span><br><span class="line"><span class="language-javascript">          watch.<span class="property">name</span> &amp;&amp; watch.<span class="title function_">name</span>(val, obj.<span class="property">name</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性修改了&#x27;</span>, val) <span class="comment">// 将改的属性的最新值，赋值给obj.name</span></span></span><br><span class="line"><span class="language-javascript">          obj.<span class="property">name</span> = val <span class="comment">// 只要obj的属性是啥，_data中的name属性值就是啥</span></span></span><br><span class="line"><span class="language-javascript">          ipt.<span class="property">value</span> = val</span></span><br><span class="line"><span class="language-javascript">          h2.<span class="property">innerHTML</span> = val</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(_data)</span></span><br><span class="line"><span class="language-javascript">      _data.<span class="property">name</span> = <span class="string">&#x27;ls&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(_data)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 默认将输入框的值和h2标签的内容设置一致</span></span></span><br><span class="line"><span class="language-javascript">      ipt.<span class="property">value</span> = _data.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">      h2.<span class="property">innerHTML</span> = _data.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 双向绑定 数据驱动视图 视图也会驱动数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 给输入框绑定事件，将输入框的值设置给_data</span></span></span><br><span class="line"><span class="language-javascript">      ipt.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        _data.<span class="property">name</span> = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// Object.defineProperty方法对data中定义的数据做劫持，劫持出一个新对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 我们在操作时，其实一直操作的是这个新对象，vue内部会实时将这个对象的最新状态同步给自己写的对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 只要值修改就会触发Object.defineProperty中的set方法，这个方法中可以取到最新的值，将这个值同步给之前定义的数据和视图</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 修改视图的时候，其实也是会将输入的值，同步给劫持的这个新对象，触发set方法</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、keep-alive-的实现原理"><a href="#七、keep-alive-的实现原理" class="headerlink" title="七、keep-alive 的实现原理"></a>七、keep-alive 的实现原理</h2><p>默认情况下，切换动态组件时无法保持组件的状态。会将组件销毁, 将来显示时, 又会重新创建</p><p>此时可以使用 vue 内置的 keep-alive 组件保持动态组件的状态。</p><p>使用 keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;component is=&quot;XXXX&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>keep-alive 是 Vue 的内置组件，也是一个抽象组件(abstract: true)，自身不会被渲染成真正的 DOM 元素。</p><p>keep-alive 内包裹的动态组件在切换时，会执行将组件 <code>存入缓存</code> 或 <code>从缓存取出</code> 的操作，而不是将组件 <code>销毁</code> 或 <code>重建</code> 的操作。</p><p>另外，keep-alive 拥有两个特有的生命周期钩子：<code>activated</code> 和 <code>deactivated</code> 。当被包裹组件在被存入缓存时，会执行 <code>deactivated</code> 钩子；而从缓存取出并渲染时，会执行 <code>activated</code> 钩子。</p><h2 id="八、Vue-项目的性能优化"><a href="#八、Vue-项目的性能优化" class="headerlink" title="八、Vue 项目的性能优化"></a>八、Vue 项目的性能优化</h2><p><strong>开发阶段的常规优化</strong></p><ol><li>尽量减少组件内 data 中保存的数据，因为每个 data 数据都会增加 getter 和 setter，并收集对应的 watcher</li><li>如果需要在 v-for 时为每个元素绑定事件，则应该使用事件代理</li><li>使用 key 属性来保证唯一性，提高渲染性能</li><li>合理的选择 v-if 或 v-show 进行条件渲染</li><li>使用路由懒加载、异步组件等方式来实现组件的按需加载</li><li>合理的使用 keep-alive 来缓存一些组件</li><li>使用防抖、节流来优化界面的操作处理</li><li>使用第三方组件库时，采用组件的按需导入，而不是全局导入</li><li>长列表采用滚动到可视区域后动态加载(即虚拟列表)数据懒加载</li><li>使用图片懒加载</li></ol><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/懒加载.gif" alt="懒加载"></p><ol><li>骨架屏</li><li>组件数据懒加载</li></ol><p><strong>打包发布时的优化</strong></p><ol><li>压缩代码，减少文件尺寸</li><li>使用 Tree Shaking 移除未使用的模块代码，减少文件尺寸</li><li>使用 Scope Hoisting 合并模块，提高执行性能</li><li>使用 cdn 加载第三方模块，提高下载速度</li><li>为不同环境生成不同级别的 SourceMap ，提高调试效率 - 辅助项目调试</li></ol><h2 id="九、Proxy-与-Object-defineProperty-实现双向绑定的优劣"><a href="#九、Proxy-与-Object-defineProperty-实现双向绑定的优劣" class="headerlink" title="九、Proxy 与 Object.defineProperty 实现双向绑定的优劣"></a>九、Proxy 与 Object.defineProperty 实现双向绑定的优劣</h2><p><strong>Object.defineProperty 的缺陷</strong></p><ul><li>无法监听数组变化</li><li>只能劫持对象中的属性，不能对对象整体进行劫持</li></ul><p><strong>Proxy 实现双向绑定的特点</strong></p><ul><li>可以直接监听对象而非属性</li><li>可以直接监听数组的变化</li><li>Proxy 返回的是新对象，操作时可操作该新对象而不修改老对象</li><li>Proxy 的拦截方法丰富，可实现各种强大功能</li><li>Proxy 受各大浏览器厂商的支持和优化，性能在不断提高</li></ul><p><strong>Proxy 存在的缺点</strong></p><ul><li>并不是所有浏览器都支持 Proxy，因此有兼容性问题</li></ul><h2 id="十、Vue-项目中实现路由按需加载的三种方式"><a href="#十、Vue-项目中实现路由按需加载的三种方式" class="headerlink" title="十、Vue 项目中实现路由按需加载的三种方式"></a>十、Vue 项目中实现路由按需加载的三种方式</h2><ul><li>Vue 异步组件加载技术</li><li><code>import()</code> 方法（ES 提案）</li><li><code>require.ensure()</code> 方法（webpack）</li></ul><p>代码示例：</p><ol><li>Vue 异步组件加载技术(了解)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打包后，每个组件都生成独自的js文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;@/components/home&#x27;</span>], resolve)</span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;@/components/product&#x27;</span>], resolve)</span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">&#x27;@/components/about&#x27;</span>], resolve)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>import()</code> 方法(常用)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有指定 webpackChunkName，每个组件分别打包成一个js文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> const Home = () =&gt; import(&#x27;@/components/home&#x27;)</span></span><br><span class="line"><span class="comment"> const Product = () =&gt; import(&#x27;@/components/Product&#x27;)</span></span><br><span class="line"><span class="comment"> const About = () =&gt; import(&#x27;@/components/About&#x27;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定了相同的 webpackChunkName，会合并打包进同一个js文件</span></span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;demo&#x27; */</span>  <span class="string">&#x27;@/components/home&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">Product</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;demo&#x27; */</span> <span class="string">&#x27;@/components/Product&#x27;</span>)</span><br><span class="line"> <span class="keyword">const</span> <span class="title function_">About</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="params"><span class="comment">/* webpackChunkName: &#x27;demo&#x27; */</span> <span class="string">&#x27;@/components/About&#x27;</span></span>)</span><br><span class="line"></span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: <span class="title class_">Product</span></span><br><span class="line"> &#125;,</span><br><span class="line"> &#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li><code>require.ensure()</code> 方法(了解)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack提供的require.ensure()，在最后的参数上指定相同的名称，会合并打包成一个js文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.<span class="title function_">ensure</span>([], <span class="function">() =&gt;</span> <span class="title function_">r</span>(<span class="built_in">require</span>(<span class="string">&#x27;@/components/home&#x27;</span>)), <span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;product&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.<span class="title function_">ensure</span>([], <span class="function">() =&gt;</span> <span class="title function_">r</span>(<span class="built_in">require</span>(<span class="string">&#x27;@/components/product&#x27;</span>)), <span class="string">&#x27;demo&#x27;</span>)</span><br><span class="line">&#125;，</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.<span class="title function_">ensure</span>([], <span class="function">() =&gt;</span> <span class="title function_">r</span>(<span class="built_in">require</span>(<span class="string">&#x27;@/components/about&#x27;</span>)), <span class="string">&#x27;demo-2&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、SPA"><a href="#十一、SPA" class="headerlink" title="十一、SPA"></a>十一、SPA</h2><p>SPA (Single Page Application)，即单页面应用。</p><p>它的本质是通过 JS 来动态生成、更新、删除页面中的 DOM 元素。再配合前端路由机制，可让用户感觉页面地址和页面内容都发生了切换，但其实并没有重新向服务端请求新的 html 内容，而完全由前端的 JS 代码重新生成了新的 html 内容。</p><p><strong>重点原理</strong></p><ul><li>如何操作 DOM：由 DOM API 完成</li><li>如何实现前端路由：通过 window.onhashchange 实现；或通过使用 history API (pushState/replaceState 等)实现</li><li>和服务器交互什么数据：第一次请求服务器时，获取 html 、js 、css；后续基本不再请求这类内容，而只通过 ajax 请求纯数据（如 JSON）</li></ul><p><strong>SPA 优点</strong></p><ol><li>用户体验好：无需刷新页面，显示流畅</li><li>能实现良好的前后端分离开发模式</li><li>能减轻服务器压力：服务器只用响应纯数据即可，不用管 html 渲染合成，这样吞吐能力会提高几倍</li><li>能增强后端程序的复用性：一套接口可同时适用于 Web 网页、手机 APP、小程序等多种客户端</li></ol><p><strong>SPA 缺点</strong></p><ol><li>对 SEO 不友好</li><li>初次加载页面的时间较长</li></ol><h2 id="十二、计算属性和侦听器的区别"><a href="#十二、计算属性和侦听器的区别" class="headerlink" title="十二、计算属性和侦听器的区别"></a>十二、计算属性和侦听器的区别</h2><p><strong>计算属性 computed：</strong></p><ol><li>支持缓存，只有依赖数据发生改变，才会重新进行计算</li><li>不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化</li><li>如果 computed 需要对数据修改，需要写 get 和 set 两个方法，当数据变化时，调用 set 方法</li><li>computed 擅长处理的场景：一个数据受多个数据影响，例如购物车计算总价</li></ol><p><strong>侦听属性 watch：</strong></p><ol><li>不支持缓存，数据变，直接会触发相应的操作；</li><li>watch 支持异步；监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li><li>immediate：组件加载立即触发回调函数执行</li><li>deep: true 的意思就是深入监听，任何修改 obj 里面任何一个属性都会触发这个监听器里的 handler 方法来处理逻辑</li><li>watch 擅长处理的场景：一个数据影响多个数据，例如搜索框</li></ol><h2 id="十三、Vue-跨域"><a href="#十三、Vue-跨域" class="headerlink" title="十三、Vue 跨域"></a>十三、Vue 跨域</h2><p><strong>开发环境：</strong></p><p>通过配置文件 <code>vue.config.js</code> 中的 <code>devServer</code> 下的 <code>proxy</code> 配置项，用开发服务器作为代理，实现接口跨域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: <span class="string">&#x27;http://192.168.0.123:8888&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生产环境：</strong></p><p>通过专用于生产环境的服务器来实现跨域，如：用 Nginx 进行后端接口代理</p><h2 id="十四、token"><a href="#十四、token" class="headerlink" title="十四、token"></a>十四、token</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>token 是一个用户身份的唯一标识（令牌），就是一个后端加密处理完的字符串，前端没有能力去生成 token。</p><p>登录成功后，服务器返回，前端需要存储 token，下一次向服务器发送请求的时候需要携带这个 token，服务端需要验证，验证通过后才会再次响应数据给浏览器，通常在开发中 token 是有时效性的，一般是 2h 。</p><h3 id="token-过期处理"><a href="#token-过期处理" class="headerlink" title="token 过期处理"></a>token 过期处理</h3><ol><li>重新登录</li><li>双 token 刷新 token，<ul><li>登录成功后会返回两个 token，一个 token 是发送请求携带用（这个 token 会过期），另一个 token 一般叫 refresh_token ，它的作用是等 token 过期后刷新出来一份新 token</li><li>只要 token 过期后，401，需要携带 refresh_token 向服务器发送请求，请求一份新 token，将新 token 存储下来</li><li>refresh_token 周期一般是半个月左右</li></ul></li></ol><h2 id="十五、路由导航守卫"><a href="#十五、路由导航守卫" class="headerlink" title="十五、路由导航守卫"></a>十五、路由导航守卫</h2><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221115164644308.png" alt="image-20221115164644308"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 详见 vueRouter 文章</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章1</title>
      <link href="/2022/12/21/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A01/"/>
      <url>/2022/12/21/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A01/</url>
      
        <content type="html"><![CDATA[<h2 id="我是一篇测试文本，你能看见我吗"><a href="#我是一篇测试文本，你能看见我吗" class="headerlink" title="我是一篇测试文本，你能看见我吗"></a>我是一篇测试文本，你能看见我吗</h2><p>写点东西：东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西东西<br><div class="note default simple"><p>我是内容</p></div></p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端 基础知识</title>
      <link href="/2022/12/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2022/12/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="前端知识总结"><a href="#前端知识总结" class="headerlink" title="前端知识总结"></a>前端知识总结</h1><h2 id="非框架部分"><a href="#非框架部分" class="headerlink" title="非框架部分"></a>非框架部分</h2><h3 id="一、HTML-与-CSS"><a href="#一、HTML-与-CSS" class="headerlink" title="一、HTML 与 CSS"></a>一、HTML 与 CSS</h3><h4 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1. 语义化标签"></a>1. 语义化标签</h4><div class="table-container"><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">strong</td><td style="text-align:center">加粗</td></tr><tr><td style="text-align:center">ins</td><td style="text-align:center">下划线</td></tr><tr><td style="text-align:center">em</td><td style="text-align:center">倾斜</td></tr><tr><td style="text-align:center">del</td><td style="text-align:center">删除线</td></tr><tr><td style="text-align:center">header</td><td style="text-align:center">网页头部</td></tr><tr><td style="text-align:center">nav</td><td style="text-align:center">网页导航</td></tr><tr><td style="text-align:center">footer</td><td style="text-align:center">网页底部</td></tr><tr><td style="text-align:center">aside</td><td style="text-align:center">网页侧边栏</td></tr><tr><td style="text-align:center">section</td><td style="text-align:center">网页区块</td></tr><tr><td style="text-align:center">article</td><td style="text-align:center">网页文章</td></tr></tbody></table></div><h4 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2. 选择器"></a>2. 选择器</h4><h5 id="1-复合选择器"><a href="#1-复合选择器" class="headerlink" title="(1) 复合选择器"></a>(1) 复合选择器</h5><ul><li><p>后代选择器：空格</p><p>语法：选择器1 选择器2 { css }</p></li><li><p>子代选择器：&gt;</p><p>语法：选择器1&gt;选择器2 { css }</p></li></ul><h5 id="2-并集选择器："><a href="#2-并集选择器：" class="headerlink" title="(2) 并集选择器：,"></a>(2) 并集选择器：,</h5><p>语法：选择器1,选择器2 { css }</p><h5 id="3-交集选择器：紧挨着"><a href="#3-交集选择器：紧挨着" class="headerlink" title="(3) 交集选择器：紧挨着"></a>(3) 交集选择器：紧挨着</h5><p>语法：选择器1选择器2 { css }</p><h5 id="4-hover-伪类选择器"><a href="#4-hover-伪类选择器" class="headerlink" title="(4) hover 伪类选择器"></a>(4) hover 伪类选择器</h5><p>作用：鼠标悬停在元素上的状态</p><p>语法：选择器:hover { css }</p><h4 id="3-CSS-选择器优先级"><a href="#3-CSS-选择器优先级" class="headerlink" title="3. CSS 选择器优先级"></a>3. CSS 选择器优先级</h4><p>继承 &lt; 通配符选择器 &lt; 标签选择器 &lt; 类选择器 &lt; id选择器 &lt; 行内样式 &lt; !important</p><h4 id="4-字体样式"><a href="#4-字体样式" class="headerlink" title="4. 字体样式"></a>4. 字体样式</h4><ul><li><p>字体大小：<code>font-size</code> (谷歌默认字体16px)</p></li><li><p>字体粗细：<code>font-weight</code></p><p><strong>属性值：</strong></p><ul><li>正常(默认值)：normal(400)</li><li>加粗：bold(700)</li></ul></li><li><p>字体样式：<code>font-style</code> </p><p><strong>属性值：</strong></p><ul><li>正常(默认值)：normal</li><li>倾斜：italic</li></ul></li><li><p>字体类型：<code>font-family</code></p></li></ul><p>属性连写：<code>font: style weight size family;</code> (swsf 稍微舒服)</p><h4 id="5-文本样式"><a href="#5-文本样式" class="headerlink" title="5. 文本样式"></a>5. 文本样式</h4><ul><li><p>文本缩进：<code>text-indent</code> </p></li><li><p>文本水平对齐方式：<code>text-align</code> </p><p><strong>属性值：</strong></p><ul><li>center：居中</li><li>left：左对齐</li><li>right：右对齐</li></ul></li><li><p>文本修饰：<code>text-decoration</code> </p><p><strong>属性值：</strong></p><ul><li>underline：下划线</li><li>line-through：删除线</li><li>overline：上划线</li><li><strong>none：无装饰线(清除a标签默认下划线)</strong></li></ul></li></ul><h4 id="6-行高"><a href="#6-行高" class="headerlink" title="6. 行高"></a>6. 行高</h4><p><code>line-height</code></p><p>属性值：数字 + px</p><p>​              倍数</p><p>应用：让单行文本垂直居中可以设置 <code>line-height: 文字父元素高度</code></p><h4 id="7-背景相关属性"><a href="#7-背景相关属性" class="headerlink" title="7. 背景相关属性"></a>7. 背景相关属性</h4><h5 id="1-背景颜色"><a href="#1-背景颜色" class="headerlink" title="(1) 背景颜色"></a>(1) 背景颜色</h5><p><code>background-color: 颜色</code></p><h5 id="2-背景图片"><a href="#2-背景图片" class="headerlink" title="(2) 背景图片"></a>(2) 背景图片</h5><p><code>background-image: url(&#39;图片路径&#39;)</code></p><h6 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h6><p>语法: <code>background-image: linear-gradient(颜色1, 颜色2)</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;渐变背景&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/* background-image: linear-gradient(pink, skyblue); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 透明-&gt;半透明 */</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(transparent, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>));</span><br><span class="line">    <span class="comment">/* background-image: linear-gradient(rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.6)); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* background-image: linear-gradient(red, green, blue); */</span></span><br><span class="line">    <span class="comment">/* background-image: linear-gradient(to right, red, green, blue); */</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="3-背景平铺"><a href="#3-背景平铺" class="headerlink" title="(3) 背景平铺"></a>(3) 背景平铺</h5><p><code>background-repeat: repeat(默认值，水平和垂直方向都平铺)/no-repeat(不平铺)/repeat-x(沿着水平方向平铺)/repeat-y(沿着垂直方向平铺)</code></p><h5 id="4-背景位置"><a href="#4-背景位置" class="headerlink" title="(4) 背景位置"></a>(4) 背景位置</h5><p><code>background-position:水平方向位置 垂直方向位置</code></p><h5 id="5-背景图片大小"><a href="#5-背景图片大小" class="headerlink" title="(5)背景图片大小"></a>(5)背景图片大小</h5><p><code>background-size: 宽度 高度</code></p><p>取值：</p><div class="table-container"><table><thead><tr><th style="text-align:center">取值</th><th style="text-align:center">场景</th></tr></thead><tbody><tr><td style="text-align:center">数字 + px</td><td style="text-align:center">简单方便，常用</td></tr><tr><td style="text-align:center">百分比</td><td style="text-align:center">相对于当前盒子自身的宽高百分比</td></tr><tr><td style="text-align:center">contain</td><td style="text-align:center">包含，将背景图片等比例缩放，直到不会超过盒子的最大</td></tr><tr><td style="text-align:center">cover</td><td style="text-align:center">覆盖，将背景图片等比例缩放，直到刚好填满整个盒子没有空白</td></tr></tbody></table></div><h5 id="6-背景属性连写"><a href="#6-背景属性连写" class="headerlink" title="(6) 背景属性连写"></a>(6) 背景属性连写</h5><p><code>background: color image repeat position/size</code> </p><p><strong>拓展</strong></p><h5 id="object-fit-属性"><a href="#object-fit-属性" class="headerlink" title="object-fit 属性"></a>object-fit 属性</h5><blockquote><p>这个属性类似于 设置背景图尺寸background-size: cover / contain</p><p>​    object-fit 设置插入图片</p><p>常用属性值：</p><p>​        cover 完全占满整个容器 等比例缩放</p><p>​        contain 只保证占满宽度或者高度 可能会留白</p></blockquote><p>属性值：</p><div class="table-container"><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">fill</td><td style="text-align:center">默认，不保证保持原有的比例，内容拉伸填充整个内容容器。</td></tr><tr><td style="text-align:center">contain</td><td style="text-align:center">保持原有尺寸比例。内容被缩放。</td></tr><tr><td style="text-align:center">cover</td><td style="text-align:center">保持原有尺寸比例。但部分内容可能被剪切。</td></tr><tr><td style="text-align:center">none</td><td style="text-align:center">保留原有元素内容的长度和宽度，也就是说内容不会被重置。</td></tr><tr><td style="text-align:center">scale-down</td><td style="text-align:center">保持原有尺寸比例。内容的尺寸与 none 或 contain 中的一个相同，取决于它们两个之间谁得到的对象尺寸会更小一些。</td></tr><tr><td style="text-align:center">initial</td><td style="text-align:center">设置为默认值，<a href="https://www.runoob.com/cssref/css-initial.html">关于 <em>initial</em></a></td></tr><tr><td style="text-align:center">inherit</td><td style="text-align:center">从该元素的父元素继承属性。 [关于 <em>inherit</em>](</td></tr></tbody></table></div><h4 id="8-元素显示模式"><a href="#8-元素显示模式" class="headerlink" title="8. 元素显示模式"></a>8. 元素显示模式</h4><h5 id="1-块级元素"><a href="#1-块级元素" class="headerlink" title="(1) 块级元素"></a>(1) 块级元素</h5><ul><li><p>属性：display：block </p></li><li><p>显示特点： 1. 独占一行（一行只能显示一个） 2. 宽度默认是父元素的宽度，高度默认由内容撑开 3. 可以设置宽高</p></li><li><p>代表标签：div、p、h系列、ul、li、dl、dt、dd、form、header、nav、footer……</p></li></ul><h5 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="(2) 行内元素"></a>(2) 行内元素</h5><ul><li><p>属性：display：inline</p></li><li><p>显示特点： 1. 一行可以显示多个 2. 宽度和高度默认由内容撑开 3. 不可以设置宽高</p></li><li><p>代表标签：a、span 、b、u、i、s、strong、ins、em、del……</p></li></ul><h5 id="3-行内块"><a href="#3-行内块" class="headerlink" title="(3) 行内块"></a>(3) 行内块</h5><ul><li><p>属性：display：inline-block</p></li><li><p>显示特点： 1. 一行可以显示多个 2. 可以设置宽高</p></li><li><p>代表标签：input、textarea、button、select……</p></li><li><p>特殊情况：img 标签有行内块元素特点，但是 Chrome 调试工具中显示结果是 inline</p></li></ul><h4 id="9-盒子模型"><a href="#9-盒子模型" class="headerlink" title="9. 盒子模型"></a>9. 盒子模型</h4><h5 id="1-内容区域：content"><a href="#1-内容区域：content" class="headerlink" title="(1) 内容区域：content"></a>(1) 内容区域：content</h5><p>属性：width / height</p><h5 id="2-边框区域：border"><a href="#2-边框区域：border" class="headerlink" title="(2) 边框区域：border"></a>(2) 边框区域：border</h5><p>属性：</p><ul><li>边框粗细：<code>border-width: 数字 + px</code></li><li>边框样式：<code>border-style: 实线 solid、虚线 dashed、点线 dotted</code></li><li>边框颜色：<code>border-color: 颜色</code></li></ul><p>连写：<code>border: 10px solid red</code></p><p>边框单方向设置：<code>border-方位名词</code></p><h5 id="3-内边距区域：padding"><a href="#3-内边距区域：padding" class="headerlink" title="(3) 内边距区域：padding"></a>(3) 内边距区域：padding</h5><p>属性值：上右下左</p><p>内边距单方向设置：<code>padding-方位名词</code></p><h5 id="4-外边距区域：margin"><a href="#4-外边距区域：margin" class="headerlink" title="(4) 外边距区域：margin"></a>(4) 外边距区域：margin</h5><p>属性值：上右下左</p><p>外边距单方向设置：<code>margin-方位名词</code></p><h5 id="5-外边距折叠现象"><a href="#5-外边距折叠现象" class="headerlink" title="(5) 外边距折叠现象"></a>(5) 外边距折叠现象</h5><p><strong>合并</strong></p><ul><li><p>场景：垂直布局 的 块级元素，上下的 margin 会合并</p></li><li><p>结果：最终两者距离为 margin 的最大值</p></li><li><p>解决方法：避免就好(只给其中一个盒子设置 margin 即可)</p></li></ul><p><strong>塌陷</strong></p><ul><li><p>场景：互相嵌套 的 块级元素，子元素的 margin-top 会作用在父元素上</p></li><li><p>结果：导致父元素一起往下移动</p></li><li><p>解决方法： 1. 给父元素设置 border-top 或者 padding-top（分隔父子元素的 margin-top） 2. 给父元素设置 overflow：hidden 3. 转换成行内块元素 4. 设置浮动</p></li></ul><h4 id="10-结构伪类选择器"><a href="#10-结构伪类选择器" class="headerlink" title="10. 结构伪类选择器"></a>10. 结构伪类选择器</h4><div class="table-container"><table><thead><tr><th style="text-align:center">选择器</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">E:first-child {  }</td><td style="text-align:center">匹配父元素中第一个子元素，并且是 E 元素</td></tr><tr><td style="text-align:center">E:last-child {  }</td><td style="text-align:center">匹配父元素中最后一个子元素，并且是 E 元素</td></tr><tr><td style="text-align:center">E:nth-child(n) {  }</td><td style="text-align:center">匹配父元素中第 n 个子元素，并且是 E 元素</td></tr><tr><td style="text-align:center">E:nth-last-child(n) {  }</td><td style="text-align:center">匹配父元素中倒数第 n 个子元素，并且是 E 元素</td></tr></tbody></table></div><h4 id="11-伪元素"><a href="#11-伪元素" class="headerlink" title="11. 伪元素"></a>11. 伪元素</h4><p>伪元素：一般页面中的非主体内容可以使用伪元素</p><p>区别： 1. 元素：HTML 设置的标签 2. 伪元素：由 CSS 模拟出的标签效果</p><div class="table-container"><table><thead><tr><th style="text-align:center">伪元素</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><code>::before</code></td><td style="text-align:center">在父元素内容的最前面添加一个伪元素</td></tr><tr><td style="text-align:center"><code>::after</code></td><td style="text-align:center">在父元素内容的最后面添加一个伪元素</td></tr></tbody></table></div><p>注意：</p><ul><li>必须设置 content 属性才能生效</li><li>伪元素默认是行内元素</li></ul><h4 id="12-清除浮动"><a href="#12-清除浮动" class="headerlink" title="12. 清除浮动"></a>12. 清除浮动</h4><h5 id="1-直接设置父元素高度"><a href="#1-直接设置父元素高度" class="headerlink" title="(1) 直接设置父元素高度"></a>(1) 直接设置父元素高度</h5><h5 id="2-额外标签法-会让页面的-HTML-结构变得复杂"><a href="#2-额外标签法-会让页面的-HTML-结构变得复杂" class="headerlink" title="(2) 额外标签法(会让页面的 HTML 结构变得复杂)"></a>(2) 额外标签法(会让页面的 HTML 结构变得复杂)</h5><p>在父元素内容的最后添加一个块级元素，给添加的块级元素设置 clear:both</p><h5 id="3-单伪元素清除法-用伪元素替代了额外标签"><a href="#3-单伪元素清除法-用伪元素替代了额外标签" class="headerlink" title="(3) 单伪元素清除法(用伪元素替代了额外标签)"></a>(3) 单伪元素清除法(用伪元素替代了额外标签)</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* css3之前：伪类 伪元素用的都是 ：</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">            css3之后，提倡：伪元素用两个::  伪类用一个:</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            hover伪类选择器 ：hover</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            伪元素:         ::before</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">            兼容性处理：为了让老版本的浏览器能够支持</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 必加的属性 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 伪元素默认是行内元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 清除浮动的核心代码 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="4-双伪元素清除法"><a href="#4-双伪元素清除法" class="headerlink" title="(4) 双伪元素清除法"></a>(4) 双伪元素清除法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 1、清除浮动</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           2、解决margin的塌陷</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-给父元素设置-overflow-hidden"><a href="#5-给父元素设置-overflow-hidden" class="headerlink" title="(5) 给父元素设置 overflow: hidden"></a>(5) 给父元素设置 overflow: hidden</h5><h4 id="13-BFC（Block-Formatting-Context）"><a href="#13-BFC（Block-Formatting-Context）" class="headerlink" title="13. BFC（Block Formatting Context）"></a>13. BFC（Block Formatting Context）</h4><ul><li>是什么：决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用。简言之，就是一个特殊的块，内部的元素和外部的元素不会相互影响。BFC 内的盒子会在垂直方向上一个接一个地放置，垂直方向上也会发生外边距重叠。</li></ul><ul><li>应用场景：自适应布局（BFC 不与 float box 重叠）、清除浮动（计算BFC的高度时，内部的浮动元素也被计算在内）、防止外边距重叠</li></ul><ul><li>如何触发 BFC：float 属性（不为 none）、overflow属性（不为visible）、position属性（absolute，fixed）、display 属性（inline-block，table-cell，table-caption，flex，inline-flex）</li></ul><h4 id="14-定位"><a href="#14-定位" class="headerlink" title="14. 定位"></a>14. 定位</h4><p><strong>步骤</strong></p><p>设置定位方式：<code>position: static / relative / absolute / fixed</code></p><p>设置偏移值：left / right / top / bottom</p><h5 id="1-相对定位"><a href="#1-相对定位" class="headerlink" title="(1) 相对定位"></a>(1) 相对定位</h5><p>相对于自己之前的位置进行移动(在页面中占位置=&gt;没有脱标)</p><h5 id="2-绝对定位"><a href="#2-绝对定位" class="headerlink" title="(2) 绝对定位"></a>(2) 绝对定位</h5><p>默认相对于浏览器可视区域进行移动(在页面中不占位置=&gt;脱标)</p><p><strong>绝对定位相对于谁移动？ </strong></p><ul><li><p>祖先元素中没有定位 → 默认相对于浏览器进行移动 </p></li><li><p>祖先元素中有定位 → 相对于 最近的 有定位 的祖先元素进行移动</p></li></ul><h5 id="3-子绝父相"><a href="#3-子绝父相" class="headerlink" title="(3) 子绝父相"></a>(3) 子绝父相</h5><p>应用场景：让子元素水平垂直居中</p><p>注意：如果在使用子绝父相时，发现父元素已经有绝对定位了，此时直接子绝即可</p><h5 id="4-固定定位"><a href="#4-固定定位" class="headerlink" title="(4) 固定定位"></a>(4) 固定定位</h5><p>相对于浏览器可视区域进行移动(在页面中不占位置=&gt;脱标)</p><h4 id="14-垂直对齐方式"><a href="#14-垂直对齐方式" class="headerlink" title="14. 垂直对齐方式"></a>14. 垂直对齐方式</h4><p>属性名：vertical-align</p><p>属性值：<em>baseline</em>(默认，基线对齐)</p><p>​              <em>top</em>(顶部对齐)</p><p>​              <em>middle</em>(中部对齐)</p><pre><code>          *bottom*(底部对齐)</code></pre><h4 id="15-光标类型"><a href="#15-光标类型" class="headerlink" title="15. 光标类型"></a>15. 光标类型</h4><p>属性名：cursor</p><p>属性值：<em>default</em>(默认值，通常是箭头)</p><p>​              <em>pointer</em>(小手效果，提示用户可以点击)</p><pre><code>          *text*(工字型，提示用户可以选择文字)          *move*(十字光标，提示用户可以移动)</code></pre><h4 id="16-边框圆角"><a href="#16-边框圆角" class="headerlink" title="16. 边框圆角"></a>16. 边框圆角</h4><p>属性值：border-radius</p><p>取值(顺时针)：数字 + px、百分比</p><h4 id="17-溢出部分显示效果"><a href="#17-溢出部分显示效果" class="headerlink" title="17. 溢出部分显示效果"></a>17. 溢出部分显示效果</h4><p>属性名：overflow</p><p>属性值：<em>visible</em>(默认值，溢出部分可见)</p><pre><code>          *hidden*(移除部分隐藏)          *scroll*(无论是否溢出，都显示滚动条)          *auto*(根据是否溢出，自动显示或隐藏滚动条)</code></pre><h4 id="18-元素本身隐藏"><a href="#18-元素本身隐藏" class="headerlink" title="18. 元素本身隐藏"></a>18. 元素本身隐藏</h4><p>常用：<code>visibility: hidden</code></p><p>​          <code>display: none</code></p><h4 id="19-元素整体透明度"><a href="#19-元素整体透明度" class="headerlink" title="19. 元素整体透明度"></a>19. 元素整体透明度</h4><p>属性名：opacity</p><p>属性值：0~1之间的数字(0:完全不透明；1:完全透明)</p><h4 id="20-文字阴影"><a href="#20-文字阴影" class="headerlink" title="20. 文字阴影"></a>20. 文字阴影</h4><p>属性名：text-shadow</p><p>属性值：<em>h-shadow</em>(必加，水平偏移量) <em>v-shadow</em>(必加，垂直偏移量) <em>blur</em>(模糊度) <em>color</em>(阴影的颜色)</p><p>例：<code>text-shadow: 20px 17px 4px red;</code></p><h4 id="21-盒子阴影"><a href="#21-盒子阴影" class="headerlink" title="21. 盒子阴影"></a>21. 盒子阴影</h4><p>属性名：box-shadow</p><p>属性值：<em>h-shadow</em>(必加，水平偏移量) <em>v-shadow</em>(必加，垂直偏移量) <em>blur</em>(模糊度) <em>spread</em>(外延值) <em>color</em>(阴影的颜色) <em>inset</em>(将阴影改为内部阴影)</p><h4 id="22-过渡"><a href="#22-过渡" class="headerlink" title="22. 过渡"></a>22. 过渡</h4><p>属性名：transition</p><p>属性值：<em>all</em>(所有能过渡的属性都过渡) / <em>过渡的属性</em>(可以是width/height/border-radius/bgc等等) <em>过渡的时间</em>; <em>过渡的延时</em></p><p>例：<code>transition: width 1s,height 1s 1s,border-radius 1s 2s,background-color 1s 3s;</code></p><h4 id="23-平面转换"><a href="#23-平面转换" class="headerlink" title="23. 平面转换"></a>23. 平面转换</h4><h5 id="1-位移"><a href="#1-位移" class="headerlink" title="(1) 位移"></a>(1) 位移</h5><p>属性名：transform</p><p>属性值：translate</p><p>语法：<code>transform: translate(水平移动距离,垂直移动距离)</code></p><p>取值(负值代表反方向移动): 数字 + px；</p><pre><code>                                        百分比(相对于盒子自身的宽高)</code></pre><h6 id="只设置一个方向移动"><a href="#只设置一个方向移动" class="headerlink" title="只设置一个方向移动"></a>只设置一个方向移动</h6><p>单独设置某个方向的移动距离：translateX() &amp; translateY()</p><h5 id="2-旋转"><a href="#2-旋转" class="headerlink" title="(2) 旋转"></a>(2) 旋转</h5><ul><li>语法: <code>transform: rotate(角度)</code> =&gt; 角度单位是deg</li><li>取值:<ul><li>正,代表顺时针旋转</li><li>负,代表逆时针旋转</li></ul></li></ul><h6 id="转换原点"><a href="#转换原点" class="headerlink" title="转换原点"></a>转换原点</h6><ul><li>转换的原点默认是盒子的中心点</li><li><code>transform-origin: 原点水平位置 原点垂直位置</code></li><li>取值:<ul><li>方位名词(left / center / right / top / bottom)  =&gt;  常用</li><li>数字+px</li><li>百分比(相对于盒子自身的大小)</li></ul></li></ul><h5 id="3-缩放"><a href="#3-缩放" class="headerlink" title="(3) 缩放"></a>(3) 缩放</h5><ul><li>通过调整width可以缩放,但是不是中心点放大</li><li><code>transform: scale(数字)</code><ul><li>大于1, 放大</li><li>小于1, 缩小</li></ul></li></ul><h4 id="24-空间转换"><a href="#24-空间转换" class="headerlink" title="24. 空间转换"></a>24. 空间转换</h4><p>语法：</p><ul><li>transform: translate3d(x,y,z)</li><li>transform: translateX(值)</li><li>transform: translateY(值)</li><li>transform: translateZ(值)</li></ul><p>取值(正负均可)：</p><ul><li>像素单位数值</li><li>百分比</li></ul><h4 id="25-透视"><a href="#25-透视" class="headerlink" title="25. 透视"></a>25. 透视</h4><p>属性名(添加给父级)：perspective</p><p>取值：像素单位数值，数值一般在800~1200</p><h4 id="26-空间旋转"><a href="#26-空间旋转" class="headerlink" title="26. 空间旋转"></a>26. 空间旋转</h4><p>语法：</p><ul><li>transform: rotateZ(值)</li><li>transform: rotateX(值)</li><li><p>transform: rotateY(值)</p></li><li><p>transform3d: rotate(x,y,z,角度度数)</p></li></ul><h4 id="27-立体呈现"><a href="#27-立体呈现" class="headerlink" title="27. 立体呈现"></a>27. 立体呈现</h4><p>语法(给父元素设)：transform-style: preserve-3d</p><h4 id="28-空间缩放"><a href="#28-空间缩放" class="headerlink" title="28. 空间缩放"></a>28. 空间缩放</h4><p>语法：</p><ul><li>transform: scaleX(倍数)</li><li>transform: scaleY(倍数)</li><li>transform: scaleZ(倍数)</li><li>transform: scale3d(x,y,z)</li></ul><h4 id="29-动画"><a href="#29-动画" class="headerlink" title="29. 动画"></a>29. 动画</h4><p>实现步骤</p><p>(1) 定义动画</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221205205200978.png" alt="image-20221205205200978"></p><p>(2) 使用动画</p><p>animation: <em>动画名称</em>(必加) <em>动画时长</em>(必加) <em>速度曲线</em> <em>延迟时间</em> <em>重复次数</em> <em>动画执行方向</em>  <em>动画执行完毕时状态</em> </p><h4 id="30-Flex-布局"><a href="#30-Flex-布局" class="headerlink" title="30. Flex 布局"></a>30. Flex 布局</h4><p>设置方式：父元素添加 <code>display: flex</code> </p><p>组成：</p><ul><li>弹性容器</li><li>弹性盒子</li><li>主轴</li><li>侧轴/交叉轴</li></ul><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221205210017934.png" alt="image-20221205210017934"></p><h5 id="1-主轴对齐方式"><a href="#1-主轴对齐方式" class="headerlink" title="(1) 主轴对齐方式"></a>(1) 主轴对齐方式</h5><p>修改主轴对齐方式属性：justify-content</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">flex-start</td><td style="text-align:center">默认值，起点开始依次排列</td></tr><tr><td style="text-align:center">flex-end</td><td style="text-align:center">终点开始依次排列</td></tr><tr><td style="text-align:center"><strong>center</strong></td><td style="text-align:center">沿主轴居中排列</td></tr><tr><td style="text-align:center"><strong>space-around</strong></td><td style="text-align:center">弹性盒子沿主轴均匀排列，空白间距均分在弹性盒子两侧</td></tr><tr><td style="text-align:center"><strong>space-between</strong></td><td style="text-align:center">弹性盒子沿主轴均匀排列，空白间距均分在相邻盒子之间</td></tr><tr><td style="text-align:center"><strong>space-evenly</strong></td><td style="text-align:center">弹性盒子沿主轴均匀排列，弹性盒子与容器之间间距相等</td></tr></tbody></table></div><h5 id="2-侧轴对齐方式"><a href="#2-侧轴对齐方式" class="headerlink" title="(2) 侧轴对齐方式"></a>(2) 侧轴对齐方式</h5><p>修改侧轴对齐方式属性：</p><ul><li>align-items(给父元素加，也就是弹性容器)</li><li>align-self：控制某个弹性盒子在侧轴的对齐方式(给要设置的子元素加，也就是弹性盒子)</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">flex-start</td><td style="text-align:center">默认值，起点开始依次排列</td></tr><tr><td style="text-align:center">flex-end</td><td style="text-align:center">终点开始依次排列</td></tr><tr><td style="text-align:center"><strong>center</strong></td><td style="text-align:center">沿侧轴居中排列</td></tr><tr><td style="text-align:center"><strong>stretch</strong></td><td style="text-align:center">默认值，弹性盒子沿着主轴线被拉伸至铺满容器</td></tr></tbody></table></div><h5 id="3-伸缩比"><a href="#3-伸缩比" class="headerlink" title="(3) 伸缩比"></a>(3) 伸缩比</h5><p>属性：flex: 值</p><p>取值：整数(给弹性盒子设，子元素)</p><h5 id="4-主轴方向"><a href="#4-主轴方向" class="headerlink" title="(4) 主轴方向"></a>(4) 主轴方向</h5><p>主轴默认是水平方向, 侧轴默认是垂直方向</p><p>修改主轴方向属性: flex-direction</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">row</td><td style="text-align:center">行，水平(默认值)</td></tr><tr><td style="text-align:center"><strong>column</strong></td><td style="text-align:center"><strong>列，垂直</strong></td></tr><tr><td style="text-align:center">row-reverse</td><td style="text-align:center">行，从右向左</td></tr><tr><td style="text-align:center">column-reverse</td><td style="text-align:center">列，从下向上</td></tr></tbody></table></div><h5 id="5-弹性盒子换行"><a href="#5-弹性盒子换行" class="headerlink" title="(5) 弹性盒子换行"></a>(5) 弹性盒子换行</h5><p>弹性盒子换行显示 : flex-wrap: wrap;</p><p>调整行对齐方式 ：align-content(取值与 justify-content 基本相同)</p><h4 id="31-长度单位"><a href="#31-长度单位" class="headerlink" title="31. 长度单位"></a>31. 长度单位</h4><h5 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h5><ul><li><p>相对单位(相对于根节点)</p></li><li><p>rem单位是相对于HTML标签的字号计算结果</p></li><li><p>1rem = 1HTML字号大小</p></li></ul><h5 id="em"><a href="#em" class="headerlink" title="em"></a>em</h5><p>相对单位(相对于父元素)</p><h5 id="vw-vh"><a href="#vw-vh" class="headerlink" title="vw / vh"></a>vw / vh</h5><ul><li><p>相对单位</p></li><li><p>相对视口的尺寸计算结果</p></li><li><p>vw：viewport width</p><ul><li>1vw = 1/100视口宽度</li></ul></li><li><p>vh：viewport height</p><ul><li>1vh = 1/100视口高度</li></ul></li></ul><h4 id="默认样式清除"><a href="#默认样式清除" class="headerlink" title="默认样式清除"></a>默认样式清除</h4><blockquote><p>下面只是一些简单的，实际开发会引入一些样式包，例如：<a href="https://github.com/necolas/normalize.css">normalize.css</a>或者reset.css</p></blockquote><ul><li>清除列表默认圆点：<code>list-style: none</code></li><li>清除 a 标签下划线：<code>text-decoration: none</code></li><li>统一浏览器默认文字大小：给 body 设置 <code>font-size</code></li><li>清除浏览器默认 margin 和 padding ：<code>margin: 0; padding: 0</code></li><li>CSS3 盒子模型自动内减：<code>box-sizing: border-box</code> </li></ul><h4 id="CSS书写顺序"><a href="#CSS书写顺序" class="headerlink" title="CSS书写顺序"></a>CSS书写顺序</h4><div class="table-container"><table><thead><tr><th style="text-align:center">顺序</th><th style="text-align:center">类别</th><th style="text-align:center">属性</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">布局属性</td><td style="text-align:center">display、position、float、clear、visibility、overflow</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">盒子模型+背景</td><td style="text-align:center">width、height、margin、padding、border、background</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">文本内容属性</td><td style="text-align:center">color、font、text-decoration、text-align、line-height</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">点缀属性</td><td style="text-align:center">cursor、border-radius、text-shadow、box-shadow</td></tr></tbody></table></div><h3 id="二、JavaScript-基础"><a href="#二、JavaScript-基础" class="headerlink" title="二、JavaScript 基础"></a>二、JavaScript 基础</h3><h4 id="1-输出语法"><a href="#1-输出语法" class="headerlink" title="1. 输出语法"></a>1. 输出语法</h4><p>页面：document.write(‘输出的内容’)</p><p>弹出警告对话框：alert(‘输出的内容’)</p><h4 id="2-输入语法"><a href="#2-输入语法" class="headerlink" title="2. 输入语法"></a>2. 输入语法</h4><p>prompt(‘请输入您的姓名’)</p><h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h4><h5 id="声明变量的三个关键字"><a href="#声明变量的三个关键字" class="headerlink" title="声明变量的三个关键字"></a>声明变量的三个关键字</h5><p>var、let、const</p><p>三者区别：</p><ul><li>var 存在变量提升，let 和 const 则没有，需要先声明再使用</li><li>var 声明的变量为全局作用，let 和 const 声明均是局部作用域</li><li>var 和 let 用于声明变量，可以修改，const 声明的为常量，不可更改</li></ul><h4 id="4-JS-数据类型"><a href="#4-JS-数据类型" class="headerlink" title="4. JS 数据类型"></a>4. JS 数据类型</h4><h5 id="简单数据类型-基本数据类型"><a href="#简单数据类型-基本数据类型" class="headerlink" title="简单数据类型(基本数据类型)"></a>简单数据类型(基本数据类型)</h5><ul><li><p>number 数字型</p></li><li><p>string 字符串型</p><p>模板字符串：反引号 加 ${}</p></li><li><p>boolean 布尔类型</p></li><li><p>undefined 未定义型</p></li><li><p>null 空类型</p></li></ul><h5 id="复杂数据类型-引用数据类型"><a href="#复杂数据类型-引用数据类型" class="headerlink" title="复杂数据类型(引用数据类型)"></a>复杂数据类型(引用数据类型)</h5><ul><li>array 数组</li><li>object 对象</li><li>function 函数</li></ul><h5 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h5><p>typeof 能够直接检测出简单数据类型的类型，不能检测复杂数据类型</p><p>instanceof 可以检测复杂数据类型，返回一个布尔值</p><h4 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5. 运算符"></a>5. 运算符</h4><h5 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="(1) 算术运算符"></a>(1) 算术运算符</h5><p>四则运算(+ - * /)</p><p><strong>取余：%</strong></p><h5 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="(2) 赋值运算符"></a>(2) 赋值运算符</h5><ul><li><strong>+=</strong></li><li>-=</li><li>*=</li><li>/=</li><li>%=</li></ul><h5 id="3-一元运算符"><a href="#3-一元运算符" class="headerlink" title="(3) 一元运算符"></a>(3) 一元运算符</h5><ul><li><strong>自增：++</strong></li><li>自减：—</li></ul><h5 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="(4) 比较运算符"></a>(4) 比较运算符</h5><ul><li>左边是否大于右边 &gt;</li><li>左边是否小于右边 &lt;</li><li>左边是否大于或等于右边 &gt;=</li><li>左边是否小于或等于右边 &lt;=</li><li>左右两边是否相等 ==</li><li><strong>左右两边是否类型和值都相等 ===</strong></li><li><strong>左右两边是否不全等 !==</strong></li></ul><p>注意：</p><ul><li>= 是赋值</li><li>== 是判断</li><li>=== 是全等</li></ul><h5 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="(5) 逻辑运算符"></a>(5) 逻辑运算符</h5><ul><li>与 &amp;&amp;</li><li>或 ||</li><li>非 !</li></ul><h4 id="6-语句"><a href="#6-语句" class="headerlink" title="6. 语句"></a>6. 语句</h4><h5 id="1-if-分支语句"><a href="#1-if-分支语句" class="headerlink" title="(1) if 分支语句"></a>(1) if 分支语句</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>) &#123;</span><br><span class="line">  满足条件<span class="number">1</span>执行的代码</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">2</span>) &#123;</span><br><span class="line">  满足条件<span class="number">2</span>执行的代码  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件<span class="number">3</span>) &#123;</span><br><span class="line">  满足条件<span class="number">3</span>执行的代码  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 小括号为 true 执行花括号中的代码,否则执行 else 中的代码</span></span><br></pre></td></tr></table></figure><h5 id="2-三元运算符"><a href="#2-三元运算符" class="headerlink" title="(2) 三元运算符"></a>(2) 三元运算符</h5><p>条件 ？ 满足执行的代码 : 不满足执行的代码</p><h5 id="3-switch-语句"><a href="#3-switch-语句" class="headerlink" title="(3) switch 语句"></a>(3) switch 语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (数据) &#123;</span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">     代码<span class="number">1</span></span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">     代码<span class="number">2</span></span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> 值<span class="number">3</span>:</span><br><span class="line">     代码<span class="number">3</span></span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">     代码n</span><br><span class="line">     <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意点：</span></span><br><span class="line"><span class="comment">// 1、Switch的判断 num 和 1 进行全等比较 num === 1  比值和类型</span></span><br><span class="line"><span class="comment">// 2、需要配合break关键字，没有break会造成case穿透</span></span><br></pre></td></tr></table></figure><h5 id="4-while-循环"><a href="#4-while-循环" class="headerlink" title="(4) while 循环"></a>(4) while 循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (循环条件) &#123;</span><br><span class="line">  要重复执行的代码(循环体)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// while 循环正确做法  三要素</span></span><br><span class="line">         <span class="comment">// 1. 变量初始值</span></span><br><span class="line">         <span class="comment">// 2. 终止条件</span></span><br><span class="line">         <span class="comment">// 3. 变量变化量（自增或自减）</span></span><br><span class="line">         <span class="keyword">let</span> i = <span class="number">1</span>       <span class="comment">//i 计数</span></span><br><span class="line">         <span class="keyword">while</span>(i &lt;= <span class="number">3</span>)&#123;</span><br><span class="line">             <span class="comment">// 循环3次</span></span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">             <span class="comment">// 重点别落下变量的变化量，否则是死循环</span></span><br><span class="line">             i++</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><h5 id="5-for-循环"><a href="#5-for-循环" class="headerlink" title="(5) for 循环"></a>(5) for 循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环基础语法</span></span><br><span class="line"><span class="keyword">for</span> (变量起始值; 循环条件; 变量变化) &#123;</span><br><span class="line">            循环体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; 数组名.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    数组名[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数基础语法</span></span><br><span class="line"><span class="comment">// 具名函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参列表) &#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">函数名(实参列表)</span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">let</span> 变量名 = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">变量名()</span><br></pre></td></tr></table></figure><h4 id="8-对象"><a href="#8-对象" class="headerlink" title="8. 对象"></a>8. 对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;</span><br><span class="line">    属性名：属性值</span><br><span class="line">    方法名：函数</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 属性访问两种方式</span></span><br><span class="line"><span class="comment">// 方式一(点语法)</span></span><br><span class="line">对象名.属性名</span><br><span class="line"><span class="comment">// 方式二(中括号语法)</span></span><br><span class="line">对象名[<span class="string">&#x27;属性名&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、web-API"><a href="#三、web-API" class="headerlink" title="三、web API"></a>三、web API</h3><h4 id="1-获取-DOM-对象"><a href="#1-获取-DOM-对象" class="headerlink" title="1. 获取 DOM 对象"></a>1. 获取 DOM 对象</h4><p>语法：</p><ul><li><p><code>document.querySelector(&#39;css选择器&#39;)</code> </p></li><li><p><code>document.querySelectorAll(&#39;css选择器&#39;)</code> </p></li></ul><p>通过 querySelectorAll 获取的 DOM 元素得到的是一个伪数组</p><h4 id="2-设置-修改-DOM-元素内容"><a href="#2-设置-修改-DOM-元素内容" class="headerlink" title="2. 设置/修改 DOM 元素内容"></a>2. 设置/修改 DOM 元素内容</h4><p>语法：</p><ul><li><code>元素.innerText</code> 不可以解析标签</li><li><code>元素.innerHTML</code> 可以解析标签</li></ul><h4 id="3-设置-修改-DOM-元素属性"><a href="#3-设置-修改-DOM-元素属性" class="headerlink" title="3. 设置/修改 DOM 元素属性"></a>3. 设置/修改 DOM 元素属性</h4><p>语法：</p><ul><li><code>元素.className = &#39;类名&#39;</code>  操作类名</li><li><code>元素.classList.add(&#39;类名&#39;)</code> 添加类名</li><li><code>元素.classList.remove(&#39;类名&#39;)</code> 移除类名</li><li><code>元素.classList.toggle(&#39;类名&#39;)</code> 切换类名</li></ul><p><em>classList 和 className 之间的区别</em>：className 有覆盖问题，而classList没有</p><ul><li><code>对象.style.样式属性 = &#39;值&#39;</code> 通过 style 属性操作样式</li></ul><h4 id="4-定时器-延时器"><a href="#4-定时器-延时器" class="headerlink" title="4. 定时器/延时器"></a>4. 定时器/延时器</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器基础语法</span></span><br><span class="line"><span class="keyword">let</span> timeId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    要执行代码</span><br><span class="line">&#125;, 间隔时间)</span><br><span class="line"><span class="comment">// 关闭定时器</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timerId)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时器基础语法</span></span><br><span class="line"><span class="keyword">let</span> timeId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    要执行代码</span><br><span class="line">&#125;, 间隔时间)</span><br><span class="line"><span class="comment">// 关闭定时器</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timerId)</span><br></pre></td></tr></table></figure><h4 id="5-事件监听"><a href="#5-事件监听" class="headerlink" title="5. 事件监听"></a>5. 事件监听</h4><p>语法：</p><ul><li><code>元素.addEventListener(&#39;事件&#39;, function() &#123;&#125;)</code></li><li><code>元素.on事件 = function() &#123;&#125;</code></li></ul><p><strong>事件类型</strong></p><ul><li><p>鼠标事件</p><ul><li>click 鼠标点击</li><li>mouseenter 鼠标经过</li><li>mouseleave 鼠标离开</li></ul></li><li><p>焦点事件</p><ul><li>focus 获得焦点</li><li>blur 失去焦点</li></ul></li><li><p>键盘事件</p><ul><li>keydown 键盘按下触发</li><li>keyup 键盘抬起触发</li></ul></li><li><p>文本事件</p><ul><li>input 用户输入事件</li></ul></li></ul><h4 id="6-回调函数"><a href="#6-回调函数" class="headerlink" title="6. 回调函数"></a>6. 回调函数</h4><p>把一个函数当成参数传递给另外一个函数，就说该函数是个回调函数</p><p>例如注册事件的函数</p><h4 id="7-节点操作"><a href="#7-节点操作" class="headerlink" title="7. 节点操作"></a>7. 节点操作</h4><h5 id="1-查找节点"><a href="#1-查找节点" class="headerlink" title="(1) 查找节点"></a>(1) 查找节点</h5><ul><li>父节点查找：<code>子元素.parentNode</code> </li><li><p>子节点查找：</p><ul><li><code>父元素.children</code> 查找所有的子元素</li><li><code>父元素.childNodes</code> 获得所有子节点，包括文本节点(空格、换行)、注释节点</li></ul></li><li><p>兄弟节点查找：</p><ul><li><code>元素.previousElementSibling</code> 查找上一个兄弟节点</li><li><code>元素.nextElementSibling</code> 查找下一个兄弟节点</li></ul></li></ul><h5 id="2-创建节点"><a href="#2-创建节点" class="headerlink" title="(2) 创建节点"></a>(2) 创建节点</h5><ul><li>创建元素节点：<code>document.createElement(&#39;标签名&#39;)</code></li><li><p>追加节点：</p><ul><li><code>父元素.appendChild(要插入的元素)</code> 插入到这个父元素的最后</li><li><code>父元素.insertBefore(要插入的元素, 在哪个元素前面)</code> 插入到父元素的某个子元素的前面</li></ul></li><li><p>克隆节点：<code>元素.cloneNode(布尔值)</code></p><ul><li>true  会克隆节点自身，后代节点会克隆的    常用</li><li>false 默认值 只会克隆节点自身，后代节点不会克隆的</li></ul></li></ul><h5 id="5-删除节点"><a href="#5-删除节点" class="headerlink" title="(5) 删除节点"></a>(5) 删除节点</h5><p><code>父元素.removeChild(要删除的元素)</code></p><h4 id="8-时间对象"><a href="#8-时间对象" class="headerlink" title="8. 时间对象"></a>8. 时间对象</h4><p><strong>项目中直接引入第三方包，例如 day.js 或 moment.js</strong></p><ul><li>获得当前时间 <code>let date = new Date()</code></li><li>获得指定时间 <code>let date = new Date(&#39;1949-10-01&#39;)</code></li></ul><h5 id="1-时间对象方法"><a href="#1-时间对象方法" class="headerlink" title="(1) 时间对象方法"></a>(1) 时间对象方法</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206164754883.png" alt="image-20221206164754883"></p><h5 id="2-时间戳"><a href="#2-时间戳" class="headerlink" title="(2) 时间戳"></a>(2) 时间戳</h5><p>指1970年01月01日00时00分00秒起至现在的毫秒数，它是一种特殊的计量时间的方式，值是独一无二的</p><p>获取时间戳的方式：<code>+new Date()</code> (常用)</p><h4 id="9-重绘和重排"><a href="#9-重绘和重排" class="headerlink" title="9. 重绘和重排"></a>9. 重绘和重排</h4><p><strong>回流(重排)</strong></p><p>当 Render Tree 中部分或者全部元素的尺寸、结构、布局等发生改变时，浏览器就会重新渲染部分或全部文档 的过程称为 回流。</p><p><strong>重绘</strong></p><p>由于节点(元素)的样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、 outline等), 称为重绘。</p><p><strong>重绘不一定引起回流，而回流一定会引起重绘。</strong></p><h4 id="10-事件对象"><a href="#10-事件对象" class="headerlink" title="10. 事件对象"></a>10. 事件对象</h4><p> 当事件触发的时候，产生的对象，该对象记录有事件相关的信息</p><p>如何获取：</p><ul><li>在事件绑定的回调函数的第一个参数就是事件对象</li><li>一般命名为event、ev、e</li></ul><p><strong>事件对象常用属性</strong></p><ul><li><p>pageX/pageY： 获取光标相对于页面左上角的位置</p></li><li><p>key： 用户按下的键盘键的值</p></li></ul><h4 id="11-事件流"><a href="#11-事件流" class="headerlink" title="11. 事件流"></a>11. 事件流</h4><h5 id="1-事件捕获和事件冒泡"><a href="#1-事件捕获和事件冒泡" class="headerlink" title="(1) 事件捕获和事件冒泡"></a>(1) 事件捕获和事件冒泡</h5><ul><li><p>事件冒泡：当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发。这一过程被称为事件冒泡。</p></li><li><p>事件捕获：从DOM的根元素开始去执行对应的事件 (从外到里)</p><p>addEventListener 第三个参数传入 true 代表是捕获阶段触发</p></li></ul><h5 id="2-阻止事件流动"><a href="#2-阻止事件流动" class="headerlink" title="(2) 阻止事件流动"></a>(2) 阻止事件流动</h5><p><code>e.stopPropagation()</code></p><h5 id="3-阻止事件默认行为"><a href="#3-阻止事件默认行为" class="headerlink" title="(3) 阻止事件默认行为"></a>(3) 阻止事件默认行为</h5><p><code>e.preventDefault()</code></p><h5 id="4-获取事件触发元素"><a href="#4-获取事件触发元素" class="headerlink" title="(4) 获取事件触发元素"></a>(4) 获取事件触发元素</h5><p><code>e.target.tagName</code></p><h4 id="12-滚动事件和加载事件"><a href="#12-滚动事件和加载事件" class="headerlink" title="12. 滚动事件和加载事件"></a>12. 滚动事件和加载事件</h4><ul><li>滚动事件：<code>window.addEventListener(&#39;scroll&#39;, function() &#123;&#125;)</code></li><li>加载事件：<ul><li><code>window.addEventListener(&#39;load&#39;, function() &#123;&#125;)</code></li><li><code>document.addEventListener(&#39;DOMContentLoaded&#39;, function() &#123;&#125;)</code></li></ul></li></ul><h4 id="13-元素大小和位置"><a href="#13-元素大小和位置" class="headerlink" title="13. 元素大小和位置"></a>13. 元素大小和位置</h4><h5 id="1-scroll-家族"><a href="#1-scroll-家族" class="headerlink" title="(1) scroll 家族"></a>(1) scroll 家族</h5><ul><li><p>获取宽高：</p><ul><li>scrollWidth 和 scrollHeight</li><li>获取元素的内容总宽高（不包含滚动条）返回值不带单位</li><li>只读属性，修改也是无效的</li></ul></li><li><p>获取位置：</p><ul><li>scrollLeft 和 scrollTop</li><li>获取元素内容往左、往上滚出去看不到的距离</li><li><strong>这两个属性是可以修改的</strong></li></ul></li><li><p>获取页面的滚动卷曲距离：<code>document.documentElement.scrollTop</code></p></li></ul><h5 id="2-offset-家族"><a href="#2-offset-家族" class="headerlink" title="(2) offset 家族"></a>(2) offset 家族</h5><ul><li><p>获取宽高：</p><ul><li>offsetWidth 和 offsetHeight</li><li>获取元素的真实宽高，包含元素自身设置的宽高，padding、border</li></ul></li><li><p>获取位置：</p><ul><li>offsetLeft 和 offsetTop</li><li>获取元素距离自己定位父级元素的左、上距离</li></ul></li></ul><p><strong>注意都是只读属性</strong></p><h5 id="3-client-家族"><a href="#3-client-家族" class="headerlink" title="(3) client 家族"></a>(3) client 家族</h5><ul><li><p>获取宽高：</p><ul><li>clientWidth 和 clientHeight</li><li>获取元素的可见部分宽高（不包含边框，滚动条等）</li></ul></li><li><p>获取位置：</p><ul><li>clientLeft 和 clientTop</li><li>获取左边框和上边框宽度</li></ul></li></ul><p><strong>注意都是只读属性</strong></p><p><strong>resize 事件：当浏览器大小发生改变的时候会触发该事件 ==&gt; 可以用于获取页面可视区大小</strong></p><h4 id="14-JS-执行机制-★★★"><a href="#14-JS-执行机制-★★★" class="headerlink" title="14. JS 执行机制(★★★)"></a>14. JS 执行机制(★★★)</h4><p><strong>JS是单线程</strong></p><p>​    JavaScript 是单线程编程语言，就是说，同一个时间只能做一件事</p><p><strong>单线程执行任务队列的问题：</strong></p><p>​    单线程就意味着，所有任务都需要排队挨个来执行，前一个任务结束，才能轮到后一个任务的执行，但如果前一个任务非常耗时，则后续的任务就不得不一直等待，从而导致程序假死的问题</p><p><strong>同步与异步任务</strong></p><p>​    为了解决单线程带来的问题，JS中将任务（需要执行的代码）分成两类：</p><p><strong>同步任务</strong></p><p>​    只有前一个任务执行完毕，才能执行后一个任务</p><p>​    程序的执行顺序与任务的书写顺序是一致的</p><p>​    同步任务会有阻塞</p><p><strong>异步任务</strong></p><p>​    异步任务由 JavaScript 委托给宿主环境（浏览器）进行执行</p><p>​    当异步任务执行完成后，会通知 JavaScript 主线程执行异步任务的回调函数</p><p>​    异步任务不会有阻塞</p><p><strong>常见异步任务</strong></p><ol><li>注册事件</li><li>setTimeout setInterval</li><li>Ajax</li></ol><p><strong>事件循环 EventLoop</strong></p><ol><li>同步任务由 JavaScript 主线程依次来执行</li><li>异步任务委托给宿主环境（浏览器）执行</li><li>已完成的异步任务对应的回调函数，会被加入到任务队列中等待执行</li><li>JavaScript 主线程的执行栈被清空后，会读取任务队列中的回调函数</li><li>次序执行 JavaScript 主线程不断重复上面的第4步</li></ol><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206174100482.png" alt="image-20221206174100482"></p><h4 id="15-本地存储"><a href="#15-本地存储" class="headerlink" title="15. 本地存储"></a>15. 本地存储</h4><p>localStorage / sessionStorage</p><ul><li>存储数据</li></ul><p>语法： <code>localStorage.setItem(&#39;键&#39;, &#39;值&#39;)</code></p><ul><li>获取数据</li></ul><p>语法： <code>localStorage.getItem(&#39;键&#39;)</code></p><ul><li>删除数据</li></ul><p>语法： <code>localStorage.removeItem(&#39;键&#39;)</code></p><p><strong>存储复杂数据类型存储</strong></p><p>​                    本地只能存储字符串，无法存储复杂数据类型</p><p>​                    需要将复杂数据类型转换成JSON字符串，再存储到本地</p><p><strong>JSON.stringify（复杂数据类型）</strong></p><p>​                    将复杂数据转换成JSON字符串            存储    本地存储中</p><p><strong>JSON.parse（JSON字符串）</strong></p><p>​                    将JSON字符串转换成对象                    取出    时候使用</p><h4 id="16-自定义属性"><a href="#16-自定义属性" class="headerlink" title="16. 自定义属性"></a>16. 自定义属性</h4><p><strong>固有属性：</strong>标签自带的属性 比如class id title等</p><p><strong>自定义属性：</strong>由程序员自己添加的属性</p><p>说明：自定义属性 需要使用专门的API来操作</p><ol><li>获取自定义属性：元素.getAttribute(‘属性名’)</li><li>设置自定义属性：元素.setAttribute(‘属性名’,’属性值’)</li><li>删除自定义属性：元素.removeAttribute(‘属性名’)</li></ol><p><strong>自定义属性规范做法：data-自定义属性</strong></p><p>规范的自定义属性做法：在标签上以data-开头</p><p>在DOM对象上以dataset对象方式操作</p><h4 id="17-正则表达式"><a href="#17-正则表达式" class="headerlink" title="17. 正则表达式"></a>17. 正则表达式</h4><p><strong>判断是否有符合规则的字符串：</strong></p><p>​            test(被检测的字符串)  方法   用来查看正则表达式与指定的字符串是否匹配(返回一个布尔值)</p><p><strong>检索（查找）符合规则的字符串：</strong></p><p>​            exec(被检测的字符串)  方法   在一个指定字符串中执行一个搜索匹配(返回一个数组)</p><h5 id="1-元字符-预定类"><a href="#1-元字符-预定类" class="headerlink" title="(1) 元字符-预定类"></a>(1) 元字符-预定类</h5><div class="table-container"><table><thead><tr><th style="text-align:center">预定类</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配 0-9的任意一个数字</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配非 0-9的数字</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配任意一个单词字符 a-z A-Z 0-9 下划线_</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任意非单词字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配不可见字符（空白）  空格  \n 换行  \t 制表符 tab</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配可见字符</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配除换行外的任意字符</td></tr></tbody></table></div><h5 id="2-字符类元字符"><a href="#2-字符类元字符" class="headerlink" title="(2) 字符类元字符"></a>(2) 字符类元字符</h5><p>[ ]     匹配字符集合</p><p>​        后面的字符串只要包含 abc 中任意一个字符，都返回 true</p><p>[ ]        里面加上 - 连字符</p><ul><li><p>使用连字符 - 表示一个范围</p></li><li><p>比如：</p><ul><li>[a-z]  表示 a到z 26个英文字母都可以</li><li>[a-zA-Z]  表示大小写都可以</li><li>[0-9]  表示 0~9 的数字都可以</li></ul></li></ul><p>[ ]        里面加上 ^ 取反符号</p><ul><li>比如：<ul><li><sup><a href="#fn_a-z" id="reffn_a-z">a-z</a></sup> 匹配除了小写字母以外的字符</li><li>注意要写到中括号里面</li></ul></li></ul><h5 id="3-边界符"><a href="#3-边界符" class="headerlink" title="(3) 边界符"></a>(3) 边界符</h5><div class="table-container"><table><thead><tr><th style="text-align:center">边界符</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">表示匹配行首的文本(以谁开始)</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">表示匹配行尾的文本(以谁结束)</td></tr></tbody></table></div><p>如果 ^ 和 $ 在一起，表示必须是精确匹配。</p><h5 id="4-量词"><a href="#4-量词" class="headerlink" title="(4) 量词"></a>(4) 量词</h5><div class="table-container"><table><thead><tr><th style="text-align:center">量词</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:center">重复零次或更多次</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">重复一次或更多次</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">重复零次或一更多次</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">重复 n 次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">重复 n 次或更多次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">重复 n 次到 m 次</td></tr></tbody></table></div><p><strong>注： 逗号左右两侧千万不要出现空格</strong></p><h5 id="5-字符替换和修饰符"><a href="#5-字符替换和修饰符" class="headerlink" title="(5) 字符替换和修饰符"></a>(5) 字符替换和修饰符</h5><h6 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h6><p>语法：<code>字符串.replace(/正则表达式/, &#39;替换的文本&#39;)</code></p><h6 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h6><p>语法：<code>/表达式/修饰符</code></p><ul><li>i是单词 ignore 的缩写，正则匹配时字母不区分大小写</li><li>g是单词 global 的缩写，匹配所有满足正则表达式的结果</li></ul><h3 id="四、JavaScript-进阶"><a href="#四、JavaScript-进阶" class="headerlink" title="四、JavaScript 进阶"></a>四、JavaScript 进阶</h3><h4 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1. 面向对象"></a>1. 面向对象</h4><p>面向对象编程，是一种编程开发思想。</p><p>面向对象是把事务分解成为一个个对象，然后由对象之间分工与合作, 来实现功能。</p><p>封装成类, 属性, 方法, 进行代码管理, 统一调度.</p><p>面向对象编程具有灵活、代码可复用、高度模块化等特点，容易维护和开发。适合多人合作的大型软件项目。</p><p><strong>面向对象编程的三大特性：</strong></p><ul><li><p>封装性</p></li><li><p>继承性</p></li><li><p>多态性</p></li></ul><h4 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2. 构造函数"></a>2. 构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// =============== 给创建的对象添加属性 ==============</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">      <span class="comment">// 通过this.属性名=属性值 来给创建的对象添加属性</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">      <span class="comment">// this.hobby = &#x27;学习&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// new不能落下，否则不能创建出对象</span></span><br><span class="line">    <span class="keyword">let</span> xm = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="number">20</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xm)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> xhei = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小黑&#x27;</span>,<span class="number">22</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhei)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// ============== new的四件事情 ===================</span></span><br><span class="line">    <span class="comment">// 1. 创建一个新对象</span></span><br><span class="line">    <span class="comment">// 2. 将this指向新创建的对象</span></span><br><span class="line">    <span class="comment">// 3. 执行构造函数内的代码（给this添加属性  方法）</span></span><br><span class="line">    <span class="comment">// 4. 返回新创建的对象</span></span><br></pre></td></tr></table></figure><h4 id="3-原型"><a href="#3-原型" class="headerlink" title="3. 原型"></a>3. 原型</h4><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206182348424.png" alt="image-20221206182348424"></p><h4 id="4-this-指向"><a href="#4-this-指向" class="headerlink" title="4. this 指向"></a>4. this 指向</h4><p>4种绑定规则</p><ul><li><p>默认绑定 this指向window</p></li><li><p>隐式绑定 谁调用，this指向谁</p></li><li><p>显式绑定（硬绑定）this的指向可以自己修改</p></li><li><p>new绑定 this指向新创建的实例对象</p></li></ul><h5 id="显式绑定"><a href="#显式绑定" class="headerlink" title="显式绑定"></a>显式绑定</h5><h6 id="call-方法"><a href="#call-方法" class="headerlink" title="call 方法"></a>call 方法</h6><p>语法：<code>函数.call(this指向，参数1，参数2，...)</code></p><p>call 的作用：</p><ul><li>可以调用函数</li><li>call 方法第一个参数可以来修改函数内的 this 指向</li><li>call 的其他参数（除了第一个）作为函数的实参</li></ul><h6 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply 方法"></a>apply 方法</h6><p>语法：<code>函数.apply(this指向, [参数1, 参数2, ...])</code></p><p>apply 的作用：</p><ul><li>可以调用函数</li><li>apply 方法第一个参数可以来修改函数内的 this 指向</li><li>apply 的参数需要以数组的形式传递给函数</li></ul><h6 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind 方法"></a>bind 方法</h6><p>语法：<code>let 新函数 = 函数.bind(thisArg)</code></p><p>bind 的作用：</p><ul><li><p>bind 不会去调用函数，而是创建并返回新函数，</p></li><li><p>新函数和原函数是一样的（副本）</p></li><li><p>新函数内的 this 指向绑定指向 bind 的 thisArg 参数</p></li></ul><blockquote><p>============================= 整理硬绑定: call apply  bind三个方法 =============================</p><p>相同点：</p><p>​      1. 都是函数来使用的方法</p><p>​      2. 修改函数内的this指向</p><p>call apply 一样: 都可以调用函数 + 第一个参数都是指定this指向，都可以给函数传递实参</p><p>​             作用一样，写法上不同</p><p>​             函数.call(this指向, 实参1, 实参2,实参3…)</p><p>​             函数.apply(this指向, [实参1, 实参2,实参3…])</p><p>bind 不会去调用函数, 返回新函数，以及新函数内的this绑定死了指向bind的this指向</p></blockquote><h4 id="5-继承"><a href="#5-继承" class="headerlink" title="5. 继承"></a>5. 继承</h4><h5 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="(1) 原型链继承"></a>(1) 原型链继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// ============= 原型链继承-继承方法 ================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无论学生, 还是工人, 都属于人类, 需要继承到Person类上的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 人类</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello ~ 早&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃 大口的吃&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 学生</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型链继承</span></span><br><span class="line">    <span class="comment">//  该如何去实现继承</span></span><br><span class="line">    <span class="comment">// Student.prototype    ==&gt; Student的原型对象</span></span><br><span class="line">    <span class="comment">// new Person()         ==&gt; Person的实例对象</span></span><br><span class="line">    <span class="comment">// 本质： 把Student的原型对象 赋值修改成了 Person的实例对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这行代码位置有讲究：不能写到创建实例对象之后</span></span><br><span class="line">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 学生的实例对象</span></span><br><span class="line">    <span class="comment">// 当实例对象在创建的那一刻起，它的原型链就已经定下来了，之后再原型修改是不会影响到这个实例对象的原型链</span></span><br><span class="line">    <span class="keyword">let</span> xhei = <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhei)</span><br><span class="line">    xhei.<span class="title function_">sayHi</span>()</span><br><span class="line">    xhei.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xhei实例对象的原型链（修改之前的）</span></span><br><span class="line">    <span class="comment">//  因为sayHi eat 方法属于 Person.prototype 原型对象上的方法</span></span><br><span class="line">    <span class="comment">//  xhei沿着原型链是无法查找到2个方法的</span></span><br><span class="line">    <span class="comment">//  xhei ==&gt; Student.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改代码思路：</span></span><br><span class="line">    <span class="comment">//    修改xhei的原型链，让 Person.prototype 出现在xhei的原型链</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// xhei实例对象的原型链（修改之后的）</span></span><br><span class="line">    <span class="comment">//  xhei ==&gt; Student.prototype(本质上Person的实例对象) ==&gt; Person.prototype ==&gt; Object.prototype ==&gt; null</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-组合继承"><a href="#2-组合继承" class="headerlink" title="(2) 组合继承"></a>(2) 组合继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// ============== 组合继承 =============</span></span><br><span class="line">    <span class="comment">// 指的是将原型链 和 借用构造函数 call 技术组合到一块，</span></span><br><span class="line">    <span class="comment">// 从而发挥二者之长的一种继承模式，其背后的思路: 是使用原型链实现对原型属性和方法的继承(主要是方法)</span></span><br><span class="line">    <span class="comment">// 通过借用构造函数来实现对实例属性的继承</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人类会说话&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃 大口的吃&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, className</span>) &#123;</span><br><span class="line">      <span class="comment">// this.name = name</span></span><br><span class="line">      <span class="comment">// this.age = age</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 需要优化以上2行代码 ==&gt; 借用构造函数 call 技术</span></span><br><span class="line">      <span class="comment">// 朝着该方向去思考 去优化代码 ==&gt; Person.call(obj,&#x27;小明&#x27;,20)</span></span><br><span class="line">      <span class="comment">// 希望 Person 函数内的this指向Student的实例对象stu</span></span><br><span class="line">      <span class="comment">// Person.call(Student的实例对象stu,&#x27;小明&#x27;,20)</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 作用：借用构造函数Person来给Student实例对象继承了name age属性</span></span><br><span class="line">      <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name,age)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">className</span> = className</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型链继承：可以继承到原型对象上的方法</span></span><br><span class="line">    <span class="comment">// 在创建实例对象stu之前，修改Student的prototype原型对象</span></span><br><span class="line">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;118期&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu)</span><br><span class="line"></span><br><span class="line">    stu.<span class="title function_">say</span>()</span><br><span class="line">    stu.<span class="title function_">eat</span>()</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="3-寄生组合继承"><a href="#3-寄生组合继承" class="headerlink" title="(3) 寄生组合继承"></a>(3) 寄生组合继承</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 寄生组合式继承</span></span><br><span class="line">    <span class="comment">// ============================= 目前组合继承代码存在的缺陷 =============================</span></span><br><span class="line">    <span class="comment">// student实例上有 name age, 而原型`__proto__`上不需要再有这些属性, 所以利用 Object.create 改装下</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================= Object.create(参数对象) =============================</span></span><br><span class="line">    <span class="comment">// 作用：</span></span><br><span class="line">    <span class="comment">//  1. 创建新对象</span></span><br><span class="line">    <span class="comment">//  2. 指定对象的原型对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let lw = &#123;</span></span><br><span class="line">    <span class="comment">//   name: &#x27;老王&#x27;,</span></span><br><span class="line">    <span class="comment">//   skill: &#x27;翻墙&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let newObj = Object.create(lw)</span></span><br><span class="line">    <span class="comment">// // 1. 创建了新对象 &#123;&#125;</span></span><br><span class="line">    <span class="comment">// // 2. 并指定了该对象&#123;&#125; 他的原型对象是lw</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(newObj)</span></span><br><span class="line">    <span class="comment">// console.log(newObj.__proto__) // 它的原型对象</span></span><br><span class="line">    <span class="comment">// console.log(newObj.__proto__ === lw) // true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(newObj.skill) // 翻墙</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ============================= 寄生组合式继承 =============================</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;人类会说话&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃 大口的吃&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name, age, className</span>) &#123;</span><br><span class="line">      <span class="comment">// 借用构造函数call技术</span></span><br><span class="line">      <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">className</span> = className</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型链继承（有缺点）</span></span><br><span class="line">    <span class="comment">// Student.prototype = new Person()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寄生组合式继承</span></span><br><span class="line">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">// &#123;&#125;，并且指定该新对象的原型对象是Person.prototype</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;80期&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stu)</span><br><span class="line">    stu.<span class="title function_">say</span>()</span><br><span class="line">    stu.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组合继承，stu的原型链</span></span><br><span class="line">    <span class="comment">//  stu ==&gt; Student.prototype（本质是 Person的实例对象，有多余的name age属性） ==&gt; Person.prototype ==&gt; Object.protype ==&gt; null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 寄生组合式继承，stu的原型链</span></span><br><span class="line">    <span class="comment">//  stu ==&gt; Student.prototype (本质是 &#123;&#125;,没有多余的name age属性) ==&gt; Person.prototype ==&gt; Object.protype ==&gt; null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 小结：</span></span><br><span class="line">    <span class="comment">// 继承的方式</span></span><br><span class="line">    <span class="comment">//  1. 原型链继承 继承到原型上的方法</span></span><br><span class="line">    <span class="comment">//  2. 组合继承   （原型链 + 借用构造函数call技术）</span></span><br><span class="line">    <span class="comment">//  3. 寄生组合继承（Object.create()）</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="6-递归函数"><a href="#6-递归函数" class="headerlink" title="6. 递归函数"></a>6. 递归函数</h4><blockquote><p>递归函数：函数内部, 自己调用自己, 就是递归</p></blockquote><h4 id="7-浅拷贝和深拷贝"><a href="#7-浅拷贝和深拷贝" class="headerlink" title="7. 浅拷贝和深拷贝"></a>7. 浅拷贝和深拷贝</h4><ul><li>浅拷贝：拷贝的是对象的一层属性，如果对象里面还有对象，拷贝的就是地址，两者之间修改会有影响，适用于对象里面属性的值是简单数据类型</li><li>深拷贝：拷贝对象的多层属性，如果对象里面还有对象，会继续拷贝，使用递归来实现</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="comment">// 第一种方式：纯代码方式</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;很帅&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">        obj2[k] = obj1[k]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br><span class="line"><span class="comment">// 第二种方式：扩展运算符(扩展运算符其实只能拷贝一层，所以并不算是真正的浅拷贝)</span></span><br><span class="line"><span class="keyword">let</span> res = &#123;...obj1&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式：Object.assign(参数1, 参数2)</span></span><br><span class="line"><span class="comment">// Object.assign(参数1, 参数2)</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj)</span><br><span class="line">    obj2.<span class="property">a</span> = <span class="number">888</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, obj2)  <span class="comment">// &#123;a: 100, b: 200&#125; &#123;a: 888, b: 200&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;很黑&#x27;</span>,</span><br><span class="line">      <span class="attr">car</span>: &#123;</span><br><span class="line">        <span class="attr">brand</span>: <span class="string">&#x27;加长林肯&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="string">&#x27;100万&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一种方式：递归函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">copyObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        newObj[k] = <span class="keyword">typeof</span> obj[k] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">copyObj</span>(obj[k]) : obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> newObj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title function_">copyObj</span>(obj1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 第二种方式：利用字符串的方法</span></span><br><span class="line"><span class="comment">// 1. 先使用JSON.stringify() 转成字符串</span></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(obj1)) // 字符串</span></span><br><span class="line"><span class="comment">// 2. 再使用JSON.parse() 转成 js 对象</span></span><br><span class="line"><span class="comment">// console.log(JSON.parse(JSON.stringify(obj1))) // 字符串==&gt; js对象</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// JSON方法的缺陷</span></span><br><span class="line"><span class="comment">// 如果对象中有undefined或者函数，这个方法就无法拷贝undefined和函数</span></span><br></pre></td></tr></table></figure><h4 id="8-闭包"><a href="#8-闭包" class="headerlink" title="8. 闭包"></a>8. 闭包</h4><p>​    在 ES6 之前，申明变量只有 var ，因此，早期 js 只有两种作用域，分别是全局作用域和局部作用域(函数作用域)</p><ul><li>全局变量：声明在全局，全范围都能访问到。因此，开发时，尽量避免使用全局变量，会被别人修改。</li><li>局部变量：函数内声明的，只有函数内能访问到。当函数内部执行完毕，默认会销毁函数内所声明的局部变量。</li></ul><p>​    简单来说，当一个外层函数包裹内层函数，内层函数访问了外层函数的变量，就称之为闭包。</p><p>闭包的优点：</p><ol><li>形成私有空间，避免全局变量的污染；</li><li>持久化内存，保存数据。</li></ol><p>闭包的缺点：持久化内存，导致内存泄露</p><p>解决：</p><ol><li>尽量避免函数的嵌套，以及变量的引用</li><li>执行完的变量，可以赋值 null ，让垃圾回收机制，进行回收释放内存。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式：局部作用域</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> money = <span class="number">10000</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">addMoney</span>(<span class="params"></span>) &#123;</span><br><span class="line">               money += <span class="number">100</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的金钱&#x27;</span>,money)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> addMoney = <span class="title function_">outer</span>()</span><br><span class="line">       <span class="title function_">addMoney</span>()</span><br><span class="line"><span class="comment">// 花括号包裹 let 声明的变量，即形成块级作用域，就可以防止全局污染</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">let</span> money = <span class="number">10000</span></span><br><span class="line">           <span class="keyword">function</span> <span class="title function_">addMoney</span>(<span class="params"></span>) &#123;</span><br><span class="line">               money += <span class="number">100</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的金钱&#x27;</span>,money)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">addMoney</span>()</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(money)</span><br><span class="line"></span><br><span class="line">       (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写代码&#x27;</span>)</span><br><span class="line">       &#125;) ()</span><br></pre></td></tr></table></figure><h4 id="9-解构赋值"><a href="#9-解构赋值" class="headerlink" title="9. 解构赋值"></a>9. 解构赋值</h4><h5 id="1-数组解构"><a href="#1-数组解构" class="headerlink" title="(1) 数组解构"></a>(1) 数组解构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 解构赋值: 按照一种模式, 从目标结构(对象/数组)中提取值, 赋值给变量</span></span><br><span class="line">    <span class="comment">// 目的: 简化了声明变量, 从对象或者数组中获取值的步骤</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 常规写法：通过下标来获取 ==================== </span></span><br><span class="line">    <span class="comment">// let x = arr[0]</span></span><br><span class="line">    <span class="comment">// let y = arr[2]</span></span><br><span class="line">    <span class="comment">// let z = arr[3]</span></span><br><span class="line">    <span class="comment">// console.log(x, y, z)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 演示数组的解构 ====================</span></span><br><span class="line">    <span class="comment">// 语法 let [变量名1, 变量名2] = 数组</span></span><br><span class="line">    <span class="comment">// 说明：数组的解构是按照 下标（顺序） 来一一对应的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;从数组中提取出来，分别赋值给变量a b c</span></span><br><span class="line">    <span class="comment">// let [a,b,c] = [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;pink&#x27;]</span></span><br><span class="line">    <span class="comment">// console.log(a,b,c)  // yellow green blue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 按需取值 ====================</span></span><br><span class="line">    <span class="comment">// 需求：只需要取出 yellow  blue结果</span></span><br><span class="line">    <span class="comment">// 方案：不需要的值, 可以通过逗号, 来进行跳过</span></span><br><span class="line">    <span class="comment">// let [x, , , z] = arr</span></span><br><span class="line">    <span class="comment">// console.log(x,z)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ====================  如果没有取到值，变量的结果是undefined ====================</span></span><br><span class="line">    <span class="comment">// let [a, b, c] = [10, 20]</span></span><br><span class="line">    <span class="comment">// console.log(c) // undefined （声明了变量c，但是没有给值）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 设置默认值 ====================</span></span><br><span class="line">    <span class="comment">// 通过 = 来设置默认值（当c取不到值的时候，默认值起效果）</span></span><br><span class="line">    <span class="keyword">let</span> [a, b, c = <span class="number">1</span>] = [<span class="number">10</span>, <span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="2-对象解构"><a href="#2-对象解构" class="headerlink" title="(2) 对象解构"></a>(2) 对象解构</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 解构赋值: 按照一种模式, 从目标结构(对象/数组)中提取值, 赋值给变量</span></span><br><span class="line">    <span class="comment">// 目的: 简化了声明变量, 从对象或者数组中获取值的步骤</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象的解构</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">      <span class="attr">uname</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;帅气小伙&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 常规写法 ==================== </span></span><br><span class="line">    <span class="comment">// let uname = obj.uname</span></span><br><span class="line">    <span class="comment">// let age = obj.age</span></span><br><span class="line">    <span class="comment">// let desc = obj.desc</span></span><br><span class="line">    <span class="comment">// console.log(uname, age, desc)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 演示对象的解构 ====================</span></span><br><span class="line">    <span class="comment">// 语法 let &#123;变量名1,变量名2, ...&#125; = 对象</span></span><br><span class="line">    <span class="comment">//  数组的解构赋值  let [变量名] = 数组</span></span><br><span class="line">    <span class="comment">// 说明：对象的解构是按照 属性名 来一一对应的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把obj的uname属性值提取出来，赋值给了变量 uname</span></span><br><span class="line">    <span class="comment">// let &#123; age, uname &#125; = obj</span></span><br><span class="line">    <span class="comment">// console.log(uname, age)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 取不到的值，变量的结果是undefined ====================</span></span><br><span class="line">    <span class="comment">// 把obj对象的desc属性值提取出来，赋值给变量desc</span></span><br><span class="line">    <span class="comment">// 把obj对象的nianji属性值提取出来，赋值给变量nianji （obj对象没有nianji属性，结果是undefined）</span></span><br><span class="line">    <span class="keyword">let</span> &#123; nianji, desc, age &#125; = obj</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(nianji, desc, age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 解构赋值的时候可以进行重命名 ====================</span></span><br><span class="line">    <span class="comment">// 语法 let &#123;变量名 : 新的变量名&#125; = 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> info = &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">z</span>: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  需求：取出info对象的x y z的属性值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  把x变量重命名为x2，之后使用的时候，使用的是x2这个新的变量名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">x</span>: x2, y, z&#125; = info</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z, x2)  <span class="comment">// 1 20 30 10</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="10-箭头函数"><a href="#10-箭头函数" class="headerlink" title="10. 箭头函数"></a>10. 箭头函数</h4><p>基础语法：</p><ul><li><p>无参数：<code>() =&gt; &#123;&#125;</code></p></li><li><p>一个参数：<code>参数 =&gt; &#123;&#125;</code></p></li><li><p>多个参数：<code>(参数1, 参数2) =&gt; &#123;&#125;</code></p></li></ul><p>注：</p><ul><li>箭头函数没有 arguments(实参列表)</li><li>箭头函数没有 this, 会去外层作用域中查找</li><li>箭头函数不能用作构造函数, 不能和new配合使用</li></ul><h4 id="11-展开运算符"><a href="#11-展开运算符" class="headerlink" title="11. 展开运算符"></a>11. 展开运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展开运算符 ...</span></span><br><span class="line"><span class="comment">// 1. 展开数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...arr) <span class="comment">// 打印数组的每一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>], arr[<span class="number">3</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用: </span></span><br><span class="line"><span class="comment">// (1) 拼接两个数组</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = [...arr1, ...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (2) 求数组最大值</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">3</span>, <span class="number">100</span>, <span class="number">20</span>]</span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 展开对象</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">house</span>: <span class="string">&#x27;独栋大别墅&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">money</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">car</span>: <span class="string">&#x27;劳斯莱斯&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 相当于快速浅拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">  ...obj1,</span><br><span class="line">  ...obj2,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-ES6-类"><a href="#12-ES6-类" class="headerlink" title="12. ES6 类"></a>12. ES6 类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// ES6类-添加属性和方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 实例属性, 定义在constructor中 ====================</span></span><br><span class="line">    <span class="comment">// class Person &#123;</span></span><br><span class="line">    <span class="comment">//   constructor(name,age) &#123;</span></span><br><span class="line">    <span class="comment">//     // 在类的constructor方法中添加属性，在new 类的时候，会自动来执行constructor方法</span></span><br><span class="line">    <span class="comment">//     // this 指向实例对象</span></span><br><span class="line">    <span class="comment">//     this.name = name</span></span><br><span class="line">    <span class="comment">//     this.age = age</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// let p1 = new Person(&#x27;lw&#x27;,29)</span></span><br><span class="line">    <span class="comment">// console.log(p1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==================== 实例方法, 直接写在类里面 ====================</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name,age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 类的方法：方法名()&#123;函数体&#125;</span></span><br><span class="line">      <span class="comment">// 添加的方法其实本质是添加到了原型对象上</span></span><br><span class="line">      <span class="title function_">learn</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;good good study,day day up!!!&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 方法与方法之间，不要加逗号，否则语法错误</span></span><br><span class="line">      <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈，吃的开心&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> xhei = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小黑&#x27;</span>,<span class="number">19</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhei)</span><br><span class="line">    xhei.<span class="title function_">learn</span>()</span><br><span class="line">    xhei.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示 类的本质  构造函数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Student</span>)  <span class="comment">// function</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">// 原型对象</span></span><br><span class="line">    </span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="13-ES6-类-继承"><a href="#13-ES6-类-继承" class="headerlink" title="13. ES6 类-继承"></a>13. ES6 类-继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// ES6类中extends的基本语法</span></span><br><span class="line">    <span class="comment">// 子类可以通过 extends 继承父类, 把属性和方法, 添加到子类的对象上</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 人这一类 （父类）</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="comment">// 在类的 constructor 方法中来添加属性， 在 new 类的时候，会自动来执行constructor 方法</span></span><br><span class="line">        <span class="comment">// this 指向实例对象</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;is me&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eat&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 学生 这一类是 子类</span></span><br><span class="line">    <span class="comment">//  语法   class 子类 extends 父类&#123;&#125;</span></span><br><span class="line">    <span class="comment">//  可以继承到父类的属性 + 方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> xhei = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;小黑&#x27;</span>,<span class="number">29</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhei)</span><br><span class="line"></span><br><span class="line">    xhei.<span class="title function_">sayHi</span>()</span><br><span class="line">    xhei.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> tt = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;wuli taotao&#x27;</span>,<span class="number">19</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tt)</span><br><span class="line"></span><br><span class="line">    tt.<span class="title function_">sayHi</span>()</span><br><span class="line">    tt.<span class="title function_">eat</span>()</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="四、Ajax"><a href="#四、Ajax" class="headerlink" title="四、Ajax"></a>四、Ajax</h3><h4 id="1-URL-地址"><a href="#1-URL-地址" class="headerlink" title="1. URL 地址"></a>1. URL 地址</h4><p>URL地址用来表示服务器上每个资源的确切访问路径</p><p>一个标准的 URL 地址主要由以下 4 个部分构成：</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206210029326.png" alt="image-20221206210029326"></p><h4 id="2-使用-Ajax-请求数据的5种方式"><a href="#2-使用-Ajax-请求数据的5种方式" class="headerlink" title="2. 使用 Ajax 请求数据的5种方式"></a>2. 使用 Ajax 请求数据的5种方式</h4><h5 id="1-POST-请求"><a href="#1-POST-请求" class="headerlink" title="(1) POST 请求"></a>(1) POST 请求</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206210302964.png" alt="image-20221206210302964"></p><h5 id="2-GET-请求"><a href="#2-GET-请求" class="headerlink" title="(2) GET 请求"></a>(2) GET 请求</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206210351422.png" alt="image-20221206210351422"></p><h5 id="3-DELETE-请求"><a href="#3-DELETE-请求" class="headerlink" title="(3) DELETE 请求"></a>(3) DELETE 请求</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206210450647.png" alt="image-20221206210450647"></p><h5 id="4-PUT-请求"><a href="#4-PUT-请求" class="headerlink" title="(4) PUT 请求"></a>(4) PUT 请求</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206210521319.png" alt="image-20221206210521319"></p><h5 id="5-PATCH-请求"><a href="#5-PATCH-请求" class="headerlink" title="(5) PATCH 请求"></a>(5) PATCH 请求</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206210606556.png" alt="image-20221206210606556"></p><h4 id="3-axios"><a href="#3-axios" class="headerlink" title="3. axios"></a>3. axios</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 基础语法</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;请求方式&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求方式为get，需要指定查询参数</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">// 查询参数</span></span><br><span class="line">      <span class="attr">id</span>: ...,</span><br><span class="line">      <span class="attr">name</span>: ...,</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求方式为post，需要提交数据</span></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;请求地址&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="comment">// 携带数据</span></span><br><span class="line">      username</span><br><span class="line">      password</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>((&#123; <span class="attr">data</span>: res &#125;) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="comment">// axios简化用法</span></span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&#x27;url地址&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">// 查询参数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data: res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)  </span><br><span class="line"></span><br><span class="line">  axios.<span class="title function_">post</span>(<span class="string">&#x27;url地址&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// data 请求体的数据</span></span><br><span class="line">    <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">4</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="comment">// 查询参数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data: res &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-请求报文-amp-响应报文"><a href="#4-请求报文-amp-响应报文" class="headerlink" title="4. 请求报文 &amp; 响应报文"></a>4. 请求报文 &amp; 响应报文</h4><p>客户端与服务器通信的过程是基于请求与响应的。其中：</p><ul><li>请求报文规定了客户端以什么格式把数据发送给服务器</li><li>响应报文规定了服务器以什么格式把数据响应给客户端</li></ul><h5 id="1-请求报文-格式"><a href="#1-请求报文-格式" class="headerlink" title="(1) 请求报文 - 格式"></a>(1) 请求报文 - 格式</h5><p>请求报文由请求行（request line）、请求头部（header）、空行和请求体4个部分组成。图示如下：</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206211338539.png" alt="image-20221206211338539"></p><p>注意：</p><ul><li>在浏览器中，GET 请求比较特殊，它只有请求头，没有请求体</li><li>在浏览器中，POST、PUT、PATCH、DELETE 请求既有请求头，又有请求体</li></ul><h5 id="2-响应报文-格式"><a href="#2-响应报文-格式" class="headerlink" title="(2) 响应报文 - 格式"></a>(2) 响应报文 - 格式</h5><p>响应报文由状态行、响应头部、空行和响应体4个部分组成。图示：</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206211424767.png" alt="image-20221206211424767"></p><h5 id="3-http-响应状态码"><a href="#3-http-响应状态码" class="headerlink" title="(3) http 响应状态码"></a>(3) http 响应状态码</h5><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221206211529022.png" alt="image-20221206211529022"></p><h4 id="5-JSON数据"><a href="#5-JSON数据" class="headerlink" title="5. JSON数据"></a>5. JSON数据</h4><p>① 属性名必须使用双引号包裹</p><p>② 字符串类型的值必须使用双引号包裹</p><p><strong>JS对象或数组转json字符串：</strong></p><p>js对象：<code>let obj = &#123;name:&#39;zs&#39;, age:19&#125;</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)<span class="string">`  ==&gt;  json字符串：`</span>&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zs&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>json字符串转JS对象或数组：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr1 = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;zs&quot;,&quot;age&quot;:19&#125;&#x27;</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr1)<span class="string">`  ==&gt;  js对象：`</span>&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>:<span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-同源策略-amp-跨域"><a href="#6-同源策略-amp-跨域" class="headerlink" title="6. 同源策略 &amp; 跨域"></a>6. 同源策略 &amp; 跨域</h4><ul><li><p>同源指的是两个 URL 地址具有相同的协议、主机名、端口号</p></li><li><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能</p></li><li>浏览器的同源策略规定：不允许非同源的 URL 之间进行资源的交互</li></ul><p><strong>解决跨域的两种方式</strong></p><ul><li>CORS</li><li>JSONP</li></ul><h4 id="7-防抖和节流"><a href="#7-防抖和节流" class="headerlink" title="7. 防抖和节流"></a>7. 防抖和节流</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ul><li>防抖：频繁触发某一操作，只执行最后一次。</li><li>节流：单位时间内，频繁触发同一操作，只执行一次</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul><li><p>防抖：输入框输入 ==&gt; 给搜索提示</p><p>不需要每输入一个字就发请求获取提示，可以给其设置一个延时器，过个一秒或者几秒再发请求获取数据，避免资源浪费，提高性能</p></li><li><p>节流：登录注册时，如果接口响应比较慢，那么用户可能一次性向服务器发送多个请求，这种操作对服务器压力很大；</p><p>这时，我们就可以控制当前接口请求完成时，再发送下一个请求</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> timerId = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt&#x27;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 防抖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (timerId !== <span class="literal">false</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="built_in">clearTimeout</span>(timerId)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是防抖&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt&#x27;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 节流</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (timerId !== <span class="literal">false</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是节流&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          timerId = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="五、git"><a href="#五、git" class="headerlink" title="五、git"></a>五、git</h3><h4 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a>git 基本命令</h4><p>第一次提交，需要配置提交者信息</p><ul><li>git config —global  user.name 你的目标用户名</li><li>git config —global  user.email 你的目标邮箱名</li><li>git config —global —list  <em>查看配置</em></li></ul><p>常用命令</p><ul><li>git init  <em>初始化仓库</em></li><li>git add .  <em>将文件由工作区添加到暂存区</em></li><li>git commit -m ‘提交说明’  <em>将文件由暂存区添加到仓库区</em></li><li>git status  <em>查看文件的状态，红色表示工作区中的文件需要提交暂存区，绿色表示暂存区中的文件需要提交仓库区</em></li><li>git log  <em>查看提交日志</em></li><li>git reflog  <em>查看所有版本信息</em></li><li>git reset —hard 版本号  <em>将代码回退到某个指定的版本(版本号只要有前几位即可)</em></li><li>git branch 分支名 <em>创建分支</em></li><li>git branch  <em>查看所有分支</em></li><li>git checkout 分支名  <em>切换分支</em></li><li>git checkout -b 分支名  <em>创建并切换分支</em></li><li>git branch -d 分支名  <em>删除分支</em></li><li>git merge 分支名  <em>合并分支</em></li><li>git clone 远程仓库地址  <em>克隆远程仓库代码</em></li><li>git push 仓库地址 master  <em>将本地仓库中代码提交到远程仓库</em></li><li>git pull  <em>将远程的代码下载到本地</em></li></ul><h3 id="六、Node-基础"><a href="#六、Node-基础" class="headerlink" title="六、Node 基础"></a>六、Node 基础</h3><h4 id="1-fs-模块"><a href="#1-fs-模块" class="headerlink" title="1. fs 模块"></a>1. fs 模块</h4><p>使用fs模块的前提是导入fs模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs模块是用于操作文件     readFile    writeFile</span></span><br><span class="line"><span class="comment">// fs模块必须导入了才能使用</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数1：文件路径</span></span><br><span class="line"><span class="comment">// 参数2：文件编码（可选）</span></span><br><span class="line"><span class="comment">// 参数3：回调函数      err：错误   data：如果传了编码，data直接就是字符串</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./01-hello.js&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>,<span class="function">(<span class="params">err,data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>,err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2-http-模块"><a href="#2-http-模块" class="headerlink" title="2. http 模块"></a>2. http 模块</h4><p>创建一个简易服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入http模块  fs path</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. http.createServe()  创建服务器</span></span><br><span class="line"><span class="keyword">const</span> serve = http.<span class="title function_">createServer</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 处理用户请求（待会详细讲）</span></span><br><span class="line"><span class="comment">// request事件：用户请求事件，只要有用户访问这个服务器，事件就会触发</span></span><br><span class="line">serve.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户访问了服务器&#x27;</span>, req.<span class="property">ip</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello,world&#x27;</span> + req.<span class="property">ip</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 启动服务器  localhost: 访问本地的地址</span></span><br><span class="line">serve.<span class="title function_">listen</span>(<span class="number">8888</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器启动成功了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-npm"><a href="#3-npm" class="headerlink" title="3. npm"></a>3. npm</h4><p>npm（node  package  manager）node包管理器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装模块：npm i 模块名</span><br><span class="line">卸载模块：npm un 模块名</span><br><span class="line">全局安装：npm i 模块名 -g`  或  `npm i -g 模块名</span><br><span class="line">查看全局安装的模块：npm list -g --depth 0</span><br><span class="line">查看全局安装路径：npm root -g</span><br></pre></td></tr></table></figure><p>全局安装 nodemon 模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i nodemon -g</span><br></pre></td></tr></table></figure><p>nodemon 的作用：代替node命令，启动服务的，当更改代码之后，nodemon 会自动帮我们重启服务。</p><p>运行nodemon，如果报错如下：</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/1585472428055.png" alt="1585472428055"></p><p>解决办法是：</p><ul><li><code>管理员</code>方式，打开命令行窗口</li><li>执行 <code>set-ExecutionPolicy RemoteSigned;</code> </li><li>在出现的选项中，输入 <code>A</code>，回车。即可</li></ul><h5 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h5><p>快速、可靠、安全的依赖管理工具。和 npm 类似, 都是包管理工具, 可以用于下载包 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br></pre></td></tr></table></figure><p>下载地址: <a href="https://yarn.bootcss.com/docs/install/#windows-stable">https://yarn.bootcss.com/docs/install/#windows-stable</a> </p><p>windows本  <strong>推荐通过软件包</strong>  安装 (教学资料中)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i yarn -g</span><br></pre></td></tr></table></figure><p>mac本通过命令全局安装</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm i yarn -g</span><br></pre></td></tr></table></figure><p>基本命令:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1. 初始化</span><br><span class="line">yarn init  /  yarn init -y</span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line">2. 添加依赖</span><br><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line"></span><br><span class="line">npm i 包</span><br><span class="line"></span><br><span class="line">3. 移除包</span><br><span class="line">yarn remove [package]</span><br><span class="line"></span><br><span class="line">npm un 包</span><br><span class="line">             </span><br><span class="line">4. 安装项目全部依赖            </span><br><span class="line">yarn 或者 yarn install</span><br><span class="line"></span><br><span class="line">npm i</span><br><span class="line"></span><br><span class="line">5. 全局</span><br><span class="line">安装: yarn global add [package]</span><br><span class="line"></span><br><span class="line">npm i -g 包名</span><br><span class="line"></span><br><span class="line">卸载: yarn global remove [package]</span><br></pre></td></tr></table></figure><h5 id="pnpm的使用"><a href="#pnpm的使用" class="headerlink" title="pnpm的使用"></a>pnpm的使用</h5><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g pnpm </span><br></pre></td></tr></table></figure><ol><li>使用pnpm命令npm命令一模一样</li></ol><h4 id="4-node-js-模块化"><a href="#4-node-js-模块化" class="headerlink" title="4. node.js 模块化"></a>4. node.js 模块化</h4><h5 id="1-加载模块"><a href="#1-加载模块" class="headerlink" title="(1) 加载模块"></a>(1) 加载模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载核心模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载第三方模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载自定义模块</span></span><br><span class="line"><span class="keyword">const</span> custom = <span class="built_in">require</span>(<span class="string">&#x27;./custom&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong>：</p><ul><li>无论是什么模块，我们都要使用 <code>require()</code> 去加载，然后才能使用。</li><li>加载自定义的模块，需要加 <code>./</code> ，而且可以省略后缀 <code>.js</code></li></ul><h5 id="2-导出模块"><a href="#2-导出模块" class="headerlink" title="(2) 导出模块"></a>(2) 导出模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工具模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> money = <span class="number">100</span></span><br><span class="line"><span class="keyword">const</span> userName = <span class="string">&#x27;zs&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span> + userName)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;吃饭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    say,</span><br><span class="line">    money</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-ES6-模块化"><a href="#5-ES6-模块化" class="headerlink" title="5. ES6 模块化"></a>5. ES6 模块化</h4><h5 id="1-默认导出和默认导入"><a href="#1-默认导出和默认导入" class="headerlink" title="(1) 默认导出和默认导入"></a>(1) 默认导出和默认导入</h5><p>默认导出的语法： <code>export default 默认导出的成员</code></p><p>默认导入的语法： <code>import 接收名称 from &#39;模块标识符&#39;</code></p><p>默认导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span>  = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个函数&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="comment">// export default a  // 导出一个值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  a,</span><br><span class="line">  b,</span><br><span class="line">  fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认导入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> result <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><p><strong>注意点:</strong> </p><ul><li>每个模块中，只允许使用唯一的一次 export default !</li><li>默认导入时的接收名称可以任意名称，只要是合法的成员名称即可</li></ul><h5 id="2-按需导出和按需导入"><a href="#2-按需导出和按需导入" class="headerlink" title="(2) 按需导出和按需导入"></a>(2) 按需导出和按需导入</h5><p>按需导出的语法： <code>export const a = 10</code></p><p>按需导入的语法： <code>import &#123; a &#125; from &#39;模块标识符&#39;</code></p><p>按需导出</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">20</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按需导入</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a, b <span class="keyword">as</span> c, fn &#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意点:</strong></p><ul><li>每个模块中可以使用多次按需导出</li><li>按需导入的成员名称必须和按需导出的名称保持一致</li><li>按需导入时，可以使用as 关键字进行重命名</li><li>按需导入可以和默认导入一起使用</li></ul><h5 id="3-直接导入"><a href="#3-直接导入" class="headerlink" title="(3) 直接导入"></a>(3) 直接导入</h5><p>如果只想单纯地执行某个模块中的代码，并不需要得到模块中向外共享的成员。</p><p>此时，可以直接导入并执行模块代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="6-Promise"><a href="#6-Promise" class="headerlink" title="6. Promise"></a>6. Promise</h4><blockquote><p><strong>what’s this 是什么</strong></p><p><strong>why use it 为什么</strong></p><p><strong>how use it 怎么用</strong></p><p>Promise 是用来解决回调地狱的, 其实就是容器，里面包裹着异步代码, 他有三种状态 </p></blockquote><h5 id="1-Promise-的特性"><a href="#1-Promise-的特性" class="headerlink" title="(1) Promise 的特性"></a>(1) Promise 的特性</h5><p><code>三种状态</code></p><p>pending(进行中)、fulfilled(已成功)、rejected(已失败)</p><p>只要创建了 Promise，就处于 pending 状态；调用了 resolve 后，由 pending 转为 fulfilled ；调用了 reject 后，由 pending 转为 rejected。状态发生修改后是不可逆的(状态凝固)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(xxx) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>() </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">.<span class="title function_">finally</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>() <span class="comment">// 等待(失败则停止)</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>() <span class="comment">// 赛跑</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>() <span class="comment">// 等待(永远会执行，尽管失败也执行)</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>()</span><br></pre></td></tr></table></figure><p><code>Promise 构造函数参数</code></p><p>它是一个回调函数，该回调函数有两个参数：</p><ul><li><code>resolve</code> - 成功时的回调，它参数除正常的值外，也可以是一个 Promise 对象</li><li><code>reject</code> - 失败时的回调，它的参通常是一个 Error 对象</li></ul><p><code>then()</code></p><ul><li>在 Promise 对象内 resolve 时执行</li><li><p>可以接收两个回调函数参数：onFulfilled、onRejected (可选)。</p></li><li><p>执行后，会返回一个新 Promise 对象，</p></li></ul><p><code>catch()</code></p><ul><li>在 Promise 对象内 reject 时执行</li><li>执行后，会返回一个新 Promise 对象</li></ul><p><code>finally()</code></p><ul><li>不管成功还是失败，最后都会执行</li><li>它的回调函数没有参数</li><li>放在 then catch 的最后面</li></ul><p><code>Promise.all()</code></p><p>它能将多个 Promise 对象包装成一个新的 Promise 对象，同时执行这些 Promise 后，等待全部执行完成后一起返回。</p><ul><li><p>它的参数是一个 Promise 对象数组（也可以不是数组，但必须是可迭代的）</p></li><li><p>只要有 Promise 失败了（且它们没调用自己的 catch 方法），则就会触发 Promise.all 返回的新 Promise 对象的 catch 方法</p></li></ul><p><code>Promise.race()</code></p><p>它能将多个 Promise 对象包装成一个新的 Promise 对象，同时执行这些 Promise 后，只要有其中一个率先改变了状态，就会返回。</p><ul><li>参数与 Promise.all 的一样</li></ul><p><code>Promise.resolve()</code> </p><p>它能将现有的普通 JS 值包装成一个 Promise 对象。</p><p><code>Promise.reject()</code> </p><p>它能将值包装为一个状态为 rejected 的新 Promise 对象，且传入的参数会被用作内部 reject() 时的参数。</p><h5 id="2-Promise-的优缺点"><a href="#2-Promise-的优缺点" class="headerlink" title="(2) Promise 的优缺点"></a>(2) Promise 的优缺点</h5><p><strong>优点</strong></p><ul><li>统一了 JS 的异步处理方式</li><li>解决了回调地狱的问题</li></ul><p><strong>缺点</strong></p><ul><li>一旦开始执行，中途就无法取消</li><li>处于 pending 状态时，无法得知目前已执行到哪个阶段(即进度，比如是刚刚开始？还是即将完成呢？)</li><li>如果不设置 catch 回调函数，Promise 内部抛出的错误，不能被外部捕获到</li><li>报错时显示的信息不友好</li></ul><h4 id="7-async-和-await"><a href="#7-async-和-await" class="headerlink" title="7. async 和 await"></a>7. async 和 await</h4><p>async 和 await 是一对关键字</p><ol><li><p>async 用于修饰一个函数, 表示一个函数是异步的</p><p>如果 async 函数内没有 await, 那么 async 没有意义的, 全是同步的内容</p><p>只有遇到了 await 开始往下, 才是异步的开始</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ol><li><p>await 要用在 async 函数中</p></li><li><p>await 后面一般会跟一个 promise 对象,  await 会阻塞 async 函数的执行,</p><p>直到等到 promise 成功的结果( resolve 的结果)</p></li><li><p>await 只会等待 promise 成功的结果, 如果失败了会报错, 需要 try catch</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span> (filePath) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;b.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data3 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;c.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data4 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;d.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data4)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="comment">// console.log(&#x27;目前, 文件有丢失, 没有读到正确的文件, 请联系管理员&#x27;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p><strong>await 在等什么</strong></p><p>首先来看 await 后面应该跟的是什么内容：</p><ol><li><p>一个 Promise 对象、或一个 async 函数的调用（调用结果也是一个 Promise 对象）</p></li><li><p>一个普通的表达式</p></li></ol><p>所以结论就是：</p><ul><li>如果 await 后是 Promise 对象，则它等待的是 Promise 对象中调用 <code>resolve()</code> 进行返回 ，获取返回数据</li><li>如果 await 后是普通的表达式，则它等待的是表达式的运算结果</li></ul><h4 id="8-宏任务微任务"><a href="#8-宏任务微任务" class="headerlink" title="8. 宏任务微任务"></a>8. 宏任务微任务</h4><p><strong>哪些代码是宏任务？哪些是微任务？</strong></p><p>四种微任务：</p><ul><li>Promise 的 <code>then、catch、finally</code></li><li><code>MutationObserver</code>（监视 DOM 变动的API，详情参考<a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MDN</a>）</li><li><code>Object.observe</code> (监听标准对象的变化，已废弃)</li><li><code>Process.nextTick</code>（Node环境特有）</li></ul><p>除了微任务，其他都是宏任务，比如：</p><ul><li><code>&lt;script&gt;</code>标签中的全部代码</li><li>DOM 操作</li><li>用户交互操作</li><li>所有网络请求</li><li>定时器：setTimeout、setInterval 等</li><li>···</li></ul><h5 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h5><p>先执行 js 主代码块, 遇到宏任务,会加入到循环队列中, 遇到微任务也会加入到循环队列中, 等到主代码块执行完毕后,会去事件对列中拿任务执行, 优先执行任务队列中的微任务, 其次执行宏任务。</p><p><strong>确定宏任务、微任务执行顺序的技巧：</strong></p><ol><li>先按宏任务的代码特征，整理出所有<code>宏任务区域</code>及<code>层次结构</code></li><li>然后在每一层中，理出该层的所有的<code>宏任务</code>及<code>该宏任务区域下的微任务</code></li><li>最终排序：从第一层开始逐层执行每层的：<code>宏任务+微任务</code> | <code>宏任务+微任务</code> | …</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;p2&#x27;</span>)</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;setTimeout1&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// abc 2 3 6  主代码块 宏任务</span></span><br><span class="line">    <span class="comment">// 在执行下一个宏任务之前查看是否有微任务</span></span><br><span class="line">    <span class="comment">// p2 p1</span></span><br><span class="line">    <span class="comment">// 微任务执行完 按顺序执行宏任务 三个定时任务 1 4 5</span></span><br><span class="line">    <span class="comment">// abc 2 3 6 p2 p1 1 4 5</span></span><br></pre></td></tr></table></figure><h4 id="9-webpack"><a href="#9-webpack" class="headerlink" title="9. webpack"></a>9. webpack</h4><h5 id="打包步骤"><a href="#打包步骤" class="headerlink" title="打包步骤"></a>打包步骤</h5><p>(1) 创建两个文件文件夹<code>src</code>  和  <code>dist</code></p><p>(2) 在 src 下创建两个文件 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./a.js&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是index文件&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;哈哈哈，我是a模块&#x27;</span>)</span><br></pre></td></tr></table></figure><p>(3) 需要安装 webpack 和 webpack-cli</p><p>-D 代表安装的是开发阶段的依赖包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli -D</span><br></pre></td></tr></table></figure><p>(4) 在 package.json 文件中配置打包脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config webpack.config.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>(5) 在根目录，和 package.json 同级创建 webpack.config.js 文件</p><p>(6) 运行打包命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>(7) 在dist中查看打包结果</p><h5 id="wbpack基本配置——配置入口和出口模式"><a href="#wbpack基本配置——配置入口和出口模式" class="headerlink" title="wbpack基本配置——配置入口和出口模式"></a>wbpack基本配置——配置入口和出口模式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack配置文件</span></span><br><span class="line"><span class="comment">// 用于提供webpack的打包配置</span></span><br><span class="line"><span class="comment">// webpack运行在node环境中，在webpack.config.js中需要使用nodejs的模块化</span></span><br><span class="line"><span class="comment">// 导出webpack的配置</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// entry: 打包入口  指定对谁打包</span></span><br><span class="line">  <span class="comment">// 默认：&#x27;./src/index.js</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// output: 打包出口  打包到哪儿去</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 指定打包后文件的名字  默认main.js</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 指定打包输出的文件夹路径，必须是绝对路径  默认dist</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;lib&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// mode：打包模式</span></span><br><span class="line">  <span class="comment">// development：开发        代码不压缩，提供注释，更好阅读,打包速度快（不用压缩），开发阶段建议使用</span></span><br><span class="line">  <span class="comment">// production：生产，线上环境       代码压缩，清除注释，文件更小，加载速度快</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="框架部分"><a href="#框架部分" class="headerlink" title="框架部分"></a>框架部分</h2><h3 id="vue-2"><a href="#vue-2" class="headerlink" title="vue 2"></a>vue 2</h3><h4 id="一、MVVM"><a href="#一、MVVM" class="headerlink" title="一、MVVM"></a>一、MVVM</h4><p>M V VM，一种软件架构模式，主要目的是分离视图（View）和模型（Model）。</p><ul><li>M：model 数据模型，如 ajax 获取到的数据    </li><li>V：view 视图（页面）</li><li>VM：ViewModel 视图模型，是 view 和 model 的桥梁</li></ul><p>MVVM 通过<code>数据双向绑定</code>让数据和视图自动地双向同步  <strong>不再需要操作 DOM</strong></p><ul><li>V（修改视图） -&gt; M（数据自动同步）</li><li>M（修改数据） -&gt; V（视图自动同步）</li></ul><h4 id="二、vue-cli"><a href="#二、vue-cli" class="headerlink" title="二、vue-cli"></a>二、vue-cli</h4><ul><li>全局安装vue-cli</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @vue/cli -g </span><br></pre></td></tr></table></figure><ul><li>查看vue版本 (目前最新版本5.0.4)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue --version</span><br><span class="line">vue -V</span><br></pre></td></tr></table></figure><ul><li>初始化项目,创建vue2项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create 01-vue-demo</span><br></pre></td></tr></table></figure><ul><li>等待安装完成，启动项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-demo</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="三、vue-指令"><a href="#三、vue-指令" class="headerlink" title="三、vue 指令"></a>三、vue 指令</h4><h5 id="1-v-bind"><a href="#1-v-bind" class="headerlink" title="1. v-bind"></a>1. v-bind</h5><ul><li>描述：插值表达式不能用在html的属性上，如果想要动态的设置html元素的属性，需要使用v-bind指令</li><li>作用：动态的设置html的属性</li><li>语法：<code>v-bind:属性名=&quot;值&quot;</code></li><li>简写：<code>:属性名=&quot;值&quot;</code></li></ul><h5 id="2-v-bind-样式增强"><a href="#2-v-bind-样式增强" class="headerlink" title="2. v-bind 样式增强"></a>2. v-bind 样式增强</h5><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。</p><p>因为它们都是 attribute，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。</p><p>不过，字符串拼接麻烦且易错。</p><p>因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><p><em>class增强</em></p><p><code>:class</code> (<code>v-bind:class</code> 的简写) 一个对象，以动态地切换 class：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :class=&quot;&#123; red: isRed &#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>:class</code> 指令也可以与普通的 <code>class</code> attribute 共存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot; :class=&quot;&#123;red: isRed, pink: isPink&#125;&quot;&gt;123&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><em>style增强</em></p><p><code>:style</code>也可以使用对象或者数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot; :style=&quot;&#123;color:color, backgroundColor: bg &#125;&quot;&gt;123&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            color: &#x27;red&#x27;,</span><br><span class="line">            bg: &#x27;pink&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="3-v-on"><a href="#3-v-on" class="headerlink" title="3. v-on"></a>3. v-on</h5><p>最基本的语法</p><ul><li><code>&lt;button v-on:事件名=&quot;事件函数&quot;&gt;按钮&lt;/button&gt;</code></li><li>需要在 methods 中提供事件处理函数</li><li>v-on 也可以简写<code>&lt;button @事件名=&quot;事件函数&quot;&gt;按钮&lt;/button&gt;</code></li></ul><ul><li>需要传递参数<ul><li><code>&lt;button v-on:事件名=&quot;事件函数(参数)&quot;&gt;按钮&lt;/button&gt;</code>，需要在methods中提供事件函数，接受参数</li></ul></li></ul><p><strong>事件修饰符</strong></p><p>vue中提供的事件修饰符</p><ul><li><p><code>.prevent</code> 阻止默认行为</p></li><li><p><code>.stop</code> 阻止冒泡</p></li><li><p><code>.once</code> 事件只触发一次</p></li><li><p><code>.self</code> 将事件绑定到自身，只有自身才能触发</p></li></ul><p><strong>按键修饰符</strong></p><p>在监听键盘事件时，我们经常需要判断详细的按键。此时，可以为键盘相关的事件添加按键修饰符</p><ul><li><p>@keyup.enter  回车</p></li><li><p>@keyup.esc  返回</p></li></ul><h5 id="4-v-show-和-v-if"><a href="#4-v-show-和-v-if" class="headerlink" title="4. v-show 和 v-if"></a>4. v-show 和 v-if</h5><p>v-show 和 v-if 功能: 控制盒子的显示隐藏</p><ul><li>v-show</li></ul><p>​        语法:  v-show=”布尔值”    (true显示, false隐藏)</p><p>​        原理:  实质是在控制元素的 css 样式,  <code>display: none;</code></p><ul><li>v-if   </li></ul><p>​        语法: v-if=”布尔值”   (true显示, false隐藏)</p><p>​        原理:  实质是在动态的创建 或者 删除元素节点</p><p>应用场景: </p><ul><li><p>如果是频繁的切换显示隐藏, 用 v-show</p><p>v-if, 频繁切换会大量的创建和删除元素, 消耗性能</p></li><li><p>如果是不用频繁切换, 要么显示, 要么隐藏的情况, 适合于用 v-if</p><p>v-if 是惰性的, 如果初始值为 false, 那么这些元素就直接不创建了, 节省一些初始渲染开销</p></li></ul><p><strong>v-else 和 v-else-if</strong></p><p>v-else 和 v-else-if 是搭配 v-if 来使用的，不能单独使用，用于代表其他情况</p><h5 id="5-v-model"><a href="#5-v-model" class="headerlink" title="5. v-model"></a>5. v-model</h5><p><em>双向数据绑定</em></p><ol><li><p>数据变化了, 视图会跟着变</p></li><li><p>视图变化了, 数据要跟着变</p><p>输入框内容变化了(监听用户的输入, 监听 input 事件), 数据要跟着变</p></li></ol><p><em>单向数据绑定</em></p><p>​        数据变了，视图会跟着变</p><p>在 vue 中，只有<code>v-model</code>指令给<code>表单元素</code>能够实现双向数据绑定，其他指令都是单向数据绑定。</p><p>语法: v-model=’值’</p><p><strong>v-model 修饰符</strong></p><blockquote><p>v-model 也提供了修饰符，用于给 v-model 提供更加强大的能力。</p></blockquote><ul><li><p>number</p><p>如果想自动将用户的输入值, 用 parseFloat 转成数字类型, ，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果这个值如果这个值无法转数字，则会返回原始的值。</p></li><li><p>trim</p><p>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>lazy</p><p>在<code>change</code>时而非<code>input</code>时更新，可以给 <code>v-model</code> 添加 <code>lazy</code> 修饰符：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="6-v-text-和-v-html"><a href="#6-v-text-和-v-html" class="headerlink" title="6. v-text 和 v-html"></a>6. v-text 和 v-html</h5><p>v-text指令</p><ul><li>解释：更新元素的 <code>innerText</code>。如果要更新部分的 内容 ，需要使用 插值表达式。 </li></ul><p>v-html指令</p><ul><li>解释：更新DOM对象的<code>innerHTML</code>,html标签会生效</li></ul><p>注意：在网站上动态渲染任意 HTML 是非常危险的，因为容易导致 <a href="https://en.wikipedia.org/wiki/Cross-site_scripting">XSS 攻击</a>。只在可信内容上使用 <code>v-html</code>，<strong>永不</strong>用在用户提交的内容上。<a href="https://cn.vuejs.org/v2/api/#v-html">https://cn.vuejs.org/v2/api/#v-html</a></p><p>扩展：如果使用v-html指令，可以使用<a href="https://github.com/cure53/DOMPurify">DOMPurify</a>库来保证安全性。</p><h5 id="7-v-for"><a href="#7-v-for" class="headerlink" title="7. v-for"></a>7. v-for</h5><p> v-for 作用: 遍历对象和数组</p><p>在使用v-for遍历的时候，必须提供一个独一无二的key属性，通常提供id属性</p><ul><li>遍历数组 (常用)</li></ul><p>语法：<code>v-for=&quot;item in 数组名&quot;  item每一项</code></p><p>语法：<code>v-for=&quot;(item, index) in 数组名&quot;  item每一项 index下标</code></p><ul><li>遍历对象</li></ul><p>语法：<code>v-for=&quot;(值, 键) in 对象&quot;</code></p><ul><li>遍历数字</li></ul><p>语法：<code>v-for=&quot;(值, 键) in 对象&quot;</code></p><h4 id="四、过滤器"><a href="#四、过滤器" class="headerlink" title="四、过滤器"></a>四、过滤器</h4><p><code>过滤器（Filters）</code>是 vue 为开发者提供的功能，常用于文本的格式化。</p><p>过滤器可以用在两个地方：<code>插值表达式</code>和 <code>v-bind 属性绑定</code>。</p><h6 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h6><p><em>定义过滤器</em></p><p><code>局部过滤器</code>: 组件私有的过滤器，可以在 filters 节点中定义过滤器，该过滤器只能在当前组件中调用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">    filters: &#123;</span></span><br><span class="line"><span class="comment">      过滤器名字 (过滤的值) &#123;</span></span><br><span class="line"><span class="comment">        return 处理后的值</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    upper (input) &#123;</span><br><span class="line">      <span class="keyword">return</span> input.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">toUpperCase</span>() + input.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>全局过滤器</code>： 如果希望在多个 vue 组件之间共享过滤器，可以在<code>main.js</code>中通过<code>Vue.filter()</code>方法定义全局过滤器</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1： 过滤器名称</span></span><br><span class="line"><span class="comment">// 参数2： 过滤器函数，处理过滤逻辑</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;upper&#x27;</span>, <span class="keyword">function</span> (<span class="params">input</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> input.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>).<span class="title function_">toUpperCase</span>() + input.<span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="调用多个过滤器"><a href="#调用多个过滤器" class="headerlink" title="调用多个过滤器"></a>调用多个过滤器</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 把msg的值，交给filterA进行处理 --&gt;</span><br><span class="line">  &lt;!-- 把filterA处理的结果，再交给filterB进行处理 --&gt;</span><br><span class="line">  &lt;!-- 最终把filterB处理，把最终的值渲染到页面 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;msg | filterA | filterB&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h6 id="过滤器传参"><a href="#过滤器传参" class="headerlink" title="过滤器传参"></a>过滤器传参</h6><p>在使用过滤器的时候，可以额外传递参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用过滤器的时候可以传递额外的参数</span></span><br><span class="line">&lt;p&gt;&#123;&#123;msg | <span class="title function_">filterA</span>(arg1, arg2)&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义过滤器的时候，需要接收额外的参数</span></span><br><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">  <span class="comment">// 建议给过滤器的额外参数提供默认值</span></span><br><span class="line">  filterA (input, arg1 = <span class="number">0</span>, arg2 = <span class="number">1</span>) &#123; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue3中。过滤器废弃掉了</p><p>觉得过滤器是多余的</p><h4 id="五、计算属性"><a href="#五、计算属性" class="headerlink" title="五、计算属性"></a>五、计算属性</h4><p>计算属性是一个 function，这个 function 的返回值就是计算属性最终的值。</p><ul><li><p>计算属性必须定义在 computed 节点中</p></li><li><p>计算属性必须是一个 function,计算属性必须有返回值</p></li><li><p>计算属性不能被当作方法调用,当成属性来用</p></li></ul><p><em>什么时候会用到计算属性？</em></p><ul><li><p>在模板中书写大量的js逻辑，，，模板会变得不好维护，把这段逻辑写到计算属性中</p></li><li><p>我们需要一个属性，但是这个属性不是立马得到的，需要通过逻辑运算才能得到。</p></li></ul><p><strong>计算属性的缓存的问题</strong></p><p>计算属性： 缓存</p><p>计算属性只要计算了一次，就会把结果缓存起来，以后多次使用计算属性，直接使用缓存的结果，只会计算一次。</p><p>计算属性依赖的属性一旦发生了改变，计算属性会重新计算一次，并且缓存</p><h4 id="六、监听属性"><a href="#六、监听属性" class="headerlink" title="六、监听属性"></a>六、监听属性</h4><p>当需要监听某个数据是否发生改变，就要用到watch</p><blockquote><p>如果监听的是复杂数据类型，需要深度监听，需要指定deep为true,需要用到监听的完整的写法</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 默认情况下，watch只能监听到简单类型的数据变化,如果监听的是复杂类型，只会监听地址是否发生改变，不会监听对象内部属性的变化。</span></span><br><span class="line"><span class="comment">// 2. 需要使用监听的完整写法 是一个对象</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// friend (value) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&#x27;你变了&#x27;, value)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="attr">friend</span>: &#123;</span><br><span class="line">    <span class="comment">// handler 数据发生变化，需要执行的处理程序</span></span><br><span class="line">    <span class="comment">// deep: true  如果true,代表深度监听，不仅会监听地址的变化，还会监听对象内部属性的变化</span></span><br><span class="line">    <span class="comment">// immediate: 立即 立刻  是否立即监听 默认是false  如果是true,代表页面一加载，会先执行一次处理程序</span></span><br><span class="line">    handler (value) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你变了&#x27;</span>, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="七、vue-组件"><a href="#七、vue-组件" class="headerlink" title="七、vue 组件"></a>七、vue 组件</h4><h5 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h5><p><strong>注册组件有两种注册方式</strong>:  分为“全局注册”和“局部注册”两种</p><ul><li>被全局注册的组件，可以在任意的组件模板范围中使用 通过<code>Vue.component()</code></li><li>被局部注册的组件，只能在当前注册的组件模板范围内使用 通过<code>components</code></li></ul><h5 id="1-局部注册"><a href="#1-局部注册" class="headerlink" title="1. 局部注册"></a>1. 局部注册</h5><ul><li>把独立的组件封装一个<code>.vue文件中</code>，推荐放到<code>components</code>文件夹</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components</span><br><span class="line">  -- <span class="title class_">HmHeader</span>.<span class="property">vue</span></span><br><span class="line">  -- <span class="title class_">HmContent</span>.<span class="property">vue</span></span><br><span class="line">  -- <span class="title class_">HmFooter</span>.<span class="property">vue</span></span><br></pre></td></tr></table></figure><ul><li>通过组件的<code>components</code>配置 局部注册组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HmHeader</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmHeader&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HmContent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmContent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HmFooter</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmFooter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// data methods filters computed watch</span></span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="comment">// 组件名: 组件</span></span><br><span class="line">    <span class="comment">// 组件名：注意，不能和html内置的标签重名</span></span><br><span class="line">    <span class="comment">// 使用的时候：直接通过组件名去使用</span></span><br><span class="line">    <span class="comment">// HmHeader  HmHeader  hm-header</span></span><br><span class="line">    <span class="title class_">HmHeader</span>,</span><br><span class="line">    <span class="title class_">HmContent</span>,</span><br><span class="line">    <span class="title class_">HmFooter</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意点：注册的组件的名字不能和HTML内置的标签重名==</p><ul><li>可以在模板中使用组件，，，，使用组件和使用html的标签是一样的，，，可以多次使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 组件注册好了，就跟使用html标签一样了 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hm-header</span>&gt;</span><span class="tag">&lt;/<span class="name">hm-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hm-content</span>&gt;</span><span class="tag">&lt;/<span class="name">hm-content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hm-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">hm-footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>==局部注册的组件只能在当前组件中使用==</p><h5 id="2-全局注册组件"><a href="#2-全局注册组件" class="headerlink" title="2. 全局注册组件"></a>2. 全局注册组件</h5><ul><li>在<code>components</code>文件夹中创建一些新的组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">components</span><br><span class="line">  -- <span class="title class_">HmHeader</span>.<span class="property">vue</span></span><br><span class="line">  -- <span class="title class_">HmContent</span>.<span class="property">vue</span></span><br><span class="line">  -- <span class="title class_">HmFooter</span>.<span class="property">vue</span></span><br></pre></td></tr></table></figure><ul><li>在<code>main.js</code>中通过<code>Vue.component()</code>全局注册组件</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">HmHeader</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmHeader&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HmContent</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmContent&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HmFooter</span> <span class="keyword">from</span> <span class="string">&#x27;./components/HmFooter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局注册</span></span><br><span class="line"><span class="comment">// Vue.component(名字, 组件)</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HmHeader&#x27;</span>, <span class="title class_">HmHeader</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HmContent&#x27;</span>, <span class="title class_">HmContent</span>)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;HmFooter&#x27;</span>, <span class="title class_">HmFooter</span>)</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 组件注册好了，就跟使用html标签一样了 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hm-header</span>&gt;</span><span class="tag">&lt;/<span class="name">hm-header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hm-content</span>&gt;</span><span class="tag">&lt;/<span class="name">hm-content</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hm-footer</span>&gt;</span><span class="tag">&lt;/<span class="name">hm-footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>==注意：全局注册的组件 可以在任意的组件中去使用==</p><h4 id="八、组件通信"><a href="#八、组件通信" class="headerlink" title="八、组件通信"></a>八、组件通信</h4><h5 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h5><p>语法:</p><p>(1) 父组件通过给子组件加属性传值</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Son</span> price=<span class="string">&quot;100&quot;</span> title=<span class="string">&quot;不错&quot;</span> :info=<span class="string">&quot;msg&quot;</span>&gt;&lt;/<span class="title class_">Son</span>&gt;</span><br></pre></td></tr></table></figure><p>(2) 子组件中, 通过props属性接收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: [<span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;info&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>props 校验</strong></p><p><strong>props 是父传子, 传递给子组件的数据, 为了提高 子组件被使用时 的稳定性, 可以进行props校验</strong>, 验证传递的数据是否符合要求</p><p>默认的数组形式, 不会进行校验, 如果希望校验, 需要提供对象形式的 props</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>props 提供了多种数据验证方案，例如：</p><ul><li>基础的类型检查  Number</li><li>多个可能的类型 [String, Number]</li><li>必填项校验   required: true</li><li>默认值 default: 100</li><li>自定义验证函数</li></ul><p>官网语法: <a href="https://cn.vuejs.org/v2/guide/components-props.html#Prop-%E9%AA%8C%E8%AF%81">地址</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查</span></span><br><span class="line">    <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    <span class="attr">propC</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    <span class="attr">propD</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// -------------------------------------------------------------------------</span></span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    <span class="attr">propF</span>: &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2. 子传父"></a>2. 子传父</h5><p>(1) 子组件可以通过 <code>this.$emit(&#39;事件名&#39;, 参数1, 参数2, ...)</code> 触发事件的同时传参的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;sayPrice&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>(2) 父组件给子组件注册一个自定义事件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-product </span><br><span class="line">  ...</span><br><span class="line">  @sayPrice=<span class="string">&quot;sayPrice&quot;</span>&gt;</span><br><span class="line">&lt;/my-product&gt;</span><br></pre></td></tr></table></figure><p>(3) 父组件并提供对应的函数接收参数</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  sayPrice (num) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="3-非父子组件通信"><a href="#3-非父子组件通信" class="headerlink" title="3. 非父子组件通信"></a>3. 非父子组件通信</h5><blockquote><p>非父子组件通讯，没有办法使用父子通讯，可以使用通用的组件通讯解决方案：event bus</p><p>event bus（事件总线）  适用于任意的两个组件进行通讯</p></blockquote><p><strong>步骤</strong></p><blockquote><p>Jack组件给Rose组件发数据</p></blockquote><ul><li>在<code>main.js</code>中创建 bus对象，并且挂到Vue的原型上，保证所有的vue组件都能访问到</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建event bus</span></span><br><span class="line"><span class="comment">// 实质上 bus就是一个空的vue实例</span></span><br><span class="line"><span class="comment">// 2. 把bus挂载到Vue的原型上，所有的组件都能够通过 this.bus访问到 bus对象</span></span><br><span class="line"><span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bus</span> = bus</span><br></pre></td></tr></table></figure><ul><li>Jack需要通过bus发布事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bus</span>.$emit(<span class="string">&#x27;send&#x27;</span>, <span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>Rose通过bus监听事件（订阅事件）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 钩子函数,,,组件只要创建，就会立即执行created函数</span></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 给bus订阅事件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bus</span>.$on(<span class="string">&#x27;send&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到消息&#x27;</span>, msg)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span> = msg</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, </span><br></pre></td></tr></table></figure><p>注意点：订阅事件的时候，通过bus进行订阅的，所以订阅事件的函数需要写成 <strong>箭头函数</strong></p><h4 id="九、ref-和-refs"><a href="#九、ref-和-refs" class="headerlink" title="九、ref 和 $refs"></a>九、ref 和 $refs</h4><p>利用 ref 和 $refs 可以用于获取 dom 元素, 或者组件实例</p><p>每个 vue 的组件实例上，都包含一个$refs 对象，里面存储着对应的DOM 元素或组件的引用。</p><h4 id="十、-nextTick"><a href="#十、-nextTick" class="headerlink" title="十、$nextTick"></a>十、$nextTick</h4><p>组件的 <code>$nextTick(callback)</code> 方法，会把 callback 回调推迟到下一个 DOM 更新周期之后执行。</p><p>通俗的理解是：<strong>等组件的DOM 刷新之后，再执行 callback 回调函数</strong>。从而能保证 callback 函数可以操作到最新的 DOM 元素。</p><h4 id="十一、动态组件和-keep-alive"><a href="#十一、动态组件和-keep-alive" class="headerlink" title="十一、动态组件和 keep-alive"></a>十一、动态组件和 keep-alive</h4><h5 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h5><p>什么是动态组件:   让多个组件使用同一个挂载点，并动态切换，这就是动态组件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;动态组件的演示&lt;/h3&gt;</span><br><span class="line">    &lt;!-- 动态组件 =&gt; 多个组件使用同一个挂载点, 并可以动态的切换展示 --&gt;</span><br><span class="line">    &lt;button @click=&quot;comName = &#x27;my-swiper&#x27;&quot;&gt;swiper&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;comName = &#x27;my-nav&#x27;&quot;&gt;nav&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- </span><br><span class="line">      &lt;my-nav&gt;&lt;/my-nav&gt;</span><br><span class="line">      &lt;my-swiper&gt;&lt;/my-swiper&gt; </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyNav from &#x27;./my-nav.vue&#x27;</span><br><span class="line">import MySwiper from &#x27;./my-swiper.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      comName: &#x27;my-nav&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyNav,</span><br><span class="line">    MySwiper</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="使用-keep-alive-保持状态"><a href="#使用-keep-alive-保持状态" class="headerlink" title="使用 keep-alive 保持状态"></a>使用 keep-alive 保持状态</h5><p>默认情况下，切换动态组件时无法保持组件的状态。会将组件销毁, 将来显示时, 又会重新创建</p><p>此时可以使用 vue 内置的 <keep-alive> 组件保持动态组件的状态。</p><p>使用 keep-alive 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;is = &#x27;Login&#x27;&quot;&gt;登录&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;is = &#x27;Register&#x27;&quot;&gt;注册&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- &lt;Login&gt;&lt;/Login&gt;</span><br><span class="line">    &lt;Register&gt;&lt;/Register&gt; --&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        vue提供了一个组件，这个组件就是占个位置，需要通过is属性来定义该组件渲染什么内容</span><br><span class="line">        keep-alive：可以保证包裹的组件不会被销毁，不显示的时候会隐藏</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">        &lt;component :is=&quot;is&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Login from &#x27;./components/Login&#x27;</span><br><span class="line">import Register from &#x27;./components/Register&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            is: &#x27;Login&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        Login,</span><br><span class="line">        Register</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .app &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="十二、-插槽"><a href="#十二、-插槽" class="headerlink" title="十二、 插槽"></a>十二、 插槽</h4><p><strong>插槽作用: 用于实现组件的内容分发, 通过 slot 标签, 可以接收到写在组件标签内的内容</strong></p><p>插槽：slot 作用：占位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;title&quot;&gt;</span><br><span class="line">        &lt;slot name=&quot;title&quot; car=&quot;小黄车&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 留下一个坑（插槽）slot --&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;&lt;slot money=&quot;100&quot;&gt;默认内容&lt;/slot&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot; age=&quot;18&quot;&gt;</span><br><span class="line">        &lt;button&gt;确定&lt;/button&gt;</span><br><span class="line">        &lt;button&gt;关闭&lt;/button&gt;</span><br><span class="line">      &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;MyModal&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">  .modal &#123;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">    width: 400px;</span><br><span class="line">    border: 3px solid #000;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    .footer &#123;</span><br><span class="line">      margin-top: 20px;</span><br><span class="line">      text-align: right;</span><br><span class="line">      button &#123;</span><br><span class="line">        width: 80px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;插槽的语法&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">        默认插槽：往组件标签的中间传入的内容就是用来替换slot的，填坑的</span><br><span class="line">        具名插槽：需要使用template，并且通过v-slot:名字指定插槽的名字</span><br><span class="line">        简写：v-slot:   简写为 #</span><br><span class="line">         --&gt;</span><br><span class="line">    &lt;Modal&gt;</span><br><span class="line">        你确定要退出吗？</span><br><span class="line">        &lt;template v-slot:title&gt;</span><br><span class="line">            &lt;h3&gt;温馨提示&lt;/h3&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Modal&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Modal&gt;</span><br><span class="line">        &lt;template #default=&quot;&#123;money&#125;&quot;&gt;你确定要删除吗？-- &#123;&#123; money &#125;&#125;&lt;/template&gt;</span><br><span class="line">        &lt;template v-slot:title&gt;</span><br><span class="line">            &lt;h3&gt;提示&lt;/h3&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Modal&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Modal&gt;</span><br><span class="line">        &lt;a href=&quot;&quot;&gt;百度一下，你就知道&lt;/a&gt;</span><br><span class="line">        &lt;template #title=&quot;&#123; car &#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; car &#125;&#125;</span><br><span class="line">            &lt;h4&gt;标题&lt;/h4&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/Modal&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 没有填坑 --&gt;</span><br><span class="line">    &lt;Modal&gt;</span><br><span class="line">        &lt;template #title&gt;标题&lt;/template&gt;</span><br><span class="line">        &lt;template #footer=&quot;&#123;age&#125;&quot;&gt;&lt;button&gt;登录-&#123;&#123; age &#125;&#125;&lt;/button&gt;&lt;/template&gt;</span><br><span class="line">        我是内容</span><br><span class="line">    &lt;/Modal&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Modal from &#x27;./components/Modal&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Modal</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><p><strong>插槽的分类:</strong></p><p><strong>（1）默认插槽</strong></p><p><slot></slot> 只要没有具体分发的内容, 都会给到默认插槽</p><p><slot name="default">&lt;/slot&gt; 是默认插槽完整的写法 和 <slot></slot> 完全等价</p><p><strong>（2）具名插槽: 具有名字的插槽 (配置了名字), 可以实现定向分发</strong></p><p>一旦配置了名字, 只会接收对应的内容, 不是分发给他的, 就不要</p><blockquote><p>具名插槽的使用步骤</p></blockquote><p>(1) 给插槽起名字 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;header&quot;&gt;</span><br><span class="line">  &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">  &lt;slot&gt;这是后备内容&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">  &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>(2) 需要使用 template 标签, 将内容包裹成一个整体</p><p>(3) 通过 v-slot:插槽名, 指定具体分发给谁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-dialog&gt;</span><br><span class="line">  &lt;template v-slot:header&gt;</span><br><span class="line">    &lt;h3&gt;这是大标题&lt;/h3&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:default&gt;</span><br><span class="line">    &lt;p&gt;这是内容&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template v-slot:footer&gt;</span><br><span class="line">    &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/my-dialog&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line">&lt;my-dialog&gt;</span><br><span class="line">  &lt;template #header&gt;</span><br><span class="line">    &lt;h3&gt;这是大标题&lt;/h3&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #default&gt;</span><br><span class="line">    &lt;p&gt;这是内容&lt;/p&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">  &lt;template #footer&gt;</span><br><span class="line">    &lt;button&gt;确认&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;取消&lt;/button&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/my-dialog&gt;</span><br></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>作用域插槽: <strong>定义 slot 插槽的同时, 是可以传值的</strong>, 将来在分发内容时, 可以使用</p><p>具名插槽带有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=&quot;title&quot; car=&quot;小黄车&quot;&gt;&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>获取具名插槽的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-slot:title=&quot;&#123;car&#125;&quot;&gt;</span><br><span class="line">  &lt;h2&gt;提示---&#123;&#123;car&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>默认插槽带有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot money=&quot;100&quot;&gt;默认内容&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>获取默认插槽的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #default=&quot;&#123; money &#125;&quot;&gt; </span><br><span class="line">你确定要删除吗？ --&#123;&#123; money &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="十三、-自定义指令"><a href="#十三、-自定义指令" class="headerlink" title="十三、 自定义指令"></a>十三、 自定义指令</h4><h5 id="局部注册："><a href="#局部注册：" class="headerlink" title="局部注册："></a>局部注册：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;自定义指令&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 希望这个input框能自动获取焦点 --&gt;</span><br><span class="line">    &lt;!-- v-focus：自定义指令 --&gt;</span><br><span class="line">    &lt;input ref=&quot;input&quot; type=&quot;text&quot; v-aa&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">    &lt;!-- &lt;div v-red&gt;哈哈哈哈&lt;/div&gt;</span><br><span class="line">    &lt;div v-red&gt;嘻嘻嘻&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-focus&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-focus v-green&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 局部自定义指令</span><br><span class="line">// v-red：这个元素的背景色就变成红色</span><br><span class="line">export default &#123;</span><br><span class="line">    // directives</span><br><span class="line">    directives: &#123;</span><br><span class="line">        aa: &#123;</span><br><span class="line">            // 指令的配置，希望a指令能够做一些事情</span><br><span class="line">        &#125;,</span><br><span class="line">        focus: &#123;</span><br><span class="line">            inserted(el) &#123;</span><br><span class="line">                // 当指令所在的元素渲染的时候会自动执行，类似于mounted</span><br><span class="line">                console.log(&#x27;哈哈哈&#x27;, el)</span><br><span class="line">                // 执行DOM操作</span><br><span class="line">                el.style.color = &#x27;red&#x27;</span><br><span class="line">                el.focus()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        red: &#123;</span><br><span class="line">            inserted(el) &#123;</span><br><span class="line">                console.log(&#x27;el&#x27;, el)</span><br><span class="line">                el.style.backgroundColor = &#x27;red&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="全局注册："><a href="#全局注册：" class="headerlink" title="全局注册："></a>全局注册：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3种插槽</span></span><br><span class="line"><span class="comment">// 默认插槽：&lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="comment">// 具名插槽：&lt;slot name=&quot;title&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="comment">// 作用域插槽：&lt;slot money=&quot;100&quot;&gt;&lt;/slot&gt;   &lt;slot name=&quot;title&quot; money=&quot;100&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;green&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">inserted</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;green&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="带值的指令"><a href="#带值的指令" class="headerlink" title="带值的指令"></a>带值的指令</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">directives</span>: &#123;</span><br><span class="line">  <span class="comment">// 自定义一个局部指令</span></span><br><span class="line">  <span class="attr">color</span>: &#123;</span><br><span class="line">    <span class="comment">// 指令所在的元素渲染的时候</span></span><br><span class="line">    inserted (el, &#123;value&#125;) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// update指令的值改变时触发, binding.value指令的值修改触发</span></span><br><span class="line">    update (el, binding) &#123;</span><br><span class="line">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十四、vue-生命周期与钩子函数"><a href="#十四、vue-生命周期与钩子函数" class="headerlink" title="十四、vue 生命周期与钩子函数"></a>十四、vue 生命周期与钩子函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> beforecreated：data数据初始化之前，组件还没有数据</span><br><span class="line"><span class="number">2.</span> <span class="attr">created</span>: data数据初始化之后，可以获取到组件的数据</span><br><span class="line"><span class="number">3.</span> beforeMount：<span class="variable constant_">DOM</span>渲染之前，<span class="variable constant_">DOM</span>还没渲染</span><br><span class="line"><span class="number">4.</span> mounted：<span class="variable constant_">DOM</span>渲染之后，可以操作<span class="variable constant_">DOM</span>了</span><br><span class="line"><span class="number">5.</span> <span class="attr">beforeUpdate</span>: 数据更新，<span class="variable constant_">DOM</span>更新前</span><br><span class="line"><span class="number">6.</span> <span class="attr">updated</span>: 数据更新，<span class="variable constant_">DOM</span>更新后</span><br><span class="line"><span class="number">7.</span> <span class="attr">beforeDestroy</span>: 组件销毁前</span><br><span class="line"><span class="number">8.</span> <span class="attr">destroyed</span>: 组件销毁后</span><br></pre></td></tr></table></figure><p>使用场景：</p><p>created: 发送请求，因为有数据了</p><p>mounted: 操作DOM， 因为有dom了</p><p>updated: 数据变化之后，操作DOM （用的并不多，因为有 nextTick）</p><p>beforeDestory : 释放资源，需要释放一些全局资源，比如定时器，比如全局事件（重要，容易造成内存泄漏）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;app根组件---&#123;&#123; money &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; money &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;killMe&quot;&gt;自杀&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // data methods filters computed watch components</span><br><span class="line">  // 指定生命周期钩子函数</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      money: 100</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    killMe() &#123;</span><br><span class="line">      // 销毁当前组件</span><br><span class="line">      this.$destroy()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    console.log(&#x27;数据初始化之前执行&#x27;, this.money)</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#x27;数据初始化之后执行&#x27;, this.money)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    console.log(&#x27;beforeMount在dom渲染之前执行&#x27;, document.querySelector(&#x27;h1&#x27;))</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(&#x27;mount在dom渲染之后执行&#x27;, document.querySelector(&#x27;h1&#x27;))</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    console.log(&#x27;beforeUpdate在dom更新之前执行&#x27;, document.querySelector(&#x27;h1&#x27;).innerHTML)</span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;</span><br><span class="line">    console.log(&#x27;update在dom更新之后执行&#x27;, document.querySelector(&#x27;h1&#x27;).innerHTML)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    console.log(&#x27;beforeDestroy在销毁之前执行&#x27;)</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&#x27;destroy在销毁之后执行&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="十五、Vue-Router"><a href="#十五、Vue-Router" class="headerlink" title="十五、Vue-Router"></a>十五、Vue-Router</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>VueRouter是一个vue官方提供的一个插件，用于处理路由。</p><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><h6 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h6><ol><li>下载vue-router模块到当前工程（vue2使用3.5.3版本的路由）</li><li>在main.js中引入VueRouter函数</li><li>添加到Vue.use()身上</li><li>创建路由对象</li><li>将路由对象注入到new Vue实例中</li></ol><p><strong>核心步骤：</strong></p><ol><li><strong>配置路由规则</strong></li><li><strong>指定路由出口  router-view</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js中配置路由</span></span><br><span class="line"><span class="comment">// 抽离：将这些路由规则放到新创建的Router文件夹下的index.js文件里，在main.js中导入Router即可</span></span><br><span class="line"><span class="comment">// import router from &#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 安装   npm i vue-router@3.5.3</span></span><br><span class="line"><span class="comment">// 2. 导入VueRouter   import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 3. 使用vue-router插件  Vue.use(VueRouter)</span></span><br><span class="line"><span class="comment">// 4. 创建路由对象，需要指定路由的规则</span></span><br><span class="line"><span class="comment">// 5. 关联vue实例   router: router</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Movie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// route：一个路由规则</span></span><br><span class="line">  <span class="comment">// path：路径    components：对应的组件</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// url地址</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// url地址</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// url地址</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Movie</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 导航 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/movie&quot;</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">to</span>=<span class="string">&quot;/movie&quot;</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="comment">&lt;!-- 路由的出口，将来匹配的组件会显示到这 --&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">a</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*   router-link自动生成的类名 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/* .router-link-active:   模糊匹配 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/* .router-link-exact-active   精确匹配 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/* 必须精确匹配才会高亮 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="comment">/* router-link-exact-active router-link-active */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.router-link-exact-active</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.router-link-active</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">color</span>: red;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="1-声明式导航"><a href="#1-声明式导航" class="headerlink" title="1. 声明式导航"></a>1. 声明式导航</h5><h6 id="跳转传参"><a href="#跳转传参" class="headerlink" title="跳转传参"></a>跳转传参</h6><p><strong>两种方式：</strong></p><p><strong>在router-link上的to属性传值，语法格式如下</strong></p><ul><li>/path?参数名=值</li><li>/path/值-需要路由对象提前配置 path: “/path/:参数名”</li></ul><p><strong>对应页面组件接收传递过来的值</strong></p><ul><li>$route.query.参数名</li><li>$route.params.参数名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;App根组件&lt;/h1&gt;</span><br><span class="line">    &lt;RouterLink to=&quot;/home&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">    &lt;RouterLink to=&quot;/about&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;!-- &lt;RouterLink to=&quot;/movie?id=1&amp;name=zs&quot;&gt;电影&lt;/RouterLink&gt; --&gt;</span><br><span class="line">    &lt;RouterLink to=&quot;/movie/10086&quot;&gt;电影&lt;/RouterLink&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">  margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* .router-link-active:   模糊匹配 */</span><br><span class="line">/* .router-link-exact-active   精确匹配 */</span><br><span class="line">/* 必须精确匹配才会高亮 */</span><br><span class="line">.router-link-exact-active &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  font-size: 24px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Movie页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;电影页面&lt;/h3&gt;</span><br><span class="line">    &lt;!-- http://localhost:8081/#/movie?id=1&amp;name=zs --&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; $route.query.id &#125;&#125; --- &#123;&#123; $route.query.name &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;&#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;My-Movie&#x27;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      // http://localhost:8081/#/movie?id=1&amp;name=zs</span><br><span class="line">      console.log(this.$route.query)</span><br><span class="line">      console.log(this.$route.params)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>路由页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Movie.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// const routes = []</span></span><br><span class="line"><span class="comment">// 放在这外面还是放在下面都一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// 修改模糊匹配的类名  默认  router-link-active</span></span><br><span class="line">  <span class="comment">// linkActiveClass: &#x27;aa&#x27;,</span></span><br><span class="line">  <span class="comment">// 修改精确匹配的类名  默认  router-link-exact-active</span></span><br><span class="line">  <span class="comment">// linkExactActiveClass: &#x27;bb&#x27;,</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置路由规则</span></span><br><span class="line">  <span class="comment">// 路由模式 默认hash  变为history就可以取消路径中的#</span></span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// :传参</span></span><br><span class="line">      <span class="comment">// 动态的路由参数，id不写死，匹配任意的  /movie/:xxx</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/movie/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Movie</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 404一般都会写到最后面</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">NotFound</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h5 id="2-重定向"><a href="#2-重定向" class="headerlink" title="2. 重定向"></a>2. 重定向</h5><p>第一次打开，没有默认的页面，此时就需要使用重定向</p><p><strong>重定向：匹配到路径后，强制跳转path路径</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666677731426-4e9702e8-e873-4941-ad45-a4d8b42b06fc.png" alt="img"></p><p><strong>404：当找不到路径匹配时，给个提示页面面</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666677868496-5f4d6cf8-d9f2-435b-bd94-b679ab2ae12e.png" alt="img"></p><h5 id="3-路由模式"><a href="#3-路由模式" class="headerlink" title="3. 路由模式"></a>3. 路由模式</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666678133290-d86637f1-8f8c-45f8-8586-972f01528e7c.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666678202685-673feb84-fefe-4f0c-9504-4c7b7039506b.png" alt="img"></p><p><strong>注意：默认为hash模式，如果改成history模式，以后上线需要服务器端支持</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666678361491-4136600c-0509-4eec-a43c-1b4e344997bd.png" alt="img"></p><h5 id="4-编程式导航（用JS代码来进行跳转）"><a href="#4-编程式导航（用JS代码来进行跳转）" class="headerlink" title="4. 编程式导航（用JS代码来进行跳转）"></a>4. 编程式导航（用JS代码来进行跳转）</h5><p>语法：</p><p>path或者name任选一个</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666679036320-bb9f69e4-e30f-4b4d-b0a5-59bb8e966959.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;关于页面&lt;/h3&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class="line">      &lt;button @click=&quot;login&quot;&gt;登录按钮&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;My-About&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        username: &#x27;&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      login() &#123;</span><br><span class="line">        // a链接跳转   location.href跳转</span><br><span class="line">        // 通过js的方式实现跳转</span><br><span class="line">        if (this.username === &#x27;zs&#x27;) &#123;</span><br><span class="line">          // location.href = &#x27;/home&#x27;</span><br><span class="line">          // $router对象：用于实现跳转</span><br><span class="line"></span><br><span class="line">          // 两种方式</span><br><span class="line">          // this.$router.push(&#123;</span><br><span class="line">          //   path: &#x27;/home&#x27;</span><br><span class="line">          // &#125;)</span><br><span class="line">          // this.$router.push(&#123;</span><br><span class="line">          //   name: &#x27;a&#x27;</span><br><span class="line">          // &#125;)</span><br><span class="line"></span><br><span class="line">          // 通过path跳转，支持query传参</span><br><span class="line">          // 通过name跳转，支持query和params传参</span><br><span class="line">          this.$router.push(&#123;</span><br><span class="line">            name: &#x27;home&#x27;,</span><br><span class="line">            params: &#123;</span><br><span class="line">              name: &#x27;zs&#x27;,</span><br><span class="line">              age: 18</span><br><span class="line">            &#125;,</span><br><span class="line">            query: &#123;</span><br><span class="line">              id: 10086</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666678936111-aee2b835-8dc6-4c70-8af6-fde12972cddb.png" alt="img"></p><p>区别：</p><ul><li>params传参：是在内存中传参，刷新会丢失</li><li>query传参：是在地址栏传参，刷新还在</li></ul><h5 id="5-路由嵌套"><a href="#5-路由嵌套" class="headerlink" title="5. 路由嵌套"></a>5. 路由嵌套</h5><h6 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h6><ol><li>创建二级路由文件夹和组件</li><li>在路由js文件中继续配置2级路由</li></ol><ul><li>一级路由path从 / 开始定义</li><li><strong>二级路由往后path直接写名字，无需 / 开头（会自动拼接）</strong></li><li>嵌套路由在上级路由的children数组里编写路由信息对象</li></ul><ol><li>配置路由出口router-view</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../views/About.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Movie.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;../views/NotFound.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Find</span> <span class="keyword">from</span> <span class="string">&#x27;../views/Find.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入二级组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Rank</span> <span class="keyword">from</span> <span class="string">&#x27;../views/second/Rank.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SongList</span> <span class="keyword">from</span> <span class="string">&#x27;../views/second/SongList.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// const routes = []</span></span><br><span class="line"><span class="comment">// 放在这外面还是放在下面都一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="comment">// 修改模糊匹配的类名  默认  router-link-active</span></span><br><span class="line">    <span class="comment">// linkActiveClass: &#x27;aa&#x27;,</span></span><br><span class="line">    <span class="comment">// 修改精确匹配的类名  默认  router-link-exact-active</span></span><br><span class="line">    <span class="comment">// linkExactActiveClass: &#x27;bb&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置路由规则</span></span><br><span class="line">    <span class="comment">// 路由模式 默认hash  变为history就可以取消路径中的#</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 动态的路由参数，id不写死，匹配任意的  /movie/xxx</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/movie/:id&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Movie</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/find&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Find</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                <span class="comment">// 配置二级的路由</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;rank&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Rank</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;songlist&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">SongList</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 404一般都会写到最后面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">NotFound</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>Find页面：指定路由出口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;发现音乐&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 导航链接 --&gt;</span><br><span class="line">    &lt;RouterLink to=&quot;/find/rank&quot;&gt;排行榜&lt;/RouterLink&gt;</span><br><span class="line">    &lt;RouterLink to=&quot;/find/songlist&quot;&gt;歌单&lt;/RouterLink&gt;</span><br><span class="line">    &lt;!-- 指定二级路由的出口 --&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &#x27;FindView&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="6-路由懒加载"><a href="#6-路由懒加载" class="headerlink" title="6. 路由懒加载"></a>6. 路由懒加载</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 使用默认导入的方式 表示项目一加载 这个组件就会被导入</span></span><br><span class="line"><span class="comment">// import HomeView from &#x27;../views/HomeView.vue&#x27;</span></span><br><span class="line"><span class="comment">// import About from &#x27;../views/AboutView.vue&#x27;</span></span><br><span class="line"><span class="comment">// import News from &#x27;../views/News.vue&#x27;</span></span><br><span class="line"><span class="comment">// import Music from &#x27;../views/Music.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由懒加载 也叫异步组件 进入到对应的路由规则</span></span><br><span class="line"><span class="comment">// const HomeView = () =&gt; import(&#x27;../views/HomeView.vue&#x27;)</span></span><br><span class="line"><span class="comment">// const About = () =&gt; import(&#x27;../views/AboutView.vue&#x27;)</span></span><br><span class="line"><span class="comment">// const News = () =&gt; import(&#x27;../views/News.vue&#x27;)</span></span><br><span class="line"><span class="comment">// const Music = () =&gt; import(&#x27;../views/Music.vue&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/HomeView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/News.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/music&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;music&#x27;</span>,</span><br><span class="line">    <span class="comment">// route level code-splitting</span></span><br><span class="line">    <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">    <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/Music.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h5 id="7-导航守卫"><a href="#7-导航守卫" class="headerlink" title="7. 导航守卫"></a>7. 导航守卫</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个页面是配合导航守卫来做页面跳转拦截的 其实这个文件的代码应该写在router/index.js</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Nprogress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"><span class="comment">// // 路由的前置导航守卫</span></span><br><span class="line"><span class="comment">// router.beforeEach(....)</span></span><br><span class="line"><span class="comment">// 每一次路由跳转其实路由是知道的  A页面 =&gt; B页面</span></span><br><span class="line"><span class="comment">// 路由上有一个方法  beforeEach 前置导航守卫（路由钩子）</span></span><br><span class="line"><span class="comment">// to 去哪里 路由信息对象（记录的要去的页面路由信息）</span></span><br><span class="line"><span class="comment">// from 从哪来 路由信息对象（记录的从哪来的页面路由信息）</span></span><br><span class="line"><span class="comment">// next() 是一个放行函数  next如果不调用 是不会看到页面的   ()内可以写要去的页面路由地址</span></span><br><span class="line"><span class="comment">// 路由的前置导航守卫，一般要做一些页面拦截</span></span><br><span class="line"><span class="comment">// 如果没有登录，不允许访问有权限的页面，只能访问登录页面/404页面</span></span><br><span class="line"><span class="comment">// 如果登录过了,就不允许再访问登录页面了，直接强制去首页</span></span><br><span class="line"><span class="comment">// 检测是否登录过？？？ 判断token</span></span><br><span class="line"><span class="keyword">const</span> list = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/404&#x27;</span>] <span class="comment">// 白名单</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="title function_">async</span>(to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 开启进度条</span></span><br><span class="line">  <span class="title class_">Nprogress</span>.<span class="title function_">start</span>()</span><br><span class="line">  <span class="comment">// console.log(from)</span></span><br><span class="line">  <span class="comment">// console.log(to)</span></span><br><span class="line">  <span class="comment">// 1. 检测</span></span><br><span class="line">  <span class="comment">// console.log(store.getters.token)</span></span><br><span class="line">  <span class="keyword">const</span> token = store.<span class="property">getters</span>.<span class="property">token</span></span><br><span class="line">  <span class="comment">// 2. 如果有token</span></span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="comment">// 3. 看去的是不是登录页面，如果要去登录页面，直接去首页</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">      <span class="title class_">Nprogress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;获取信息&#x27;) // 在这个位置获取个人信息</span></span><br><span class="line">      <span class="comment">// 因为后面要做权限处理，进入页面前获取有几条权限展示几条点击左侧链接</span></span><br><span class="line">      <span class="keyword">if</span> (!store.<span class="property">getters</span>.<span class="property">name</span>) &#123; <span class="comment">// 判断是否有个人信息了，没有个人信息去获取</span></span><br><span class="line">        <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;user/getUserInfo&#x27;</span>) <span class="comment">// 个人信息中有一个roles.menus 这个用户的权限 坑</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 4. 登录过去别的页面，想去哪就放行你去哪</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 没有token</span></span><br><span class="line">    <span class="comment">// 5. 没有登录，如果去的是login /404 直接放行</span></span><br><span class="line">    <span class="comment">// if (to.path === &#x27;/login&#x27; || to.path === &#x27;/404&#x27;) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (list.<span class="title function_">includes</span>(to.<span class="property">path</span>)) &#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有登录 不允许去有权限的页面</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">      <span class="title class_">Nprogress</span>.<span class="title function_">done</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 路由的后置导航守卫  被next强制跳转的页面是不会经过后置守卫的，需要手动done()</span></span><br><span class="line"><span class="comment">// router.afterEach(....)</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;经过导航守卫了&#x27;</span>)</span><br><span class="line">  <span class="comment">// 关闭进度条</span></span><br><span class="line">  <span class="title class_">Nprogress</span>.<span class="title function_">done</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="十六、Vuex"><a href="#十六、Vuex" class="headerlink" title="十六、Vuex"></a>十六、Vuex</h4><h5 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h5><p>vuex是vue的集中状态(数据)管理工具，<strong>状态就是数据</strong>。 状态管理就是集中管理vue中 <strong>通用的</strong> 一些数据</p><p>使用场景: 多个组件共享同一份数据,才会将这个数据放在vuex中, 组件内部自己使用的数据还是放在组件的data中</p><p>大中型项目才会用户</p><p>注意：</p><ul><li>不是所有的场景都适用于vuex，只有在必要的时候才使用vuex</li><li>使用了vuex之后，会附加更多的框架中的概念进来，增加了项目的复杂度</li></ul><p>Vuex就像近视眼镜, 你自然会知道什么时候需要用它~</p><p>只要是中大型的项目, 必然会用到vuex</p><h5 id="2-Vuex优点"><a href="#2-Vuex优点" class="headerlink" title="2. Vuex优点"></a>2. Vuex优点</h5><p>vuex的作用是解决多组件状态共享的问题。</p><ul><li>它是独立于组件而单独存在的，所有的组件都可以把它当作一座桥梁来进行通讯。</li><li><p>特点：</p></li><li><ul><li><strong>响应式</strong> 只要数据修改了, 所有用到该数据的地方, 自动更新 (数据驱动)</li><li>操作更简洁, 逻辑清晰</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666687242234-bff4ee4c-7dc3-4fdb-9e50-57b54c288af2.png" alt="img"></p><h5 id="3-使用-Vuex"><a href="#3-使用-Vuex" class="headerlink" title="3. 使用 Vuex"></a>3. 使用 Vuex</h5><h6 id="1-创建空仓库"><a href="#1-创建空仓库" class="headerlink" title="(1) 创建空仓库"></a>(1) 创建空仓库</h6><p>由于现在vue官方在主推vue3 vue3各个版本的依赖是 vue3 + vue-router.4.x + vuex4.x  /  vue2 + vue-router3.x + vuex3.x</p><ul><li>安装 vuex, 与vue-router类似，vuex是一个独立存在的插件，如果脚手架初始化没有选 vuex，就需要额外安装。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex@<span class="number">3.6</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><ul><li>新建 store/index.js 专门存放 vuex</li></ul><p>​    为了维护项目目录的整洁，在src目录下新建一个store目录其下放置一个index.js文件。 (和 router/index.js 类似)</p><p><em>创建仓库 store/index.js</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 注册vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 创建空仓库</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">// 在state节点中定义共享数据，这个节点是个对象（写函数也可以，类似于组件中的data节点）</span></span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&#x27;hello vuex&#x27;</span>,</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出仓库（在main.js中挂载）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><ol><li>在 main.js 中导入挂载到 Vue 实例上</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. npm i vuex@3.6.2 或者 yarn add vuex@3.6.2</span></span><br><span class="line"><span class="comment">// 2. 在src目录下新建store/index.js</span></span><br><span class="line"><span class="comment">// 3. 在store/index.js创建一个空仓库</span></span><br><span class="line"><span class="comment">// 4. 导入并且挂载到vue实例上</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="2-语法"><a href="#2-语法" class="headerlink" title="(2) 语法"></a>(2) 语法</h6><blockquote><p>核心概念 - state 状态</p></blockquote><p><strong>存数据：</strong></p><p>State提供唯一的公共数据源，所有共享的数据都要统一放到Store中的State中存储。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666688522430-c835d2cf-0fc6-448f-bab7-7c334921ff8e.png" alt="img"></p><p><strong>拿数据：（两种方法）</strong></p><p>（1）插值表达式 ==&gt; 、</p><p><strong>注意：在差值表达式中可以直接写</strong><code>$store.state.xxx</code><strong>，但是如果想要在在下面的script标签中使用vuex的数据必须加上 this。例如：</strong><code>this.$store.state.num</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 组件访问vuex的数据 --&gt;</span><br><span class="line">    &lt;h1&gt;根组件 - &#123;&#123; $store.state.num &#125;&#125; - &#123;&#123; $store.state.str &#125;&#125; - &#123;&#123; $store.state.arr &#125;&#125; - &#123;&#123; $store.state.obj &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;add-item&gt;&lt;/add-item&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">        &lt;sub-item&gt;&lt;/sub-item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import AddItem from &#x27;./components/add-item.vue&#x27;</span><br><span class="line">  import SubItem from &#x27;./components/sub-item.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#x27;app&#x27;,</span><br><span class="line">    data: function () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      AddItem,</span><br><span class="line">      SubItem</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #app &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    border: 3px solid #ccc;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    padding: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666689631089-cf8c1234-b7e0-4c6e-995f-42f112a02476.png" alt="img"></p><p>（2）（辅助函数）mapState 映射计算属性 ==&gt; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 sub&lt;/h2&gt;</span><br><span class="line">    从vuex中获取的值: &lt;label&gt;&#123;&#123; num &#125;&#125; - &#123;&#123; str &#125;&#125; - &#123;&#123; arr &#125;&#125; - &#123;&#123; obj &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button&gt;值-1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// vuex提供了一些辅助函数，可以方便在组件中使用vuex共享的数据</span><br><span class="line">// mapState需要在计算属性中使用展开运算符处理</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;SubItem&#x27;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;num&#x27;, &#x27;str&#x27;, &#x27;arr&#x27;, &#x27;obj&#x27;]) // 相当于在此处帮我们定义了三个计算属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  border: 3px solid #ccc;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>一个小插曲：</strong></p><p>现在存拿都已经实现，但还想<strong>改数据</strong>，此时，直接在子组件中改数据是可以实现该需求的，也不会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 add&lt;/h2&gt;</span><br><span class="line">    从vuex中获取的值:&lt;label&gt;&#123;&#123; $store.state.num &#125;&#125; - &#123;&#123; $store.state.str &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;add1&quot;&gt;值+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.commit(&#x27;addN&#x27;, 10)&quot;&gt;值+n&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.dispatch(&#x27;waitAddOne&#x27;)&quot;&gt;异步+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.dispatch(&#x27;waitAddN&#x27;, 20)&quot;&gt;异步+N&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 触发mutation使用的是commit，触发action使用的是dispatch</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AddItem&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 在组件内部直接修改vuex中共享数据</span><br><span class="line">    add1() &#123;</span><br><span class="line">      // this.$store.state.num++</span><br><span class="line">      // 组件内触发vuex中的mutation</span><br><span class="line">      this.$store.commit(&#x27;addOne&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  border: 3px solid #ccc;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>但是上述操作是不对的，子组件直接修改父组件数据，违反单向数据流</strong></p><p>此时，就需要开启严格模式，监控此操作（严格模式只用于开发阶段）</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666691215597-ee22f5d6-3000-4a7a-aa83-997fd901e3b3.png" alt="img"></p><blockquote><p>核心概念 - mutations</p></blockquote><p><strong>state数据的修改只能通过mutations，并且mutations必须是同步的</strong></p><p>（1）改数据</p><p><strong>步骤：</strong></p><p><strong>第一步：在store里再定义一个mutations节点，写上方法</strong></p><p><strong>第二步：在要修改值的组件中调这个方法（记得在组件里定义一个方法，在方法里面调用mutations中的方法）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 注册vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 创建空仓库</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// 在state节点中定义共享数据，这个节点是个对象（写函数也可以，类似于组件中的data节点）</span></span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">str</span>: <span class="string">&#x27;hello vuex&#x27;</span>,</span><br><span class="line">    <span class="attr">arr</span>: [<span class="number">100</span>, <span class="number">8</span>, <span class="number">90</span>, <span class="number">28</span>, <span class="number">99</span>, <span class="number">60</span>, <span class="number">100</span>],</span><br><span class="line">    <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// mutations是修改共享数据的唯一节点(类似于组件中的methods节点)</span></span><br><span class="line">  <span class="comment">// mutations中的方法必须是同步函数</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// num + 1 的方法     参数1：state</span></span><br><span class="line">    <span class="title function_">addOne</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(store)</span><br><span class="line">      state.<span class="property">num</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// num + n 的方法     参数1：state  参数2：传递的参数   总共只能传两个参数，涉及到多个数据(数组或者对象包裹处理即可)</span></span><br><span class="line">    <span class="title function_">addN</span>(<span class="params">state, n</span>) &#123;</span><br><span class="line">      state.<span class="property">num</span> += n</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// num - 1 的方法</span></span><br><span class="line">    <span class="title function_">subOne</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">num</span> --</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// num - n 的方法</span></span><br><span class="line">    <span class="title function_">subN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">num</span> -= value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 赋值修改num属性</span></span><br><span class="line">    <span class="title function_">changeNum</span>(<span class="params">state, newNum</span>) &#123;</span><br><span class="line">      state.<span class="property">num</span> = newNum</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 开启严格模式，只要在组件内直接修改vuex中的数据直接报错，辅助我们及时发现错误，真正项目上线时，是不开的，只适合开发阶段使用</span></span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>  </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出仓库（在main.js中挂载）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>子组件 add<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    从vuex中获取的值:<span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123; $store.state.num &#125;&#125; - &#123;&#123; $store.state.str &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add1&quot;</span>&gt;</span>值+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;addN&#x27;, 10)&quot;</span>&gt;</span>值+n<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 触发mutation使用的是commit，触发action使用的是dispatch</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">name</span>: <span class="string">&#x27;AddItem&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 在组件内部直接修改vuex中共享数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">add1</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// this.$store.state.num++  错误写法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 组件内触发vuex中的mutation</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;addOne&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;css&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.box</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">400px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-tag">h2</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>（2）辅助函数mapMutations</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 sub&lt;/h2&gt;</span><br><span class="line">    从vuex中获取的值: &lt;label&gt;&#123;&#123; num &#125;&#125; - &#123;&#123; str &#125;&#125; - &#123;&#123; arr &#125;&#125; - &#123;&#123; obj &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;subOne&quot;&gt;值-1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subN(10)&quot;&gt;值-N&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// vuex提供了一些辅助函数，可以方便在组件中使用vuex共享的数据</span><br><span class="line">// mapState需要在计算属性中使用展开运算符处理</span><br><span class="line">// mapMutations这个辅助函数需要在methods节点中展开使用</span><br><span class="line">import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;SubItem&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 相当于在这个位置定义了两个方法</span><br><span class="line">    ...mapMutations([&#x27;subOne&#x27;, &#x27;subN&#x27;]),</span><br><span class="line">    // 相当于下面两个方法</span><br><span class="line">    // subOne()&#123;&#125;,</span><br><span class="line">    // subN()&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;num&#x27;, &#x27;str&#x27;, &#x27;arr&#x27;, &#x27;obj&#x27;]), // 相当于在此处帮我们定义了三个计算属性</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  border: 3px solid #ccc;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>但是请注意： Vuex中mutations中要求不能写异步代码，如果有异步的ajax请求，应该放置在actions中</p><blockquote><p>核心概念-actions</p></blockquote><p>state是存放数据的，mutations是同步更新数据 (便于监测数据的变化, 更新视图等, 方便于调试工具查看变化)，</p><p>actions则负责进行异步操作</p><p>actions使用步骤：</p><p>（1）actions是不能直接修改数据的，它是通过提交对应的mutations来达到操作异步代码的</p><p>（2）要触发actions，需要使用<code>$store.dispatch</code></p><p><em>触发mutations，使用的是<code>$store.commit</code></em></p><p><strong>actions辅助函数：mapActions（放在methods节点中展开使用）</strong></p><p>仓库store/index.js页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 导入vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 注册vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 创建空仓库</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">// 在state节点中定义共享数据，这个节点是个对象（写函数也可以，类似于组件中的data节点）</span></span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">num</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">str</span>: <span class="string">&#x27;hello vuex&#x27;</span>,</span><br><span class="line">        <span class="attr">arr</span>: [<span class="number">100</span>, <span class="number">8</span>, <span class="number">90</span>, <span class="number">28</span>, <span class="number">99</span>, <span class="number">60</span>, <span class="number">100</span>],</span><br><span class="line">        <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// mutations是修改共享数据的唯一节点(类似于组件中的methods节点)</span></span><br><span class="line">    <span class="comment">// mutations中的方法必须是同步函数</span></span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="comment">// num + 1 的方法     参数1：state</span></span><br><span class="line">        <span class="title function_">addOne</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(store)</span><br><span class="line">            state.<span class="property">num</span>++</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// num + n 的方法     参数1：state  参数2：传递的参数   总共只能传两个参数，涉及到多个数据(数组或者对象包裹处理即可)</span></span><br><span class="line">        <span class="title function_">addN</span>(<span class="params">state, n</span>) &#123;</span><br><span class="line">            state.<span class="property">num</span> += n</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// num - 1 的方法</span></span><br><span class="line">        <span class="title function_">subOne</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">num</span> --</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// num - n 的方法</span></span><br><span class="line">        <span class="title function_">subN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">            state.<span class="property">num</span> -= value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 赋值修改num属性</span></span><br><span class="line">        <span class="title function_">changeNum</span>(<span class="params">state, newNum</span>) &#123;</span><br><span class="line">            state.<span class="property">num</span> = newNum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 也是定义方法的节点，但是这个节点中定义的方法可以包含任意异步操作</span></span><br><span class="line">    <span class="comment">// actions中的方法不能直接变更状态(数据)，提交对应的mutations</span></span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="comment">// 异步 + 1</span></span><br><span class="line">        <span class="comment">// action中参数1是context，参数2是传递的参数</span></span><br><span class="line">        <span class="title function_">waitAddOne</span>(<span class="params">context</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(context)</span></span><br><span class="line">            <span class="comment">// console.log(this)</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// action中提交mutation，让对应的mutation修改状态</span></span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;addOne&#x27;</span>)</span><br><span class="line">            &#125;, <span class="number">3000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 异步+N</span></span><br><span class="line">        <span class="comment">// commit是从context中解构出来的</span></span><br><span class="line">        <span class="title function_">waitAddN</span>(<span class="params">&#123; commit &#125;, n</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;addN&#x27;</span>, n)</span><br><span class="line">            &#125;, <span class="number">2000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 异步 - 1</span></span><br><span class="line">        <span class="title function_">waitSubOne</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;subOne&#x27;</span>)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 异步 - n</span></span><br><span class="line">        <span class="title function_">waitSubN</span>(<span class="params">&#123; commit &#125;, n</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">commit</span>(<span class="string">&#x27;subN&#x27;</span>, n)</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 有时候需要基于state中的数据派生出一些新的数据(类似于组件中计算属性)</span></span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">filterList</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">arr</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt;= <span class="number">60</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 开启严格模式，只要在组件内直接修改vuex中的数据直接报错，辅助我们及时发现错误，真正项目上线时，是不开的，只适合开发阶段使用</span></span><br><span class="line">    <span class="attr">strict</span>: <span class="literal">true</span>  </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出仓库（在main.js中挂载）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>add-item组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 add&lt;/h2&gt;</span><br><span class="line">    从vuex中获取的值:&lt;label&gt;&#123;&#123; $store.state.num &#125;&#125; - &#123;&#123; $store.state.str &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;button @click=&quot;add1&quot;&gt;值+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.commit(&#x27;addN&#x27;, 10)&quot;&gt;值+n&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.dispatch(&#x27;waitAddOne&#x27;)&quot;&gt;异步+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.dispatch(&#x27;waitAddN&#x27;, 20)&quot;&gt;异步+N&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 触发mutation使用的是commit，触发action使用的是dispatch</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AddItem&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 在组件内部直接修改vuex中共享数据</span><br><span class="line">    add1() &#123;</span><br><span class="line">      // this.$store.state.num++  错误写法</span><br><span class="line">      // 组件内触发vuex中的mutation</span><br><span class="line">      this.$store.commit(&#x27;addOne&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  border: 3px solid #ccc;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>sub-item组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;h2&gt;子组件 sub&lt;/h2&gt;</span><br><span class="line">    从vuex中获取的值: &lt;label&gt;&#123;&#123; num &#125;&#125; - &#123;&#123; str &#125;&#125; - &#123;&#123; arr &#125;&#125; - &#123;&#123; obj &#125;&#125;&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;subOne&quot;&gt;值-1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;subN(10)&quot;&gt;值-N&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;waitSubOne&quot;&gt;异步-1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;waitSubN(0.1)&quot;&gt;异步-N&lt;/button&gt;</span><br><span class="line">    &lt;h5&gt;组件内使用getters&lt;/h5&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;&#123; $store.getters.filterList &#125;&#125; -- &#123;&#123; filterList &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// vuex提供了一些辅助函数，可以方便在组件中使用vuex共享的数据</span><br><span class="line">// mapState需要在计算属性中使用展开运算符处理</span><br><span class="line">// mapMutations这个辅助函数需要在methods节点中展开使用</span><br><span class="line">// mapGetters需要在计算属性中使用展开运算符处理</span><br><span class="line">// mapAction这个辅助函数需要在methods节点中展开使用</span><br><span class="line">import &#123; mapState, mapMutations, mapActions, mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;SubItem&#x27;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 相当于在这个位置定义了两个方法</span><br><span class="line">    ...mapMutations([&#x27;subOne&#x27;, &#x27;subN&#x27;]),</span><br><span class="line">    // 相当于下面两个方法</span><br><span class="line">    // subOne()&#123;&#125;,</span><br><span class="line">    // subN()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    ...mapActions([&#x27;waitSubOne&#x27;, &#x27;waitSubN&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState([&#x27;num&#x27;, &#x27;str&#x27;, &#x27;arr&#x27;, &#x27;obj&#x27;]), // 相当于在此处帮我们定义了三个计算属性</span><br><span class="line">    ...mapGetters([&#x27;filterList&#x27;])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;css&quot; scoped&gt;</span><br><span class="line">.box&#123;</span><br><span class="line">  border: 3px solid #ccc;</span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 组件访问vuex的数据 --&gt;</span><br><span class="line">    &lt;h1&gt;根组件 - &#123;&#123; $store.state.num &#125;&#125; - &#123;&#123; $store.state.str &#125;&#125; - &#123;&#123; $store.state.arr &#125;&#125; - &#123;&#123; $store.state.obj &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; :value=&quot;$store.state.num&quot; @input=&quot;changeValue&quot;&gt;</span><br><span class="line">    &lt;add-item&gt;&lt;/add-item&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;sub-item&gt;&lt;/sub-item&gt;</span><br><span class="line">    &lt;h5&gt;组件内使用getters&lt;/h5&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;&#123; $store.getters.filterList &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import AddItem from &#x27;./components/add-item.vue&#x27;</span><br><span class="line">import SubItem from &#x27;./components/sub-item.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;app&#x27;,</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    AddItem,</span><br><span class="line">    SubItem</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeValue(e) &#123;</span><br><span class="line">      console.log(&#x27;输入框的最新值是&#x27; + e.target.value)   // 这个值要同步给仓库中的num</span><br><span class="line">      this.$store.commit(&#x27;changeNum&#x27;, + e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  width: 600px;</span><br><span class="line">  margin: 20px auto;</span><br><span class="line">  border: 3px solid #ccc;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><blockquote><p>核心概念-getters</p></blockquote><p>除了state之外，有时我们还需要从state中派生出一些状态，这些状态是依赖state的，此时会用到getters</p><p>仓库index页面：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666702228725-7fde19d5-84df-4037-8ac8-0e8887bb4736.png" alt="img"></p><p>App组件：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/33569953/1666702337374-185fca35-2877-4ca9-a119-bb7dc196e0af.png" alt="img"></p><p>getters辅助函数：mapGetters（放在computed节点中展开使用）</p><p>注：getters具体代码参考上面actions</p><h5 id="4-模块-module-进阶拓展"><a href="#4-模块-module-进阶拓展" class="headerlink" title="4. 模块 module (进阶拓展)"></a>4. 模块 module (进阶拓展)</h5><p><strong>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。</strong></p><p>这句话的意思是，如果把所有的状态都放在state中，当项目变得越来越大的时候，Vuex会变得越来越难以维护</p><p>由此，又有了Vuex的模块化</p><h6 id="命名空间-namespaced"><a href="#命名空间-namespaced" class="headerlink" title="命名空间 namespaced"></a>命名空间 namespaced</h6><p>如果不同模块中出现相同名称的属性，此时想要修改，就会出现撞车，分辨不出修改的到底是哪个模块的东西，此时就需要开启命名空间，保证内部模块的高封闭性</p><p>怎么开启：<code>namespaced: true</code></p><p>需要注意，开启命名空间后，所有的辅助函数都会有问题</p><h6 id="拆分模块："><a href="#拆分模块：" class="headerlink" title="拆分模块："></a>拆分模块：</h6><p>文件详情：<code>store/index.js</code>、<code>store/modules/goods.js</code>、<code>store/modules/user.js</code>、<code>App.vue</code></p><p>store/index.js页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">  <span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line">  <span class="keyword">import</span> goods <span class="keyword">from</span> <span class="string">&#x27;./modules/goods&#x27;</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">  <span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">  <span class="comment">// 模块名：模块</span></span><br><span class="line">  <span class="comment">// user: user</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 简写</span></span><br><span class="line">  user,</span><br><span class="line">  goods</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">strict</span>: <span class="literal">true</span>  </span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 导出仓库（在main.js中挂载）</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 在store/modules文件夹</span></span><br><span class="line">  <span class="comment">// 2. 新建对应的模块js文件，每个模块中导出对象，都拥有自己的state,mutations,actions,getters</span></span><br><span class="line">  <span class="comment">// 3. 在store/index.js中导入并挂载到modules节点</span></span><br></pre></td></tr></table></figure><p>store/modules/user.js页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user模块，这个模块只维护关于用户相关的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">changesex</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">sex</span> = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>  <span class="comment">// 开启命名空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>store/modules/goods.js页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 商品模块，这个模块只维护关于商品相关的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;手表&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="string">&#x27;1800&#x27;</span>,</span><br><span class="line">    <span class="attr">sign</span>: <span class="string">&#x27;卡西欧&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = <span class="string">&#x27;手机&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addPrice</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">price</span> ++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>  <span class="comment">// 开启命名空间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>App.vue页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;访问模块的属性 $store.state.模块名.属性名&lt;/h2&gt;</span><br><span class="line">    &lt;span&gt; ---&#123;&#123; $store.state.user.name &#125;&#125;--- &lt;/span&gt;</span><br><span class="line">    &lt;span&gt; ---&#123;&#123; $store.state.goods.name &#125;&#125;--- &lt;/span&gt;</span><br><span class="line">    &lt;h2&gt;修改name&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 需求：点谁改谁 --&gt;</span><br><span class="line">    &lt;!-- 提交的mutation默认挂载到全局，它们会统一处理到一个方法中，导致撞车 --&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">      解决方式：在各个模块中开启命名空间</span><br><span class="line">      触发对应mutation需要 this.$store.commit(&#x27;模块名/mutation名)</span><br><span class="line">       --&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.commit(&#x27;user/changeName&#x27;)&quot;&gt;改user名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;$store.commit(&#x27;goods/changeName&#x27;)&quot;&gt;改goods名字&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- 使用辅助函数获取属性 --&gt;</span><br><span class="line">    &#123;&#123; name &#125;&#125; ---</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &#123;&#123; price &#125;&#125; &lt;button @click=&quot;addPrice&quot;&gt;加价格&lt;/button&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &#123;&#123; $store.state.user.sex &#125;&#125;</span><br><span class="line">    &lt;button @click=&quot;changeSex&quot;&gt;changeSex&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 开启命名空间后，所有的辅助函数都会有问题</span><br><span class="line">import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // ...mapState(&#x27;模块名&#x27;, [&#x27;属性名&#x27;])</span><br><span class="line">    // 辅助函数帮我们在这个位置定义了计算属性</span><br><span class="line">    ...mapState(&#x27;user&#x27;, [&#x27;name&#x27;]),</span><br><span class="line">    // ...mapState(&#x27;goods&#x27;, [&#x27;name&#x27;]),  会覆盖</span><br><span class="line">    ...mapState(&#x27;goods&#x27;, [&#x27;price&#x27;])</span><br><span class="line">    // ...mapGetters(&#x27;模块名&#x27;, [&#x27;getter名&#x27;])</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // ...mapMutations(&#x27;模块名&#x27;, [&#x27;mutation名&#x27;])</span><br><span class="line">    // ...mapActions(&#x27;模块名&#x27;, [&#x27;action名&#x27;])</span><br><span class="line">    ...mapMutations(&#x27;goods&#x27;, [&#x27;addPrice&#x27;]),</span><br><span class="line">    // 不使用辅助函数写法</span><br><span class="line">    changeSex() &#123;</span><br><span class="line">      this.$store.commit(&#x27;user/changesex&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 建议：辅助函数知道有就可以，开发中我们使用原始的写法，后面项目中会复习用到</span><br><span class="line">  // 因为vue3中，没有辅助函数</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-3"><a href="#Vue-3" class="headerlink" title="Vue 3"></a>Vue 3</h3><h4 id="一、Vue-3-动机和新特性"><a href="#一、Vue-3-动机和新特性" class="headerlink" title="一、Vue 3 动机和新特性"></a>一、Vue 3 动机和新特性</h4><p>Vue3 设计理念  <a href="https://vue3js.cn/vue-composition/">https://vue3js.cn/vue-composition/</a>   </p><p>动机与目的: </p><ol><li><p>更好的逻辑复用 与  代码组织  (composition组合式api) </p><p>optionsAPI(旧) =&gt; compositionAPI（新）,   效果: 代码组织更方便了, 逻辑复用更方便了   非常利于维护!!</p></li><li><p>更好的类型推导 (typescript支持)</p><p>vue3 源码用 ts 重写了, vue3 对 ts 的支持更友好了  (ts  可以让代码更加稳定, 类型检测! )</p></li></ol><p>vue3新特性：</p><ol><li><p>数据响应式原理重新实现  (ES6 proxy 替代了 ES5 的 Object.defineProperty) </p><p>解决了: 例如数组的更新检测等bug, 大大优化了响应式监听的性能  </p><p>(原来检测对象属性的变化, 需要一个个对属性递归监听)  <strong>proxy 可以直接对整个对象劫持</strong></p></li><li><p>虚拟DOM - 新算法 (更快 更小)</p></li><li><p><strong>提供了composition api, 可以更好的逻辑复用</strong></p></li><li><p>模板可以有多个根元素</p></li><li><p>源码用 typescript 重写, 有更好的类型推导 (类型检测更为严格, 更稳定)</p><p>…</p></li></ol><p><strong>小结： vue3 性能更高, 体积更小,  更利于复用, 代码维护更方便</strong></p><h4 id="二、Vite"><a href="#二、Vite" class="headerlink" title="二、Vite"></a>二、Vite</h4><p>基本使用：</p><p>使用vite创建项目：<code>npm create vite / yarn create vite</code></p><p><strong>vite快捷使用</strong></p><p>如果想要快速创建一个 vue3 项目，可以使用如下命令</p><ul><li>创建普通 vue 项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite vite-demo --template vue</span><br></pre></td></tr></table></figure><ul><li>创建基于 ts 模板的项目</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn create vite vite-demo-ts --template vue-ts</span><br></pre></td></tr></table></figure><h4 id="三、composition-API-vs-options-API"><a href="#三、composition-API-vs-options-API" class="headerlink" title="三、composition API vs options API"></a>三、composition API vs options API</h4><ol><li><p>vue2 采用的就是 <code>optionsAPI</code></p><p>(1) 优点:<strong><code>易于学习和使用</code></strong>, 每个代码有着明确的位置 (例如: 数据放 data 中, 方法放 methods中)</p><p>(2) 缺点:  相似的逻辑, 不容易复用, 在大项目中尤为明显</p><p>(3) 虽然 optionsAPI 可以通过mixins 提取相同的逻辑, 但是也并不是特别好维护</p></li><li><p>vue3 新增的就是 <code>compositionAPI</code></p><p>(1) compositionAPI 是基于  <strong>逻辑功能</strong>  组织代码的, 一个功能 api 相关放到一起</p><p>(2) 即使项目大了, 功能多了, 也能快速定位功能相关的 api</p><p>(3) 大大的提升了 <code>代码可读性</code> 和 <code>可维护性</code></p></li><li><p>vue3 推荐使用 composition API, 也保留了options API</p><p>即就算不用composition API, 用 vue2 的写法也完全兼容!!</p></li></ol><h4 id="四、setup-函数"><a href="#四、setup-函数" class="headerlink" title="四、setup 函数"></a>四、setup 函数</h4><p>composition api的使用, 需要配置一个setup 函数</p><ol><li>setup 函数是一个新的组件选项, 作为组件中 compositionAPI 的起点</li><li>从生命周期角度来看, setup 会在 beforeCreate 钩子函数之前执行</li><li><strong>setup 中不能使用 this, this 指向 undefined</strong> </li><li>在模版中需要使用的数据和函数，需要在 <code>setup</code> 返回。</li></ol><h4 id="五、reactive-函数"><a href="#五、reactive-函数" class="headerlink" title="五、reactive 函数"></a>五、reactive 函数</h4><p><strong>前置说明:</strong> </p><ol><li>setup 需要有返回值, 只有返回的值才能在模板中使用</li><li>默认普通的数据, 不是响应式的</li></ol><p><strong>作用: 传入一个复杂数据类型，将复杂类型数据, 转换成响应式数据 （返回该对象的响应式代理）</strong></p><p><strong>总结：</strong> 通常是用来定义响应式 <strong>对象数据</strong></p><h4 id="六、ref-函数"><a href="#六、ref-函数" class="headerlink" title="六、ref 函数"></a>六、ref 函数</h4><p>reactive 处理的数据, 必须是复杂类型,  如果是简单类型无法处理成响应式, 所以有 ref 函数!</p><p>作用: 对传入的数据（一般简单数据类型），包裹一层对象,  转换成响应式。</p><ol><li>ref 函数接收一个的值, 返回一个ref 响应式对象,  有唯一的属性 value</li><li>在 setup 函数中, 通过 ref 对象的 value 属性, 可以访问到值</li><li>在模板中, ref 属性会自动解套, 不需要额外的 .value</li><li>ref函数也支持传入复杂类型，传入复杂类型，也会做响应式处理</li></ol><p>ref 和 reactive 的最佳使用方式： </p><ul><li><strong>明确的对象，明确的属性，用 reactive，其他用 ref</strong></li><li>从vue3.2之后，更推荐使用ref</li></ul><h4 id="七、script-setup语法"><a href="#七、script-setup语法" class="headerlink" title="七、script setup语法"></a>七、script setup语法</h4><blockquote><p>script setup是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。相比于普通的 script 语法更加简洁</p></blockquote><p>要使用这个语法，需要将 <code>setup</code> attribute 添加到 <code>&lt;script&gt;</code> 代码块上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">console.log(&#x27;hello script setup&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>顶层的绑定会自动暴露给模板，所以定义的变量，函数和 import 导入的内容都可以直接在模板中直接使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>根组件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>点击次数：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点击修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  count.<span class="property">value</span>++</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="八、计算属性-computed-函数"><a href="#八、计算属性-computed-函数" class="headerlink" title="八、计算属性 computed 函数"></a>八、计算属性 computed 函数</h4><p>computed 函数调用时, 要接收一个处理函数, 处理函数中, 需要返回计算属性的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; computed, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const age = ref(28)</span><br><span class="line">// vue3中计算属性是函数</span><br><span class="line">const nextAge = computed(() =&gt; &#123;</span><br><span class="line">  return +age.value + 1</span><br><span class="line">&#125;)</span><br><span class="line">// 计算属性默认是只读的，如果需要修改计算属性，需要写成完整写法</span><br><span class="line">// const beforeAge = computed(() =&gt; &#123;</span><br><span class="line">//   return +age.value - 1</span><br><span class="line">// &#125;)</span><br><span class="line">const beforeAge = computed(&#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    return age.value - 1</span><br><span class="line">  &#125;,</span><br><span class="line">  set(val) &#123;</span><br><span class="line">    // console.log(val) // 修改计算属性后的值</span><br><span class="line">    age.value = +val + 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;去年的年纪：&lt;input type=&quot;text&quot; v-model=&quot;beforeAge&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;今年年纪：&lt;input type=&quot;text&quot; v-model=&quot;age&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;明年年纪：&#123;&#123; nextAge &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="九、侦听器-watch-函数"><a href="#九、侦听器-watch-函数" class="headerlink" title="九、侦听器 watch 函数"></a>九、侦听器 watch 函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, ref, watch &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 侦听器</span><br><span class="line">// watch(参数1，参数2，参数3)</span><br><span class="line">// 参数1 是侦听的数据</span><br><span class="line">// 参数2 是回调函数 侦听的数据发生的变化，会触发函数 函数可以获取到最新的值</span><br><span class="line">// 参数3 是一个配置对象 立即侦听 深度侦听 immediate: true  deep: true</span><br><span class="line">const money = ref(99)</span><br><span class="line">const cutMoney = () =&gt; &#123;</span><br><span class="line">  money.value--</span><br><span class="line">&#125;</span><br><span class="line">// watch(money, (newVal, oldVal) =&gt; &#123;</span><br><span class="line">//   console.log(&#x27;花钱了&#x27;, newVal)</span><br><span class="line">//   // console.log(newVal, oldVal)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">const num = ref(888)</span><br><span class="line">const changeNum = () =&gt; &#123;</span><br><span class="line">  num.value++</span><br><span class="line">&#125;</span><br><span class="line">// watch(num, (newVal) =&gt; &#123;</span><br><span class="line">//   console.log(&#x27;数字增加&#x27;, newVal)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// 侦听多个属性的变化：不论num变了，还是money变了,都要输出，有数据发生变化了</span><br><span class="line">watch([money, num], (values) =&gt; &#123; // values是监听的所有数据的结果，包含在一个数组中</span><br><span class="line">  console.log(&#x27;数据都变化了&#x27;, values)</span><br><span class="line">  // const [a, b] = values</span><br><span class="line">  // console.log(a, b)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&#x27;-----------------------------------------&#x27;)</span><br><span class="line">// 侦听复杂数据类型</span><br><span class="line">const person = ref(&#123; // 侦听器 默认侦听复杂数据类型的地址是否发生变化，因此用ref的情况下需要加深度监听</span><br><span class="line">  name: &#x27;阿涛&#x27;,</span><br><span class="line">  age: 19</span><br><span class="line">&#125;)</span><br><span class="line">const addAge = () =&gt; &#123;</span><br><span class="line">  person.value.age++</span><br><span class="line">&#125;</span><br><span class="line">watch(person, (newVal) =&gt; &#123;</span><br><span class="line">  console.log(newVal)</span><br><span class="line">&#125;, &#123;deep: true, immediate: true&#125;)</span><br><span class="line"></span><br><span class="line">// 侦听复杂数据类型的某个属性是否发生变化  需要使用箭头函数处理 固定写法</span><br><span class="line">watch(() =&gt; person.value.age, (newVal) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;最新的年龄是&#x27; + newVal)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; money &#125;&#125; &lt;button @click=&quot;cutMoney&quot;&gt;花钱&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; num &#125;&#125; &lt;button @click=&quot;changeNum&quot;&gt;改数字&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person &#125;&#125; &lt;button @click=&quot;addAge&quot;&gt;加年龄&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="watchEffect的使用"><a href="#watchEffect的使用" class="headerlink" title="watchEffect的使用"></a>watchEffect的使用</h5><blockquote><p>使用watchEffect监听路由的变化</p><p>参考文档：<a href="https://staging-cn.vuejs.org/guide/essentials/watchers.html#watcheffect">https://staging-cn.vuejs.org/guide/essentials/watchers.html#watcheffect</a></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 只有是一级分类的情况下，才发送这个请求</span></span><br><span class="line">  <span class="comment">// console.log(route.fullPath)</span></span><br><span class="line">  <span class="keyword">const</span> id = route.<span class="property">params</span>.<span class="property">id</span> <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">  <span class="comment">// console.log(route.fullPath, &#x27;=====&#x27;, `/category/$&#123;id&#125;`)</span></span><br><span class="line">  <span class="keyword">if</span> (route.<span class="property">fullPath</span> === <span class="string">`/category/<span class="subst">$&#123;id&#125;</span>`</span>) &#123;</span><br><span class="line">    category.<span class="title function_">getTopCategory</span>(id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>watch</code> vs. <code>watchEffect</code><a href="https://staging-cn.vuejs.org/guide/essentials/watchers.html#watch-vs-watcheffect">#</a></p><p><code>watch</code> 和 <code>watchEffect</code> 都给我们提供了创建副作用的能力。它们之间的主要区别是追踪响应式依赖的方式：</p><ul><li><code>watch</code> 只跟踪明确监视的源。它不会跟踪任何在回调中访问到的东西。另外，回调仅会在源确实改变了才会被触发，<code>watch</code> 将依赖追踪和副作用区分开，这让我们对如何触发回调有更多的控制权。</li><li>而 <code>watchEffect</code> 则将依赖追踪和副作用耦合，会自动追踪其同步执行过程中访问到的所有响应式属性。这更方便，一般来说代码也会更简洁，但其响应性依赖关系则不那么显式。</li></ul><h4 id="十、钩子函数"><a href="#十、钩子函数" class="headerlink" title="十、钩子函数"></a>十、钩子函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// vue3中 钩子函数有些改动</span><br><span class="line">// beforeCreate 和 created 两个钩子函数 ==&gt; setup函数</span><br><span class="line">// beforeMount/mounted//beforedUpdate/updated 这四个钩子 ==&gt; 加前缀on  onXXXX</span><br><span class="line">// beforeDestroy ==&gt; onBeforeUnmount</span><br><span class="line">// destroyed ==&gt; onUnmounted</span><br><span class="line"></span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">console.log(document.querySelector(&#x27;h1&#x27;))</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(document.querySelector(&#x27;h1&#x27;))</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;我是标题&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20220213225003030.png" alt="image-20220213225003030"></p><h4 id="十一、组件通信"><a href="#十一、组件通信" class="headerlink" title="十一、组件通信"></a>十一、组件通信</h4><h5 id="1-父传子-1"><a href="#1-父传子-1" class="headerlink" title="1. 父传子"></a>1. 父传子</h5><blockquote><p>目标：能够实现组件通讯中的父传子组件通讯</p></blockquote><p>步骤： </p><p>(1) 父组件提供数据</p><p>(2) 父组件将数据传递给子组件</p><p>(3) 子组件通过defineProps进行接收</p><p>(4) 子组件渲染父组件传递的数据</p><p><strong>核心代码</strong></p><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// vue3中子组件导入后直接使用</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">const money = ref(100)</span><br><span class="line">// 父传子</span><br><span class="line">//  1. :属性绑定给子组件</span><br><span class="line">//  2. 子组件defineProps接收</span><br><span class="line">//  3. 子组件使用</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border: 3px solid #ccc; padding: 10px;&quot;&gt;我是父组件</span><br><span class="line">    &lt;Son :money=&quot;money&quot;&gt;&lt;/Son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 子组件defineProps接收</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    money: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(props.money)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border: 3px solid #ccc; padding: 10px;&quot;&gt;我是子组件 - &#123;&#123; money &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>注：如果使用defineProps接收数据，这个数据只能在模板中渲染，如果想要在script中也操作props属性，应该接收返回值。</p><h5 id="2-子传父-1"><a href="#2-子传父-1" class="headerlink" title="2. 子传父"></a>2. 子传父</h5><blockquote><p>目标：能够实现组件通讯中的子传父</p></blockquote><p><strong>步骤：</strong></p><p>(1) 子组件通过defineEmit获取emit对象（因为没有this)</p><p>(2) 子组件通过emit触发事件，并且传递数据</p><p>(3) 父组件提供方法</p><p>(4) 父组件通过自定义事件的方式给子组件注册事件</p><p><strong>核心代码</strong></p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 子组件defineProps接收</span><br><span class="line">  const props = defineProps(&#123;</span><br><span class="line">    money: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(props.money)</span><br><span class="line">  // 子传父</span><br><span class="line">  //  1. 子组件绑定事件</span><br><span class="line">  //  2. 子组件通知父组件 </span><br><span class="line">  //    2.1 const emits = defineEmits([&#x27;自定义事件类型&#x27;])</span><br><span class="line">  //    2.2 发射 emits(&#x27;自定义事件类型&#x27;, 参数)</span><br><span class="line">  //  3. 父组件绑定自定义事件</span><br><span class="line">  const emits = defineEmits([&#x27;cutMoney&#x27;])</span><br><span class="line">  const cutMoneyFn = () =&gt; &#123;</span><br><span class="line">    emits(&#x27;cutMoney&#x27;, 5)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border: 3px solid #ccc; padding: 10px;&quot;&gt;我是子组件 - &#123;&#123; money &#125;&#125; &lt;button @click=&quot;cutMoneyFn&quot;&gt;花钱&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// vue3中子组件导入后直接使用</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">const money = ref(100)</span><br><span class="line">// 父传子</span><br><span class="line">//  1. :属性绑定给子组件</span><br><span class="line">//  2. 子组件defineProps接收</span><br><span class="line">//  3. 子组件使用</span><br><span class="line">const cutMoney = (n) =&gt; &#123;</span><br><span class="line">  money.value -= n</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border: 3px solid #ccc; padding: 10px;&quot;&gt;我是父组件</span><br><span class="line">    &lt;Son :money=&quot;money&quot; @cutMoney=&quot;cutMoney&quot;&gt;&lt;/Son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="3-依赖注入-provide-和-inject"><a href="#3-依赖注入-provide-和-inject" class="headerlink" title="3. 依赖注入 - provide 和 inject"></a>3. 依赖注入 - provide 和 inject</h5><p>依赖注入, 可以非常方便的实现 跨层级的 组件通信</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20220213110153307.png" alt="image-20220213110153307"></p><p><strong>核心代码</strong></p><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">const baby = ref(&#x27;金条&#x27;)</span><br><span class="line">// 在父组件中暴露出去</span><br><span class="line">// 在父组件中不仅能暴露数据 还可以暴露方法</span><br><span class="line">provide(&#x27;baby&#x27;, baby)</span><br><span class="line">const handleChange = (val) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;父组件的处理函数&#x27;, val)</span><br><span class="line">  baby.value = val</span><br><span class="line">&#125;</span><br><span class="line">provide(&#x27;handleChange&#x27;, handleChange)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border: 3px solid #ccc; padding: 10px;&quot;&gt;</span><br><span class="line">    我是父组件</span><br><span class="line">    &lt;Son&gt;&lt;/Son&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>子孙组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 子孙后代组件 可以 inject 直接访问到祖先组件暴露的数据</span><br><span class="line">const baby = inject(&#x27;baby&#x27;)</span><br><span class="line">const handleChange = inject(&#x27;handleChange&#x27;)</span><br><span class="line">const changeMoney = () =&gt; &#123;</span><br><span class="line">  handleChange(&#x27;100w&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;border: 3px solid #ccc; padding: 10px;&quot;&gt;</span><br><span class="line">    我是孙子组件--&#123;&#123; baby &#125;&#125; &lt;button @click=&quot;changeMoney&quot;&gt;金条换钱&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 依赖注入的使用场景：跨层级组件通信的时候</span><br><span class="line">        父组件暴露 provide</span><br><span class="line">        子孙组件 负责接收 inject</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h4 id="十二、模板中-ref-的使用"><a href="#十二、模板中-ref-的使用" class="headerlink" title="十二、模板中 ref 的使用"></a>十二、模板中 ref 的使用</h4><p>联想之前的 ref 和 $refs， 获取模板的元素（dom元素，组件）</p><p>1 创建 ref =&gt;  <code>const hRef = ref(null)</code></p><p>2 模板中建立关联  =&gt;  <code>&lt;h1 ref=&quot;hRef&quot;&gt;钩子函数-----123&lt;/h1&gt;</code></p><p>3 使用 =&gt; <code>hRef.value</code></p><p><strong>核心代码</strong></p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">const sayHi = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;大家好，我是子组件的方法&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">const sing = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;我会唱歌&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">const num = 100</span><br><span class="line"></span><br><span class="line">// 如果子组件的方法 允许被父组件通过ref的方式调用</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  sayHi, // 将sayHi方法暴露</span><br><span class="line">  sing, // 将sing方法暴露</span><br><span class="line">  num</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">// defineProps  // 父传子 子组件接收</span><br><span class="line">// defineEmits  // 子传父 定义自定义事件</span><br><span class="line">// provide  // 组件暴露数据，子孙组件访问祖先组件的数据</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是子组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 还通过ref+组件 调用组件的方法</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Son from &#x27;./Son.vue&#x27;</span><br><span class="line">// Son组件中有一个方法，点击按钮执行Son组件中的方法</span><br><span class="line">// 1. 创建一个空的Ref对象</span><br><span class="line">// 2. 模板结构关联</span><br><span class="line">// 3. 使用</span><br><span class="line">const sonRef = ref(null)</span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  console.log(sonRef.value) // Son组件</span><br><span class="line">  sonRef.value.sayHi() // 获取到Son子组件并调用子组件sayHi方法</span><br><span class="line">  sonRef.value.sing()</span><br><span class="line">  console.log(sonRef.value.num)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Son ref=&quot;sonRef&quot;&gt;&lt;/Son&gt;</span><br><span class="line">  &lt;button @click=&quot;handleClick&quot;&gt;提交表单&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="十四、vue3-中废弃了过滤器"><a href="#十四、vue3-中废弃了过滤器" class="headerlink" title="十四、vue3 中废弃了过滤器"></a>十四、vue3 中废弃了过滤器</h4><blockquote><p>vue3.0中不能使用过滤器，直接使用函数进行替代</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// vue3中废弃了过滤器，推荐使用函数来处理</span><br><span class="line">// 废弃了 .sync修饰符</span><br><span class="line">// 废除了eventbus 依赖注入</span><br><span class="line">// 废弃了vuex的辅助函数</span><br><span class="line">import dayjs from &#x27;dayjs&#x27;</span><br><span class="line">const date = new Date()</span><br><span class="line">// 处理日期格式的函数</span><br><span class="line">const formatTime = (time) =&gt; &#123;</span><br><span class="line">  return dayjs(time).format(&#x27;YYYY-MM-DD&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &#123;&#123; date &#125;&#125;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &#123;&#123; formatTime(date) &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="十五、toRefs-函数"><a href="#十五、toRefs-函数" class="headerlink" title="十五、toRefs 函数"></a>十五、toRefs 函数</h4><p><strong>使用场景: 如果对一个响应数据, 进行解构 或者 展开, 会丢失他的响应式特性!</strong>  </p><p>原因: vue3 底层是对 对象 进行监听劫持</p><p>作用: 对一个响应式对象的所有内部属性, 都做响应式处理</p><ol><li>reactive/ref的响应式功能是赋值给对象的, 如果给对象解构或者展开, 会让数据丢失响应式的能力</li><li><strong>使用 toRefs 可以保证该对象展开的每个属性都是响应式的</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 如果对一个响应数据, 进行解构 或者 展开, 会丢失他的响应式特性</span><br><span class="line"></span><br><span class="line">import &#123; ref, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">// 解决方案：1. 不解构不展开    2. toRefs方法</span><br><span class="line">const person = ref(&#123;</span><br><span class="line">  name: &#x27;zs&#x27;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;)</span><br><span class="line">// 解构person对象后，导致person对象中的属性不再是响应式的了</span><br><span class="line">// toRefs保证解构出来的属性也是响应式的</span><br><span class="line">let &#123; name, age &#125; = toRefs(person.value)</span><br><span class="line">// 改姓名的方法</span><br><span class="line">const changeName = () =&gt; &#123;</span><br><span class="line">  name.value = &#x27;lisi&#x27;</span><br><span class="line">&#125;</span><br><span class="line">// 改年龄的方法</span><br><span class="line">const changeAge = () =&gt; &#123;</span><br><span class="line">  age.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeName&quot;&gt;改姓名&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;changeAge&quot;&gt;改年龄&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="十六、Vue-Router4"><a href="#十六、Vue-Router4" class="headerlink" title="十六、Vue-Router4"></a>十六、Vue-Router4</h4><blockquote><p>vue升级vue3之后，配套的vue-router也升级为vue-router@4.x版本  </p><p>vue-router4的语法和3的版本语法基本一致，但是有一些细微的修改。</p><p>vue2 和 vue3 使用 Vue-Router 和 Vuex 版本的规范</p><p>vue@2 + vue-router@3 + vuex@3   options api</p><p>vue@3 + vue-router@4 + vuex@4    composition api</p></blockquote><h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h5><p>(0) 安装vue-router</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vue-router</span><br></pre></td></tr></table></figure><p>(1) 创建组件 Home.vue 和 Login.vue</p><p>(2) 创建文件<code>router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2使用路由</span></span><br><span class="line"><span class="comment">// import vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// Vue.use(VueRouter)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3全部都是函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHashHistory, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span></span><br><span class="line"><span class="comment">// 创建路由实例并配置路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// history: createWebHashHistory(), // hash模式 路由地址 带#</span></span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(), <span class="comment">// 历史模式 路由地址 不带#</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/home.vue&#x27;</span>) &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/login.vue&#x27;</span>) &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导出路由实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>（3）在main.js中引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index.js&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// .use(store)</span></span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue2配置路由</span></span><br><span class="line"><span class="comment">// 1. 安装 npm i vue-router / yarn add vue-router</span></span><br><span class="line"><span class="comment">// 2. router/index.js</span></span><br><span class="line"><span class="comment">// 3. 创建路由实例 并配置路由规则 导出路由实例</span></span><br><span class="line"><span class="comment">// 4. 创建对应路由规则的组件</span></span><br><span class="line"><span class="comment">// 5. main.js 导入路由 并且 挂载到vue实例上</span></span><br><span class="line"><span class="comment">// 6. 准备路由的出口/声明式导航链接</span></span><br></pre></td></tr></table></figure><p>(4) App.vue中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt; &amp;nbsp</span><br><span class="line">  &lt;router-link to=&quot;/login&quot;&gt;登录页&lt;/router-link&gt;</span><br><span class="line">  &lt;!-- 路由出口 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>(5) 在 Home.vue 页面使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useRouter, useRoute &#125; from &#x27;vue-router&#x27;</span><br><span class="line">// vue2 this.$router.push()  </span><br><span class="line">// vue3 调用useRouter() 得到一个路由实例</span><br><span class="line">// useRoute() 调用得到的是一个路由信息对象</span><br><span class="line">const router = useRouter()</span><br><span class="line">const route = useRoute()</span><br><span class="line">console.log(route.path)</span><br><span class="line">console.log(route.query)</span><br><span class="line">const goLogin = () =&gt; &#123;</span><br><span class="line">  router.push(&#x27;/login&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;home组件&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;goLogin&quot;&gt;去登录&lt;/button&gt;</span><br><span class="line">  &lt;!-- 在vue3中 模板结构和vue2写法没啥变化 vue3是兼容vue2代码的 --&gt;</span><br><span class="line">  &lt;button @click=&quot;$router.push(&#x27;/login&#x27;)&quot;&gt;去登录2&lt;/button&gt;</span><br><span class="line">  &#123;&#123; $route.query &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="十七、Vuex"><a href="#十七、Vuex" class="headerlink" title="十七、Vuex"></a>十七、Vuex</h4><h5 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h5><p>(1) 安装依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure><p>(2) 创建文件 store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建仓库并导出</span></span><br><span class="line"><span class="comment">// 1. 导入创建仓库的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span></span><br><span class="line"><span class="comment">// 2. 创建仓库</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="comment">// vuex4.x推荐 state是一个函数 return一个对象</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">car</span>: <span class="string">&#x27;小蚂蚁&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; ,</span><br><span class="line">  <span class="comment">// 更改状态唯一节点，只能写同步代码</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">changeCar</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">car</span> = <span class="string">&#x27;小黄车&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 可以包含任何异步代码，不能直接变更状态</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">waitChange</span>(<span class="params">context</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        context.<span class="title function_">commit</span>(<span class="string">&#x27;changeCar&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 基于state中的数据派生出的新状态（计算属性）</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 模块挂载</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 导出仓库</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3) 在main.js中关联store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index.js&#x27;</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">.<span class="title function_">use</span>(store)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex使用</span></span><br><span class="line"><span class="comment">// 1. 安装 npm i vuex / yarn add vuex</span></span><br><span class="line"><span class="comment">// 2. store/index.js</span></span><br><span class="line"><span class="comment">// 3. 创建仓库并导出 state mutations action getter</span></span><br><span class="line"><span class="comment">// 4. main.js挂载仓库</span></span><br></pre></td></tr></table></figure><p>(4) 在组件中使用 Vuex 中的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// console.log(this.$store.state.car) // vue2写法</span><br><span class="line">// vue4.x 版本没有辅助函数了</span><br><span class="line">// 导入 useStore 方法 调用</span><br><span class="line">import &#123; useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">const store = useStore()</span><br><span class="line">console.log(store.state.car)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;Appzujian &lt;/h1&gt;</span><br><span class="line">  &lt;!-- 模板结构中和vue2书写变化不大 vue3向下兼容vue2代码 --&gt;</span><br><span class="line">  &#123;&#123; store.state.car &#125;&#125; &lt;button @click=&quot;store.commit(&#x27;changeCar&#x27;)&quot;&gt;change&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;store.dispatch(&#x27;waitChange&#x27;)&quot;&gt;waitChange&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：vuex4 在vue3项目中能用，但是不好用</strong></p><h4 id="十八、Pinia"><a href="#十八、Pinia" class="headerlink" title="十八、Pinia"></a>十八、Pinia</h4><blockquote><p>Pinia 是 Vue.js 的轻量级状态管理库</p></blockquote><p>官方网站：<a href="https://pinia.vuejs.org/">https://pinia.vuejs.org/</a></p><p>为什么学习 pinia ?  </p><ul><li>pinia 和 vuex4 一样，也是 vue 官方的状态管理工具(作者是 Vue 核心团队成员）</li><li>pinia 相比 vuex4，对于 vue3 的兼容性更好</li><li>pinia 相比 vuex4，具备完善的类型推荐</li><li>pinia 同样支持 vue 开发者工具,最新的开发者工具对 vuex4 支持不好</li><li><strong>Pinia</strong> 的 API 设计非常接近 <code>Vuex 5</code> 的<a href="https://link.segmentfault.com/?enc=bzgtx6D37f7ZjuOSGfXM2g%3D%3D.Anbb%2BsTaBijhbf0botKHz0NRal7UrociDtXE3qxoLjZTZb9eHUphdj1aeU96KLV8IczFvQ74HSuMxmKZ6I3R5acIrZrKY8I4FBi6G%2Bufe10A%2FkNDziBeRY8hkZ1bnN8x">提案</a>。</li></ul><p>pinia核心概念</p><ul><li>state: 状态</li><li>actions: 修改状态（包括同步和异步，pinia 中没有 mutations）</li><li>getters: 计算属性</li></ul><h5 id="1-actions的使用"><a href="#1-actions的使用" class="headerlink" title="1. actions的使用"></a>1. actions的使用</h5><blockquote><p>目标：掌握pinia中actions的使用</p></blockquote><p>在pinia中没有 mutations，只有actions，不管是同步还是异步的代码，都可以在 actions中完成。</p><p>（1）在 actions 中提供方法并且修改数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 1. 创建store</span></span><br><span class="line"><span class="comment">// 参数1：store的唯一表示</span></span><br><span class="line"><span class="comment">// 参数2：对象，可以提供state actions getters</span></span><br><span class="line"><span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounterStore</span><br></pre></td></tr></table></figure><p>（2）在组件中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import useCounterStore from &#x27;./store/counter&#x27;</span><br><span class="line"></span><br><span class="line">const counter = useCounterStore()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;根组件---&#123;&#123; counter.count &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;button @click=&quot;counter.increment&quot;&gt;加1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;counter.incrementAsync&quot;&gt;异步加1&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="2-getters的使用"><a href="#2-getters的使用" class="headerlink" title="2. getters的使用"></a>2. getters的使用</h5><blockquote><p>pinia中的getters和vuex中的基本是一样的，也带有缓存的功能</p></blockquote><p>（1）在getters中提供计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 1. 创建store</span></span><br><span class="line"><span class="comment">// 参数1：store的唯一表示</span></span><br><span class="line"><span class="comment">// 参数2：对象，可以提供state actions getters</span></span><br><span class="line"><span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">double</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounterStore</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2)在组件中使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;根组件---&#123;&#123; counter.count &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123; counter.double &#125;&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure><h5 id="3-storeToRefs的使用"><a href="#3-storeToRefs的使用" class="headerlink" title="3. storeToRefs的使用"></a>3. storeToRefs的使用</h5><blockquote><p>目标：掌握storeToRefs的使用</p></blockquote><p>如果直接从pinia中解构数据，会丢失响应式， 使用 storeToRefs 可以保证解构出来的数据也是响应式的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> useCounterStore <span class="keyword">from</span> <span class="string">&#x27;./store/counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useCounterStore</span>()</span><br><span class="line"><span class="comment">// 如果直接从pinia中解构数据，会丢失响应式</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, double &#125; = counter</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用storeToRefs可以保证解构出来的数据也是响应式的</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, double &#125; = <span class="title function_">storeToRefs</span>(counter)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="4-pinia模块化"><a href="#4-pinia模块化" class="headerlink" title="4. pinia模块化"></a>4. pinia模块化</h5><blockquote><p>在复杂项目中，不可能吧多个模块的数据都定义到一个store中，一般来说会一个模块对应一个store，最后通过一个根store进行整合</p></blockquote><p>(1) 新建store/user.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useUserStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUserStore</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(2) 新建store/index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> useUserStore <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> useCounterStore <span class="keyword">from</span> <span class="string">&#x27;./counter&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一导出useStore方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="title function_">useUserStore</span>(),</span><br><span class="line">    <span class="attr">counter</span>: <span class="title function_">useCounterStore</span>(),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(3) 在组件中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> useStore <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; counter &#125; = <span class="title function_">useStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用storeToRefs可以保证解构出来的数据也是响应式的</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, double &#125; = <span class="title function_">storeToRefs</span>(counter)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><h3 id="一、类型注解"><a href="#一、类型注解" class="headerlink" title="一、类型注解"></a>一、类型注解</h3><ul><li>TypeScript 是 JS 的超集，TS 提供了 JS 的所有功能，并且额外的增加了：<strong>类型系统</strong><ul><li>所有的 JS 代码都是 TS 代码</li><li><strong>JS 有类型</strong>（比如，number/string 等），但是 <strong>JS 不会检查变量的类型是否发生变化</strong>，而 TS 会检查</li></ul></li><li>TypeScript 类型系统的主要优势：<strong>可以显示标记出代码中的意外行为，从而降低了发生错误的可能性</strong></li></ul><p><strong>示例代码</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ts类型分为两大类</span></span><br><span class="line"><span class="comment">// js已有类型</span></span><br><span class="line"><span class="comment">//  基本类型(简单类型) 数字 字符串 布尔值 null undefined</span></span><br><span class="line"><span class="comment">//  复杂类型 数组 函数 对象</span></span><br><span class="line"><span class="comment">// ts新增类型</span></span><br><span class="line"><span class="comment">// let 变量名：类型注解 = 值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本类型(简单类型) 数字 字符串 布尔值 null undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">100</span></span><br><span class="line"><span class="comment">// num = 99</span></span><br><span class="line"><span class="comment">// num = &#x27;abc&#x27;  // 不能将类型&#x27;string&#x27;分配给类型&#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">// str = 99</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// flag = true</span></span><br><span class="line"><span class="comment">// flag = false</span></span><br><span class="line"><span class="comment">// flag = !0</span></span><br><span class="line"><span class="comment">// flag = 10  // 错误写法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">params</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">params2</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加了类型注解后，稳定性更高</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>说明：代码中的 <code>: number</code> 就是<strong>类型注解</strong></li><li>作用：<strong>为变量添加类型约束</strong>。比如，上述代码中，约定变量 age 的类型为 number 类型</li><li>解释：<strong>约定了什么类型，就只能给变量赋值该类型的值，否则，就会报错</strong></li><li>约定了类型之后，代码的提示就会非常的清晰</li></ul><h3 id="二、数组类型"><a href="#二、数组类型" class="headerlink" title="二、数组类型"></a>二、数组类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 复杂类型：数组</span></span><br><span class="line">  <span class="comment">// 方式一：let 变量名：类型注解[] = 值</span></span><br><span class="line">  <span class="comment">// 表示 数组中只能存数字</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="comment">// 要求数组中只能存字符串</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;nihao&#x27;</span>, <span class="string">&#x27;hahahaha&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方式二(泛型)：let 变量名：Array&lt;类型&gt; = 值</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr3</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr4</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;nihao&#x27;</span>, <span class="string">&#x27;hahahaha&#x27;</span>]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr5</span>: <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, !<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、联合类型"><a href="#三、联合类型" class="headerlink" title="三、联合类型"></a>三、联合类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 需求：一个变量 既可以存数字 也可以存字符串 也可以存布尔值</span></span><br><span class="line">  <span class="comment">// let params: number = 100</span></span><br><span class="line">  <span class="comment">// params = &#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明变量不赋值，类型是任意类型 可以做任意赋值，不严谨</span></span><br><span class="line">  <span class="comment">/* let param</span></span><br><span class="line"><span class="comment">  param = 100</span></span><br><span class="line"><span class="comment">  param = &#x27;abc&#x27;</span></span><br><span class="line"><span class="comment">  param = true */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 联合类型</span></span><br><span class="line">  <span class="comment">// temp变量 可以存 string number boolean 三种类型</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">temp</span>: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span> = <span class="number">100</span></span><br><span class="line">  temp = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  temp = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实际应用中存定时器id 默认会给null 后面会赋值成一个数字类型</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">timeId</span>: <span class="built_in">number</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">  timeId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;123&#x27;</span>) &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需求：数组中可以存数字 也可以存字符串 也可以存布尔值</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">boolean</span> | <span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="string">&#x27;abc&#x27;</span>, <span class="number">123</span>, <span class="literal">false</span>]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span> | <span class="built_in">string</span> | <span class="built_in">number</span>&gt; = [<span class="string">&#x27;abc&#x27;</span>, <span class="number">123</span>, <span class="literal">false</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、自定义类型"><a href="#四、自定义类型" class="headerlink" title="四、自定义类型"></a>四、自定义类型</h3><ul><li><code>类型别名（自定义类型）</code>：为任意类型起别名</li><li>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，<strong>简化该类型的使用</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 定义一个数组 可以存 数字 字符串 布尔值</span></span><br><span class="line">  <span class="comment">// let arr1: (boolean | string | number)[] = [&#x27;abc&#x27;, 123, false]</span></span><br><span class="line">  <span class="comment">// let arr2: (boolean | string | number)[] = [&#x27;niaho&#x27;, true, false, 888, 9999]</span></span><br><span class="line">  <span class="comment">// let arr3: (boolean | string | number)[] = [ true, false, 888, &#x27;AAA&#x27;, 9999]</span></span><br><span class="line">  <span class="comment">// 以上定义的数组类型 是重复的操作，可以自定义类型(类型别名)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用type关键字 自定义类型 type 自定义类名别名 = 类型</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">MyType</span> = (<span class="built_in">boolean</span> | <span class="built_in">string</span> | <span class="built_in">number</span>)[]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">MyType</span> = [<span class="string">&#x27;abc&#x27;</span>, <span class="number">123</span>, <span class="literal">false</span>]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">MyType</span> = [<span class="string">&#x27;niaho&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">888</span>, <span class="number">9999</span>]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr3</span>: <span class="title class_">MyType</span> = [ <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">888</span>, <span class="string">&#x27;AAA&#x27;</span>, <span class="number">9999</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">MyVarType</span> = <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">boolean</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">param1</span>: <span class="title class_">MyVarType</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">param2</span>: <span class="title class_">MyVarType</span> = <span class="number">123</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">param3</span>: <span class="title class_">MyVarType</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* type s = string</span></span><br><span class="line"><span class="comment">  type n = number</span></span><br><span class="line"><span class="comment">  type b = boolean</span></span><br><span class="line"><span class="comment">  let a: n = 123 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、函数类型"><a href="#五、函数类型" class="headerlink" title="五、函数类型"></a>五、函数类型</h3><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h4><ul><li>函数的类型实际上指的是：<code>函数参数</code>和<code>返回值</code>的类型</li><li>为函数指定类型的两种方式：<ol><li>单独指定参数、返回值的类型</li><li>同时指定参数、返回值的类型</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 函数指定类型：其实是在给函数的参数和返回值指定类型</span></span><br><span class="line">  <span class="comment">// function 函数名(参数1: 类型, 参数2: 类型, ...): 返回值类型&#123;函数体&#125;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n + m</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数表达式 const 函数名= (参数1：类型，参数2：类型，...):返回值类型 =&gt; &#123;函数体&#125;</span></span><br><span class="line">  <span class="keyword">const</span> inc = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">inc</span>(<span class="number">100</span>, <span class="number">99</span>)</span><br><span class="line">  <span class="title function_">inc</span>(<span class="number">1</span>, <span class="number">99</span>)</span><br><span class="line">  <span class="keyword">const</span> addFn = <span class="keyword">function</span> (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addFn</span>(<span class="number">1</span>, <span class="number">99</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-自定义函数类型"><a href="#2-自定义函数类型" class="headerlink" title="2. 自定义函数类型"></a>2. 自定义函数类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 以下三个函数的类型一样</span></span><br><span class="line">  <span class="comment">// type 自定义类型 = (参数1：类型，参数2：类型...) =&gt; 返回值类型</span></span><br><span class="line">  <span class="comment">// 自定义函数类型 只适用于函数表达式中(箭头函数)</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">MyFnType</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line">  <span class="comment">// 函数声明的方式 不能被使用自定义函数类型的</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> n + m</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数表达式 const 函数名= (参数1：类型，参数2：类型，...):返回值类型 =&gt; &#123;函数体&#125;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">inc</span>: <span class="title class_">MyFnType</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">addFn</span>: <span class="title class_">MyFnType</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addFn</span>(<span class="number">1</span>, <span class="number">99</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-void-类型"><a href="#3-void-类型" class="headerlink" title="3. void 类型"></a>3. void 类型</h4><ul><li>如果函数没有返回值，那么，函数返回值类型为：<code>void</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 指定了函数的参数和返回值</span></span><br><span class="line">  <span class="keyword">const</span> addFn = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">string</span> | <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addFn</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个函数在函数体内 并没有写return，强制写了返回值的类型</span></span><br><span class="line">  <span class="comment">// 函数是可以不设置返回值类型。但是如果真的要求，函数没有返回值，也得指定，一般指定void</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incFn</span> = (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> incFn2 = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a - b)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-可选参数"><a href="#4-可选参数" class="headerlink" title="4. 可选参数"></a>4. 可选参数</h4><ul><li>使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到<strong>可选参数</strong>了</li><li><p>比如，数组的 slice 方法，可以 <code>slice()</code> 也可以 <code>slice(1)</code> 还可以 <code>slice(1, 3)</code> </p></li><li><p>可选参数：在可传可不传的参数名称后面添加 <code>?</code>（问号）</p></li><li>注意：<strong>可选参数只能出现在参数列表的最后</strong>，也就是说可选参数后面不能再出现必选参数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 有时候函数参数是可选的， 例如 字符串的截取方法</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;sakhdbaskjbcs23131&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>()) <span class="comment">// 原样输出字符串</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">2</span>)) <span class="comment">// 从索引2的位置开始截，截取到最后 khdbaskjbcs23131</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">5</span>)) <span class="comment">// 从索引2截取到索引5 包左不包右 khd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ?: 做可选参数</span></span><br><span class="line">  <span class="comment">// 注意点： </span></span><br><span class="line">  <span class="comment">//    1. 可选参数不能在必选参数之前</span></span><br><span class="line">  <span class="comment">//    2. 函数的默认值和可选参数互斥(只能出现其一)</span></span><br><span class="line">  <span class="keyword">const</span> addFn = (a?: <span class="built_in">number</span>, b?: <span class="built_in">number</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addFn</span>()</span><br><span class="line">  <span class="title function_">addFn</span>(<span class="number">10</span>)</span><br><span class="line">  <span class="title function_">addFn</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">incFn</span> = (<span class="params">a: <span class="built_in">number</span> = <span class="number">100</span>, b: <span class="built_in">number</span> = <span class="number">200</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">incFn</span>()</span><br><span class="line">  <span class="title function_">incFn</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="六、对象类型"><a href="#六、对象类型" class="headerlink" title="六、对象类型"></a>六、对象类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 对象类型说明：其实就是给对象中的属性和方法添加类型注解</span></span><br><span class="line">  <span class="comment">// const obj: &#123;</span></span><br><span class="line">  <span class="comment">//   name: string</span></span><br><span class="line">  <span class="comment">//   age: number</span></span><br><span class="line">  <span class="comment">//   sex: string</span></span><br><span class="line">  <span class="comment">// &#125; = &#123;</span></span><br><span class="line">  <span class="comment">//   name: &#x27;奥特曼&#x27;,</span></span><br><span class="line">  <span class="comment">//   age: 18,</span></span><br><span class="line">  <span class="comment">//   sex: &#x27;未知&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// const obj2: &#123;</span></span><br><span class="line">  <span class="comment">//   name: string</span></span><br><span class="line">  <span class="comment">//   age: number</span></span><br><span class="line">  <span class="comment">//   sex: string</span></span><br><span class="line">  <span class="comment">// &#125; = &#123;</span></span><br><span class="line">  <span class="comment">//   name: &#x27;小怪兽&#x27;,</span></span><br><span class="line">  <span class="comment">//   age: 20,</span></span><br><span class="line">  <span class="comment">//   sex: &#x27;男&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">sing</span>: <span class="function">(<span class="params">song: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    <span class="title function_">run</span>(): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;奥特曼&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;未知&#x27;</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="function">(<span class="params">song</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱&#x27;</span> + song)</span><br><span class="line">    &#125;,</span><br><span class="line">    run () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会跑步&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  obj.<span class="title function_">sing</span>(<span class="string">&#x27;好运来&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">obj2</span>: <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小怪兽&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sing</span>: <span class="function">(<span class="params">song</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱&#x27;</span> + song)</span><br><span class="line">    &#125;,</span><br><span class="line">    run () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我也会跑步&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  obj2.<span class="title function_">sing</span>(<span class="string">&#x27;好运来&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 创建两个对象：</span></span><br><span class="line">  <span class="comment">// 学生对象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定对象的类型</span></span><br><span class="line">  <span class="comment">// 姓名</span></span><br><span class="line">  <span class="comment">// 性别</span></span><br><span class="line">  <span class="comment">// 成绩</span></span><br><span class="line">  <span class="comment">// 身高</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 学习</span></span><br><span class="line">  <span class="comment">// 打游戏</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">StudentType</span> = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="built_in">string</span></span><br><span class="line">    sex?: <span class="built_in">string</span></span><br><span class="line">    grade?: <span class="built_in">number</span></span><br><span class="line">    height?: <span class="built_in">number</span></span><br><span class="line">    study?: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    playGame?(): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">stu1</span>: <span class="title class_">StudentType</span> = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;喜羊羊&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">grade</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="title function_">study</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我爱学习&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">playGame</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;玩游戏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">stu2</span>: <span class="title class_">StudentType</span> = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;灰太狼&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="七、接口类型"><a href="#七、接口类型" class="headerlink" title="七、接口类型"></a>七、接口类型</h3><p>当一个对象类型被多次使用时，一般会使用接口（<code>interface</code>）来描述对象的类型，达到复用的目的</p><ul><li>解释：<ol><li>使用 <code>interface</code> 关键字来声明接口</li><li>接口名称(比如，此处的 IPerson)，可以是任意合法的变量名称，推荐以 <code>I</code> 开头</li><li>声明接口后，直接使用接口名称作为变量的类型</li><li>因为每一行只有一个属性类型，因此，属性类型后没有 ;(分号)</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 接口类型，早之前定义自定义类型的时候使用的interface，type是新增的</span></span><br><span class="line">  <span class="comment">// 也可以定义对象的自定义类型 还可以做继承</span></span><br><span class="line">  <span class="comment">// type StudentType = &#123;</span></span><br><span class="line">  <span class="comment">//   uname: string</span></span><br><span class="line">  <span class="comment">//   sex?: string</span></span><br><span class="line">  <span class="comment">//   grade?: number</span></span><br><span class="line">  <span class="comment">//   height?: number</span></span><br><span class="line">  <span class="comment">//   study?: () =&gt; void</span></span><br><span class="line">  <span class="comment">//   playGame?(): void</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IStudentType</span> &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="built_in">string</span></span><br><span class="line">    sex?: <span class="built_in">string</span></span><br><span class="line">    grade?: <span class="built_in">number</span></span><br><span class="line">    height?: <span class="built_in">number</span></span><br><span class="line">    study?: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    playGame?(): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 接口名称(比如，此处的 IPerson)，可以是任意合法的变量名称，推荐以 `I` 开头</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">IStudentType</span> = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;广&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">grade</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">180</span>,</span><br><span class="line">    <span class="attr">study</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;操作鹤望兰&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">playGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;玩游戏&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="interface-vs-type"><a href="#interface-vs-type" class="headerlink" title="interface vs type"></a>interface vs type</h4><ul><li>interface（接口）和 type（类型别名）的对比：</li><li>相同点：都可以给对象指定类型</li><li>不同点:<ul><li>接口，只能为对象指定类型</li><li>类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名</li></ul></li><li>推荐：<strong>能使用 type 就是用 type</strong></li></ul><h4 id="接口继承"><a href="#接口继承" class="headerlink" title="接口继承"></a>接口继承</h4><p>如果两个接口之间有相同的属性或方法，可以将<strong>公共的属性或方法抽离出来，通过继承来实现复用</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// interface可以定义对象，还可以继承</span></span><br><span class="line">  <span class="comment">// type Person = &#123;</span></span><br><span class="line">  <span class="comment">//   name: string</span></span><br><span class="line">  <span class="comment">//   weight: number</span></span><br><span class="line">  <span class="comment">//   age: number</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// interface IPerson &#123;</span></span><br><span class="line">  <span class="comment">//   name: string</span></span><br><span class="line">  <span class="comment">//   weight: number</span></span><br><span class="line">  <span class="comment">//   age: number</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// es6中的class类的继承 extends关键字</span></span><br><span class="line">  <span class="comment">// class People &#123;&#125;</span></span><br><span class="line">  <span class="comment">// class Stu extends People &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 人的类型接口</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IPeople</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">number</span></span><br><span class="line">    run?(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">// play: () =&gt; void</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IWorker</span> <span class="keyword">extends</span> <span class="title class_">IPeople</span> &#123;</span><br><span class="line">    workNumber?: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 学生的类型接口 继承自 人的类型接口</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">IStu</span> <span class="keyword">extends</span> <span class="title class_">IWorker</span> &#123;</span><br><span class="line">    <span class="attr">score</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">xm</span>: <span class="title class_">IStu</span> = &#123;</span><br><span class="line">    <span class="attr">score</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我跟着别人跑了&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if(xm.run) &#123;</span></span><br><span class="line">  <span class="comment">//   xm.run()</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  xm.<span class="property">run</span> &amp;&amp; xm.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="type-实现继承"><a href="#type-实现继承" class="headerlink" title="type 实现继承"></a>type 实现继承</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 怎样使用type实现继承</span></span><br><span class="line">  <span class="comment">// 人的类型接口</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">IPeople</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">weight</span>: <span class="built_in">number</span></span><br><span class="line">    run?(): <span class="built_in">void</span></span><br><span class="line">    <span class="comment">// play: () =&gt; void</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">IWorker</span> = &#123;</span><br><span class="line">    <span class="attr">workNumber</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 学生的类型接口 继承自 人的类型接口</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">IStu</span> = &#123;</span><br><span class="line">    <span class="attr">score</span>: <span class="built_in">number</span></span><br><span class="line">  &#125; &amp; <span class="title class_">IPeople</span> &amp; <span class="title class_">IWorker</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">xm</span>: <span class="title class_">IStu</span> = &#123;</span><br><span class="line">    <span class="attr">score</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xm&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">weight</span>: <span class="number">120</span>,</span><br><span class="line">    <span class="attr">workNumber</span>: <span class="number">9527</span></span><br><span class="line">  &#125;</span><br><span class="line">  xm.<span class="property">run</span> &amp;&amp; xm.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="八、元祖类型"><a href="#八、元祖类型" class="headerlink" title="八、元祖类型"></a>八、元祖类型</h3><ul><li>场景：在地图中，使用经纬度坐标来标记位置信息</li><li>可以使用数组来记录坐标，那么，该数组中只有两个元素，并且这两个元素都是数值类型</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>[] = [<span class="number">116.2317</span>, <span class="number">39.5427</span>]</span><br></pre></td></tr></table></figure><ul><li>使用 number[] 的缺点：不严谨，因为该类型的数组中可以出现任意多个数字</li><li>更好的方式：<code>元组 Tuple</code></li><li>元组类型是另一种类型的数组，它确切地知道包含多少个元素，<strong>以及特定索引对应的类型</strong></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">39.5427</span>, <span class="number">116.2317</span>]</span><br></pre></td></tr></table></figure><ul><li>解释：<ol><li>元组类型可以确切地标记出有多少个元素，以及每个元素的类型</li><li>该示例中，元素有两个元素，每个元素的类型都是 number</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 元祖类型：特殊的数组类型 =&gt; 指定数组元素的类型 还要指定数组元素的个数</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;ac&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;sd&#x27;</span>, <span class="string">&#x27;sf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生活中一个数组要存储经纬度 [112.3552, 63.6561] 存储的数据类型是数字 并且只能存两项</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">112.3552</span>, <span class="number">63.6561</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开发中 数组中 参数1 存储的是键 参数2存的是值 [&#x27;zs&#x27;, 18]</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">info</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;zs&#x27;</span>, <span class="number">18</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="九、类型推论"><a href="#九、类型推论" class="headerlink" title="九、类型推论"></a>九、类型推论</h3><ul><li>在 TS 中，某些没有明确指出类型的地方，<strong>TS 的类型推论机制会帮助提供类型</strong></li><li>换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写</li><li><p>发生类型推论的 2 种常见场景:</p><ol><li>声明变量并初始化时</li><li>决定函数返回值时</li></ol></li><li><p>推荐：<strong>能省略类型注解的地方就省略</strong>（<del>偷懒</del>，充分利用TS类型推论的能力，提升开发效率）</p></li><li>技巧：如果不知道类型，可以通过鼠标放在变量名称上，利用 VSCode 的提示来查看类型</li></ul><h3 id="十、字面量类型"><a href="#十、字面量类型" class="headerlink" title="十、字面量类型"></a>十、字面量类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str1 = <span class="string">&#x27;Hello TS&#x27;</span> <span class="comment">// 推论 str1 为 string类型</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下代码写完整是 const str2: &#x27;Hello TS&#x27; = &#x27;Hello TS&#x27; 明确这个str2只能存&#x27;Hello TS&#x27;</span></span><br><span class="line">  <span class="comment">// 将一个固定的值设置为类型 这个称为字面量类型，一般配合联合类型一起使用</span></span><br><span class="line">  <span class="keyword">const</span> str2 = <span class="string">&#x27;Hello TS&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 性别 无非就两种</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span> | <span class="string">&#x27;女&#x27;</span> = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  sex = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">  sex = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  <span class="comment">// sex = &#x27;abc&#x27;  // 错误，限制只能写 男 或者 女</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 游戏中 上up 下down 左left 右right</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">TDir</span> = <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">dir: TDir</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;方向修改了&#x27;</span> + dir)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="string">&#x27;up&#x27;</span>)</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="string">&#x27;down&#x27;</span>)</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="string">&#x27;left&#x27;</span>)</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line">  <span class="comment">// changeDirection(&#x27;东北&#x27;) // error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十一、枚举类型"><a href="#十一、枚举类型" class="headerlink" title="十一、枚举类型"></a>十一、枚举类型</h3><ul><li>枚举的功能类似于<strong>字面量类型+联合类型组合</strong>的功能，也可以表示一组明确的可选值</li><li>枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span>, <span class="title class_">Down</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用枚举类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数时，需要应该传入：枚举 Direction 成员的任意一个</span></span><br><span class="line"><span class="comment">// 类似于 JS 中的对象，直接通过 点（.）语法 访问枚举的成员</span></span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>)</span><br></pre></td></tr></table></figure><ul><li>解释:<ol><li>使用 <code>enum</code> 关键字定义枚举</li><li>约定枚举名称以大写字母开头</li><li>枚举中的多个值之间通过 <code>,</code>（逗号）分隔</li><li>定义好枚举后，直接使用枚举名称作为类型注解</li></ol></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 枚举类型：字面量类型 + 联合类型 可以实现同样的效果</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 数字枚举</span></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="comment">// up, // 0  // 这里没给值默认还是从0开始</span></span><br><span class="line">    <span class="comment">// down, // 1  </span></span><br><span class="line">    <span class="comment">// left = 88, // 88</span></span><br><span class="line">    <span class="comment">// right = 103 // 103  // 如果这里不给值，就默认递增89</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2. 字符串枚举</span></span><br><span class="line">  <span class="comment">// enum Direction &#123;</span></span><br><span class="line">  <span class="comment">//   up = &#x27;up&#x27;, </span></span><br><span class="line">  <span class="comment">//   down = &#x27;down&#x27;,</span></span><br><span class="line">  <span class="comment">//   left = &#x27;left&#x27;,</span></span><br><span class="line">  <span class="comment">//   right = &#x27;down&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 3. 异构枚举</span></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    up = <span class="number">20</span>, </span><br><span class="line">    down = <span class="string">&#x27;down&#x27;</span>,</span><br><span class="line">    left = <span class="number">90</span>,</span><br><span class="line">    right = <span class="string">&#x27;right&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">dir: Direction</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;方向改变了&#x27;</span> + dir)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 枚举类型 </span></span><br><span class="line">  <span class="comment">//  1. 数字枚举：如果没提供默认值 从0开始递增,可以给每一项设置值，如果只设置某项，后续的会递增</span></span><br><span class="line">  <span class="comment">//  2. 字符串枚举 可以提供字符串</span></span><br><span class="line">  <span class="comment">//  3. 异构枚举</span></span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">up</span>)</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">down</span>)</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">left</span>)</span><br><span class="line">  <span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">right</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十二、any-类型"><a href="#十二、any-类型" class="headerlink" title="十二、any 类型"></a>十二、any 类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// typeScript 添加类型注解</span></span><br><span class="line">  <span class="comment">// any类型 =&gt; 对于一些不会写类型注解的人，项目代码中 全是any anyScript</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">any</span> = <span class="string">&#x27;100&#x27;</span></span><br><span class="line">  a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">  <span class="comment">// a.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// any类型 有时候在开发中对有些类型不明确，可以暂且用any占位，等类型明确后，再来修改</span></span><br><span class="line">  <span class="comment">// 或者 一些无关紧要的业务，其实也可以用any</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十三、类型断言"><a href="#十三、类型断言" class="headerlink" title="十三、类型断言"></a>十三、类型断言</h3><ul><li><p>解释:</p><ol><li>使用 <code>as</code> 关键字实现类型断言</li><li>关键字 as 后面的类型是一个更加具体的类型（HTMLAnchorElement 是 HTMLElement 的子类型）</li><li>通过类型断言，aLink 的类型变得更加具体，这样就可以访问 a 标签特有的属性或方法了</li></ol></li><li><p>另一种语法，使用 <code>&lt;&gt;</code> 语法，这种语法形式不常用知道即可</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 类型断言：有时候我们比ts更明确一个数据的类型，可以使用类型断言</span></span><br><span class="line">  <span class="comment">// 获取一个元素，打印元素的某个属性</span></span><br><span class="line">  <span class="comment">// 使用as关键字 类型断言 告诉ts 这是什么类型</span></span><br><span class="line">  <span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(box.<span class="property">innerHTML</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取一个id叫target的元素，我们断言这是个a标签</span></span><br><span class="line">  <span class="comment">// const target = document.querySelector(&#x27;#target&#x27;) as HTMLAnchorElement</span></span><br><span class="line">  <span class="keyword">const</span> target = &lt;<span class="title class_">HTMLAnchorElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#target&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">href</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 练习 获取一个类名叫.pic的img标签，并且打印它的src属性值</span></span><br><span class="line">  <span class="comment">// 如何获取这个HTMLImageElement呢</span></span><br><span class="line">  <span class="comment">// const pic = document.querySelector(&#x27;img&#x27;)</span></span><br><span class="line">  <span class="comment">// 把.pic指定为img，然后将鼠标移至console.log(pic.src)，会有提示</span></span><br><span class="line">  <span class="keyword">const</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.pic&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLImageElement</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(pic.<span class="property">src</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十四、泛型"><a href="#十四、泛型" class="headerlink" title="十四、泛型"></a>十四、泛型</h3><ul><li><p><strong>泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用</strong>，常用于：函数、接口、class 中</p></li><li><p><strong>泛型在保证类型安全(不丢失类型信息)的同时，可以让函数等与多种不同的类型一起工作，灵活可复用</strong></p></li><li>实际上，在 C# 和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一</li></ul><h4 id="1-泛型函数"><a href="#1-泛型函数" class="headerlink" title="1. 泛型函数"></a>1. 泛型函数</h4><p>解释:</p><p>定义泛型函数</p><ol><li>语法：在函数名称的后面添加 <code>&lt;&gt;</code>(尖括号)，<strong>尖括号中添加类型变量</strong>，比如此处的 Type</li><li><strong>类型变量 Type，是一种特殊类型的变量，它处理类型而不是值</strong></li><li><strong>该类型变量相当于一个类型容器</strong>，能够捕获用户提供的类型(具体是什么类型由用户调用该函数时指定)</li><li>因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型</li><li>类型变量 Type，可以是任意合法的变量名称</li></ol><p>调用泛型函数</p><ul><li><p>解释：</p><ol><li>语法：在函数名称的后面添加 <code>&lt;&gt;</code>(尖括号)，<strong>尖括号中指定具体的类型</strong>，比如，此处的 number</li><li>当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到</li><li>此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number</li></ol></li><li><p>同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string</p></li><li>这样，通过泛型就做到了让 id 函数与多种不同的类型一起工作，<strong>实现了复用的同时保证了类型安全</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 泛型：将类型当做参数来传递使用</span></span><br><span class="line">  <span class="comment">// let arr: Array&lt;number&gt; = [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 需求：一个函数接收一个参数并返回，这个参数是什么类型，我们函数的返回值就是什么</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> fn&lt;T&gt;(<span class="attr">a</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">  &#125;</span><br><span class="line">  fn&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)  <span class="comment">// 返回值类型 number</span></span><br><span class="line">  fn&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;abc&#x27;</span>)  <span class="comment">// 返回值类型 string</span></span><br><span class="line">  fn&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">true</span>)  <span class="comment">// 返回值类型  boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-泛型约束"><a href="#2-泛型约束" class="headerlink" title="2. 泛型约束"></a>2. 泛型约束</h4><ul><li><p>默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性</p></li><li><p>解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length</p></li><li>此时，就需要<strong>为泛型添加约束来<code>收缩类型</code>(缩窄类型取值范围)</strong></li><li>添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型  2 添加约束</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* function id&lt;T&gt;(value: T): T &#123;</span></span><br><span class="line"><span class="comment">    // 就应该警告报错，并没有限制传递的数据类型 数字/对象就没有length</span></span><br><span class="line"><span class="comment">    // 解决方案</span></span><br><span class="line"><span class="comment">    // 1. 类型的收窄 做if判断处理</span></span><br><span class="line"><span class="comment">    if(typeof value === &#x27;string&#x27;) &#123;</span></span><br><span class="line"><span class="comment">      console.log(value.length)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(value instanceof Array) &#123;</span></span><br><span class="line"><span class="comment">      console.log(value.length)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return value</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">  id(&#x27;abcd&#x27;)</span></span><br><span class="line"><span class="comment">  id([])</span></span><br><span class="line"><span class="comment">  id(90) */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 解决方案</span></span><br><span class="line">  <span class="comment">// 2. 泛型约束 约束你传递的数据类型必须有length属性 结合 继承来做</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">TLength</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;</span><br><span class="line">  <span class="keyword">function</span> id&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">TLength</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">id</span>(<span class="string">&#x27;abcd&#x27;</span>)</span><br><span class="line">  <span class="title function_">id</span>([])</span><br><span class="line">  <span class="title function_">id</span>(<span class="number">90</span>) <span class="comment">// 类型“number”的参数不能赋值给类型“TLength”的参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="多个类型变量"><a href="#多个类型变量" class="headerlink" title="多个类型变量"></a>多个类型变量</h5><p>泛型的类型变量可以有多个，并且<strong>类型变量之间还可以约束</strong>(比如，第二个类型变量受第一个类型变量约束)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getProp&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="title function_">getProp</span>(person, <span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>解释:<ol><li>添加了第二个类型变量 Key，两个类型变量之间使用 <code>,</code> 逗号分隔。</li><li><strong>keyof 关键字接收一个对象类型，生成其键名称(可能是字符串或数字)的联合类型</strong>。</li><li>本示例中 <code>keyof Type</code> 实际上获取的是 person 对象所有键的联合类型，也就是：<code>&#39;name&#39; | &#39;age&#39;</code></li><li>类型变量 Key 受 Type 约束，可以理解为：Key 只能是 Type 所有键中的任意一个，或者说只能访问对象中存在的属性</li></ol></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Type extends object 表示： Type 应该是一个对象类型，如果不是 对象 类型，就会报错</span></span><br><span class="line"><span class="comment">// 如果要用到 对象 类型，应该用 object ，而不是 Object</span></span><br><span class="line"><span class="keyword">function</span> getProperty&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="built_in">object</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-泛型接口"><a href="#3-泛型接口" class="headerlink" title="3. 泛型接口"></a>3. 泛型接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 将类型传递 可以使 IPeople 对象类型更灵活</span></span><br><span class="line">  <span class="comment">// type和interface的关系 ==&gt; function和箭头函数的关系</span></span><br><span class="line">  <span class="comment">// interface和type大部分问题都可以转换着解决，涉及到继承 interface extends / type &amp;</span></span><br><span class="line">  <span class="comment">/* interface IPeople&lt;T&gt; &#123;</span></span><br><span class="line"><span class="comment">    name: T</span></span><br><span class="line"><span class="comment">    sex: T</span></span><br><span class="line"><span class="comment">    address: T</span></span><br><span class="line"><span class="comment">    sing(song: T): void</span></span><br><span class="line"><span class="comment">  &#125; */</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">IPeople</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: T</span><br><span class="line">    <span class="attr">sex</span>: T</span><br><span class="line">    <span class="attr">address</span>: T</span><br><span class="line">    <span class="title function_">sing</span>(<span class="attr">song</span>: T): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">xm</span>: <span class="title class_">IPeople</span>&lt;<span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;上海&#x27;</span>,</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params">song</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span> + song)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xm.<span class="title function_">sing</span>(<span class="string">&#x27;好运来&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">xg</span>: <span class="title class_">IPeople</span>&lt;<span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="number">9999</span>,</span><br><span class="line">    <span class="title function_">sing</span>(<span class="params">song</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我会唱歌&#x27;</span> + song)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xg.<span class="title function_">sing</span>(<span class="number">4567</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十五、TypeScript-与-Vue"><a href="#十五、TypeScript-与-Vue" class="headerlink" title="十五、TypeScript 与 Vue"></a>十五、TypeScript 与 Vue</h3><blockquote><p>参考链接：<a href="https://vuejs.org/guide/typescript/composition-api.html">https://vuejs.org/guide/typescript/composition-api.html</a></p><p>vue3配合ts中，还需要额外安装一个vscode插件：Typescript Vue Plugin</p></blockquote><h4 id="1-defineProps-与-Typescript"><a href="#1-defineProps-与-Typescript" class="headerlink" title="1. defineProps 与 Typescript"></a>1. defineProps 与 Typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="comment">// vue3 js版本的子组件接收父组件的数据</span></span><br><span class="line"><span class="comment">// defineProps(&#123;</span></span><br><span class="line"><span class="comment">//   money: &#123;</span></span><br><span class="line"><span class="comment">//     type: Number,</span></span><br><span class="line"><span class="comment">//     default: 0</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ts方式</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;</span><br><span class="line">  money?: <span class="built_in">number</span>,</span><br><span class="line">  baby?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; money = <span class="number">0</span>, baby = <span class="string">&#x27;你&#x27;</span> &#125; = defineProps&lt;<span class="title class_">IProps</span>&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid #ccc; padding: 10px&quot;</span>&gt;</span>son子组件--&#123;&#123; money &#125;&#125;--&#123;&#123; baby &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果提供的默认值需要在模板中渲染，需要额外添加配置</p><p><a href="https://vuejs.org/guide/extras/reactivity-transform.html#explicit-opt-in">https://vuejs.org/guide/extras/reactivity-transform.html#explicit-opt-in</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line">export default <span class="punctuation">&#123;</span></span><br><span class="line">  plugins<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    vue(<span class="punctuation">&#123;</span></span><br><span class="line">      reactivityTransform<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span>)</span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-defineEmits-与-Typescript"><a href="#2-defineEmits-与-Typescript" class="headerlink" title="2. defineEmits 与 Typescript"></a>2. defineEmits 与 Typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="comment">// 子传父</span></span><br><span class="line"><span class="comment">// const emit = defineEmits([&#x27;cutMoney&#x27;, &#x27;changeStr&#x27;]) // js版本</span></span><br><span class="line"><span class="comment">// ts版本</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">  <span class="comment">// (e: &#x27;自定义事件类型&#x27;, 变量名: 数据类型): 返回值</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;cutMoney&#x27;</span>, <span class="attr">a</span>: <span class="built_in">number</span>): <span class="built_in">void</span></span><br><span class="line">  (<span class="attr">e</span>: <span class="string">&#x27;changeStr&#x27;</span>, <span class="attr">val</span>: <span class="built_in">string</span>): <span class="built_in">void</span></span><br><span class="line">&#125;&gt;()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cutMoney</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&#x27;cutMoney&#x27;</span>, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeStr</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">emit</span>(<span class="string">&#x27;changeStr&#x27;</span>, <span class="string">&#x27;一百块&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid #ccc; padding: 10px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    son子组件--</span></span><br><span class="line"><span class="language-xml">    &#123;&#123; money &#125;&#125; - <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cutMoney&quot;</span>&gt;</span>花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;&#123; baby &#125;&#125;- <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeStr&quot;</span>&gt;</span>改字符<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="3-ref-与-Typescript"><a href="#3-ref-与-Typescript" class="headerlink" title="3. ref 与 Typescript"></a>3. ref 与 Typescript</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ref可以将数据处理成响应式的数据 不论是基本数据类型还是复杂数据类型</span></span><br><span class="line"><span class="keyword">const</span> num1 = ref&lt;<span class="built_in">number</span>&gt;(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> str1 = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="comment">// 基本数据类型可以简写 不定义类型声明</span></span><br><span class="line"><span class="keyword">const</span> num2 = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">const</span> str2 = <span class="title function_">ref</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂数据类型如果有明确的属性和明确的值，也可以简写</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyPerson</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>, <span class="attr">sex</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">const</span> person1 = ref&lt;<span class="title class_">MyPerson</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> person2 = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复杂数据类型没有明确的属性，没有明确的值，一定要定义好类型</span></span><br><span class="line"><span class="comment">// 例如 todos案例 默认是空数组，需要发送请求获取到数据给数组赋值</span></span><br><span class="line"><span class="comment">// &#123; id: 1, name: &#x27;吃饭&#x27;, isDone: false &#125;,&#123; id: 2, name: &#x27;睡觉&#x27;, isDone: true &#125;</span></span><br><span class="line"><span class="comment">// const list = ref&lt;&#123; id: number, name: string, isDone: boolean &#125;[]&gt;([])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface myListType &#123; id: number, name: string, isDone: boolean &#125;</span></span><br><span class="line"><span class="comment">// const list = ref&lt;myListType[]&gt;([])</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyType</span> = &#123; <span class="attr">id</span>: <span class="built_in">number</span>, <span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">isDone</span>: <span class="built_in">boolean</span> &#125;[]</span><br><span class="line"><span class="keyword">const</span> list = ref&lt;<span class="title class_">MyType</span>&gt;([])</span><br><span class="line"><span class="comment">// 模拟数据发送请求回来赋值 会报类型的错误</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  list.<span class="property">value</span> = [&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;吃饭&#x27;</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;睡觉&#x27;</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="4-computed-与-Typescript"><a href="#4-computed-与-Typescript" class="headerlink" title="4. computed 与 Typescript"></a>4. computed 与 Typescript</h4><ol><li>通过泛型可以指定computed计算属性的类型，通常可以省略</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> leftCount = computed&lt;<span class="built_in">number</span>&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> list.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">done</span>).<span class="property">length</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(leftCount.<span class="property">value</span>)</span><br></pre></td></tr></table></figure><h4 id="5-事件处理与-Typescript"><a href="#5-事件处理与-Typescript" class="headerlink" title="5. 事件处理与 Typescript"></a>5. 事件处理与 Typescript</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">move</span> = (<span class="params">e: MouseEvent</span>) =&gt; &#123;</span><br><span class="line">  mouse.<span class="property">value</span>.<span class="property">x</span> = e.<span class="property">pageX</span></span><br><span class="line">  mouse.<span class="property">value</span>.<span class="property">y</span> = e.<span class="property">pageY</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;h1 <span class="meta">@mousemove</span>=<span class="string">&quot;move($event)&quot;</span>&gt;根组件&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="6-Template-Ref-与-Typescript"><a href="#6-Template-Ref-与-Typescript" class="headerlink" title="6.Template Ref 与 Typescript"></a>6.Template Ref 与 Typescript</h4><h5 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h5><ul><li><strong>可选链</strong>操作符( <strong><code>?.</code></strong> )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。</li><li>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></li></ul><h5 id="非空断言"><a href="#非空断言" class="headerlink" title="非空断言"></a>非空断言</h5><ul><li>如果我们明确的知道对象的属性一定不会为空，那么可以使用非空断言 <code>!</code></li><li>注意：非空断言一定要确保有该属性才能使用，不然使用非空断言会导致bug</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=<span class="string">&quot;ts&quot;</span> setup&gt;</span><br><span class="line"><span class="comment">// ts与模板结构的关联</span></span><br><span class="line"><span class="comment">// 1. 创建一个空的ref对象</span></span><br><span class="line"><span class="comment">// 2. 和模板结构关联</span></span><br><span class="line"><span class="comment">// 3. 使用</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IPType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types/data&#x27;</span></span><br><span class="line"><span class="keyword">const</span> hRef = ref&lt;<span class="literal">null</span> | <span class="title class_">HTMLHeadingElement</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 因为hRef刚开始存储的是null 后来和模板结构关联存的是h2标签 null h2两个状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 方式1：添加if判断</span></span><br><span class="line">  <span class="comment">// if (hRef.value) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(hRef.value.innerHTML)</span></span><br><span class="line">  <span class="comment">//   hRef.value.innerHTML = &#x27;789&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 2. 使用可选链操作符</span></span><br><span class="line">  <span class="comment">// console.log(hRef.value?.innerHTML)</span></span><br><span class="line">  <span class="comment">// 3. 非空断言 明确告诉ts hRef.value一定是存在的 !.如果真的结构中没有h2元素,ts也不会校验</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(hRef.<span class="property">value</span>!.<span class="property">innerHTML</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?. !. 区别</span></span><br><span class="line"><span class="comment">// hRef.value?.innerHTML = &#x27;abc&#x27;  // 使用?.访问的属性只能读取，不能赋值</span></span><br><span class="line">hRef.<span class="property">value</span>!.<span class="property">innerHTML</span> = <span class="string">&#x27;abc&#x27;</span>  <span class="comment">// 使用!.访问的属性可以读取，也可以赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface IPType &#123;</span></span><br><span class="line"><span class="comment">//   name: string</span></span><br><span class="line"><span class="comment">//   age: number</span></span><br><span class="line"><span class="comment">//   tel: number</span></span><br><span class="line"><span class="comment">//   score: number</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// type IPType = &#123;</span></span><br><span class="line"><span class="comment">//   name: string</span></span><br><span class="line"><span class="comment">//   age: number</span></span><br><span class="line"><span class="comment">//   tel: number</span></span><br><span class="line"><span class="comment">//   score: number</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: <span class="title class_">IPType</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">tel</span>: <span class="number">18895645246</span>,</span><br><span class="line">  <span class="attr">score</span>: <span class="number">88</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">ref</span>=<span class="string">&quot;hRef&quot;</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十六、TypeScript-类型声明文件"><a href="#十六、TypeScript-类型声明文件" class="headerlink" title="十六、TypeScript 类型声明文件"></a>十六、TypeScript 类型声明文件</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>今天几乎所有的 JavaScript 应用都会引入许多第三方库来完成任务需求。<br>这些第三方库不管是否是用 TS 编写的，最终都要编译成 JS 代码，才能发布给开发者使用。<br>我们知道是 TS 提供了类型，才有了代码提示和类型保护等机制。 </p><p>但在项目开发中使用第三方库时，你会发现它们几乎都有相应的 TS 类型，这些类型是怎么来的呢? <code>类型声明文件</code></p><ul><li><p><strong>类型声明文件：用来为已存在的 JS 库提供类型信息</strong></p></li><li><p>TS 中有两种文件类型：1 <code>.ts</code> 文件 2 <code>.d.ts</code> 文件</p></li><li>.ts 文件:<ol><li><code>既包含类型信息又可执行代码</code></li><li>可以被编译为 .js 文件，然后，执行代码</li><li>用途：编写程序代码的地方</li></ol></li><li><p>.d.ts 文件:</p><ol><li><code>只包含类型信息</code>的类型声明文件</li><li><strong>不会生成 .js 文件，仅用于提供类型信息,在.d.ts文件中不允许出现可执行的代码，只用于提供类型</strong></li><li>用途：为 JS 提供类型信息</li></ol></li><li><p>总结：.ts 是 <code>implementation</code>(代码实现文件)；<strong>.d.ts 是 declaration(类型声明文件)</strong></p></li><li>如果要为 JS 库提供类型信息，要使用 <code>.d.ts</code> 文件</li></ul><h4 id="2-内置类型声明文件"><a href="#2-内置类型声明文件" class="headerlink" title="2. 内置类型声明文件"></a>2. 内置类型声明文件</h4><ul><li>TS 为 JS 运行时可用的所有标准化内置 API 都提供了声明文件</li><li>比如，在使用数组时，数组所有方法都会有相应的代码提示以及类型信息:</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strs = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment">// 鼠标放在 forEach 上查看类型</span></span><br><span class="line">strs.<span class="property">forEach</span></span><br></pre></td></tr></table></figure><ul><li>实际上这都是 TS 提供的内置类型声明文件</li><li>可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看内置类型声明文件内容</li><li>比如，查看 forEach 方法的类型声明，在 VSCode 中会自动跳转到 <code>lib.es5.d.ts</code> 类型声明文件中</li><li>当然，像 window、document 等 BOM、DOM API 也都有相应的类型声明(<code>lib.dom.d.ts</code>)</li></ul><h4 id="3-第三方库类型声明文件"><a href="#3-第三方库类型声明文件" class="headerlink" title="3. 第三方库类型声明文件"></a>3. 第三方库类型声明文件</h4><ul><li>目前，几乎所有常用的第三方库都有相应的类型声明文件</li><li>第三方库的类型声明文件有两种存在形式:1 库自带类型声明文件 2 由 DefinitelyTyped 提供。 </li></ul><ol><li><p>库自带类型声明文件：比如，axios</p><ul><li>查看 <code>node_modules/axios</code> 目录</li></ul></li></ol><p>解释：这种情况下，正常导入该库，<strong>TS 就会自动加载库自己的类型声明文件</strong>，以提供该库的类型声明。</p><ol><li>由 DefinitelyTyped 提供</li></ol><ul><li>DefinitelyTyped 是一个 github 仓库，用来提供高质量 TypeScript 类型声明</li><li><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/">DefinitelyTyped 链接</a></li><li>可以通过 npm/yarn 来下载该仓库提供的 TS 类型声明包，这些包的名称格式为:<code>@types/*</code></li><li>比如，@types/react、@types/lodash 等</li><li>说明：在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 VSCode 中，查看 &#x27;lodash&#x27; 前面的提示</span></span><br></pre></td></tr></table></figure><ul><li>解释：当安装 <code>@types/*</code> 类型声明包后，<strong>TS 也会自动加载该类声明包</strong>，以提供该库的类型声明</li><li>补充：TS 官方文档提供了一个页面，可以来查询 @types/* 库</li><li><a href="https://www.typescriptlang.org/dt">@types/* 库</a></li></ul><h4 id="4-自定义类型声明文件-共享数据"><a href="#4-自定义类型声明文件-共享数据" class="headerlink" title="4. 自定义类型声明文件-共享数据"></a>4. 自定义类型声明文件-共享数据</h4><blockquote><p>项目内共享类型</p></blockquote><ul><li>如果多个 .ts 文件中都用到同一个类型，此时可以创建 .d.ts 文件提供该类型，实现类型共享。</li><li>操作步骤:<ol><li>创建 index.d.ts 类型声明文件。</li><li>创建需要共享的类型，并使用 export 导出(TS 中的类型也可以使用 import/export 实现模块化功能)。</li><li>在需要使用共享类型的 .ts 文件中，通过 import 导入即可(.d.ts 后缀导入时，直接省略)。</li></ol></li></ul><p>自定义类型声明文件-为js提供声明</p><blockquote><p>为已有 JS 文件提供类型声明</p></blockquote><ol><li>在将 JS 项目迁移到 TS 项目时，为了让已有的 .js 文件有类型声明。 </li><li>成为库作者，创建库给其他人使用。</li></ol><ul><li>演示:基于最新的 ESModule(import/export)来为已有 .js 文件，创建类型声明文件。 </li></ul><blockquote><p>类型声明文件的使用说明</p></blockquote><ul><li>说明:TS 项目中也可以使用 .js 文件。</li><li>说明:在导入 .js 文件时，TS 会自动加载与 .js 同名的 .d.ts 文件，以提供类型声明。</li><li>declare 关键字:用于类型声明，为其他地方(比如，.js 文件)已存在的变量声明类型，而不是创建一个新的变量。<ol><li>对于 type、interface 等这些明确就是 TS 类型的(只能在 TS 中使用的)，可以省略 declare 关键字。</li><li>对于 let、function 等具有双重含义(在 JS、TS 中都能用)，应该使用 declare 关键字，明确指定此处用于类型声明。</li></ol></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> songName = <span class="string">&#x27;痴心绝对&#x27;</span></span><br><span class="line"><span class="keyword">let</span> position = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fomartPoint</span> = point =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前坐标：&#x27;</span>, point)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义类型声明文件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="keyword">let</span> <span class="attr">count</span>:number</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">let</span> <span class="attr">songName</span>: string</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Position</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: number,</span><br><span class="line">  <span class="attr">y</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">declare <span class="keyword">let</span> <span class="attr">position</span>: <span class="title class_">Position</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">function</span> <span class="title function_">add</span> (x :number, <span class="attr">y</span>: number) : number</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Direction</span> = <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span> | <span class="string">&#x27;top&#x27;</span> | <span class="string">&#x27;bottom&#x27;</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">function</span> <span class="title function_">changeDirection</span> (<span class="attr">direction</span>: <span class="title class_">Direction</span>): <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">FomartPoint</span> = <span class="function">(<span class="params">point: Position</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line"></span><br><span class="line">declare <span class="keyword">const</span> <span class="attr">fomartPoint</span>: <span class="title class_">FomartPoint</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  count, songName, position, add, changeDirection, <span class="title class_">FomartPoint</span>, fomartPoint</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2022/11/06/JavaScript/"/>
      <url>/2022/11/06/JavaScript/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>面试高频</p></blockquote><h2 id="一-浅拷贝与深拷贝"><a href="#一-浅拷贝与深拷贝" class="headerlink" title="一 浅拷贝与深拷贝"></a>一 浅拷贝与深拷贝</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>浅拷贝：拷贝的是对象的一层属性，如果对象里面还有对象，拷贝的就是地址，两者之间修改会有影响，适用于对象里面属性的值是简单数据类型</li><li>深拷贝：拷贝对象的多层属性，如果对象里面还有对象，会继续拷贝，使用递归来实现</li></ul><h3 id="实现浅拷贝和深拷贝"><a href="#实现浅拷贝和深拷贝" class="headerlink" title="实现浅拷贝和深拷贝"></a>实现浅拷贝和深拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅拷贝</span></span><br><span class="line"><span class="comment">// 第一种方式：纯代码方式</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;很帅&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obj2 = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj1) &#123;</span><br><span class="line">        obj2[k] = obj1[k]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj2)</span><br><span class="line"><span class="comment">// 第二种方式：扩展运算符(扩展运算符其实只能拷贝一层，所以并不算是真正的浅拷贝)</span></span><br><span class="line"><span class="keyword">let</span> res = &#123;...obj1&#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种方式：Object.assign(参数1, 参数2)</span></span><br><span class="line"><span class="comment">// Object.assign(参数1, 参数2)</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> obj2 = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj)</span><br><span class="line">    obj2.<span class="property">a</span> = <span class="number">888</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj, obj2)  <span class="comment">// &#123;a: 100, b: 200&#125; &#123;a: 888, b: 200&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 深拷贝</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;小黑&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;很黑&#x27;</span>,</span><br><span class="line">      <span class="attr">car</span>: &#123;</span><br><span class="line">        <span class="attr">brand</span>: <span class="string">&#x27;加长林肯&#x27;</span>,</span><br><span class="line">        <span class="attr">price</span>: <span class="string">&#x27;100万&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一种方式：递归函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">copyObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        newObj[k] = <span class="keyword">typeof</span> obj[k] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">copyObj</span>(obj[k]) : obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> newObj</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title function_">copyObj</span>(obj1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// 第二种方式：利用字符串的方法</span></span><br><span class="line"><span class="comment">// 1. 先使用JSON.stringify() 转成字符串</span></span><br><span class="line"><span class="comment">// console.log(JSON.stringify(obj1)) // 字符串</span></span><br><span class="line"><span class="comment">// 2. 再使用JSON.parse() 转成 js 对象</span></span><br><span class="line"><span class="comment">// console.log(JSON.parse(JSON.stringify(obj1))) // 字符串==&gt; js对象</span></span><br><span class="line"><span class="keyword">let</span> res = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"><span class="comment">// JSON方法的缺陷</span></span><br><span class="line"><span class="comment">// 如果对象中有undefined或者函数，这个方法就无法拷贝undefined和函数</span></span><br></pre></td></tr></table></figure><h2 id="二-闭包"><a href="#二-闭包" class="headerlink" title="二 闭包"></a>二 闭包</h2><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>​    在 ES6 之前，申明变量只有 var ，因此，早期 js 只有两种作用域，分别是全局作用域和局部作用域(函数作用域)</p><ul><li>全局变量：声明在全局，全范围都能访问到。因此，开发时，尽量避免使用全局变量，会被别人修改。</li><li>局部变量：函数内声明的，只有函数内能访问到。当函数内部执行完毕，默认会销毁函数内所声明的局部变量。</li></ul><p>​    简单来说，当一个外层函数包裹内层函数，内层函数访问了外层函数的变量，就称之为闭包。</p><p>闭包的优点：</p><ol><li>形成私有空间，避免全局变量的污染；</li><li>持久化内存，保存数据。</li></ol><p>闭包的缺点：持久化内存，导致内存泄露</p><p>解决：</p><ol><li>尽量避免函数的嵌套，以及变量的引用</li><li>执行完的变量，可以赋值 null ，让垃圾回收机制，进行回收释放内存。</li></ol><h3 id="实现闭包"><a href="#实现闭包" class="headerlink" title="实现闭包"></a>实现闭包</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式：局部作用域</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">var</span> money = <span class="number">10000</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">addMoney</span>(<span class="params"></span>) &#123;</span><br><span class="line">               money += <span class="number">100</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的金钱&#x27;</span>,money)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> addMoney = <span class="title function_">outer</span>()</span><br><span class="line">       <span class="title function_">addMoney</span>()</span><br><span class="line"><span class="comment">// 花括号包裹 let 声明的变量，即形成块级作用域，就可以防止全局污染</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">let</span> money = <span class="number">10000</span></span><br><span class="line">           <span class="keyword">function</span> <span class="title function_">addMoney</span>(<span class="params"></span>) &#123;</span><br><span class="line">               money += <span class="number">100</span></span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的金钱&#x27;</span>,money)</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">addMoney</span>()</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(money)</span><br><span class="line"></span><br><span class="line">       (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写代码&#x27;</span>)</span><br><span class="line">       &#125;) ()</span><br></pre></td></tr></table></figure><h2 id="三-原型"><a href="#三-原型" class="headerlink" title="三 原型"></a>三 原型</h2><p>原型：函数都有 prototype 属性，这个属性的值是一个对象，称为原型对象；</p><p>原型链：每个原型对象都有一个 <code>_proto_</code>属性，这个属性指向它的原型对象，原型对象也是对象，也有 <code>_proto_</code> 属性，指向原型对象的原型对象，这样一层一层形成的链式结构称之为原型链。</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221113200627367.png" alt="image-20221113200627367"></p><h2 id="四-防抖和节流"><a href="#四-防抖和节流" class="headerlink" title="四 防抖和节流"></a>四 防抖和节流</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>防抖：频繁触发某一操作，只执行最后一次。</li><li>节流：单位时间内，频繁触发同一操作，只执行一次</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><p>防抖：输入框输入 ==&gt; 给搜索提示</p><p>不需要每输入一个字就发请求获取提示，可以给其设置一个延时器，过个一秒或者几秒再发请求获取数据，避免资源浪费，提高性能</p></li><li><p>节流：登录注册时，如果接口响应比较慢，那么用户可能一次性向服务器发送多个请求，这种操作对服务器压力很大；</p><p>这时，我们就可以控制当前接口请求完成时，再发送下一个请求</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ipt&quot;</span> /&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> timerId = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt&#x27;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 防抖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (timerId !== <span class="literal">false</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="built_in">clearTimeout</span>(timerId)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是防抖&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.ipt&#x27;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 节流</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span> (timerId !== <span class="literal">false</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">return</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timerId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是节流&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          timerId = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  &lt;/body&gt;</span><br></pre></td></tr></table></figure><h2 id="五-Promise"><a href="#五-Promise" class="headerlink" title="五 Promise"></a>五 Promise</h2><h3 id="5-1-Promise-的特性和优缺点"><a href="#5-1-Promise-的特性和优缺点" class="headerlink" title="5.1 Promise 的特性和优缺点"></a>5.1 Promise 的特性和优缺点</h3><blockquote><p><strong>what’s this 是什么</strong></p><p><strong>why use it 为什么</strong></p><p><strong>how use it 怎么用</strong></p><p>Promise 是用来解决回调地狱的, 其实就是容器，里面包裹着异步代码, 他有三种状态 </p></blockquote><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221114155530443.png" alt="image-20221114155530443"></p><blockquote><p>回调地狱的可读性极差，容易形成代码’屎山’</p></blockquote><h4 id="Promise-的特性"><a href="#Promise-的特性" class="headerlink" title="Promise 的特性"></a>Promise 的特性</h4><p><code>三种状态</code></p><p>pending(进行中)、fulfilled(已成功)、rejected(已失败)</p><p>只要创建了 Promise，就处于 pending 状态；调用了 resolve 后，由 pending 转为 fulfilled ；调用了 reject 后，由 pending 转为 rejected。状态发生修改后是不可逆的(状态凝固)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(xxx) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>() </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">.<span class="title function_">finally</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 静态方法</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>() <span class="comment">// 等待(失败则停止)</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>() <span class="comment">// 赛跑</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>() <span class="comment">// 等待(永远会执行，尽管失败也执行)</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>()</span><br></pre></td></tr></table></figure><p><code>Promise 构造函数参数</code></p><p>它是一个回调函数，该回调函数有两个参数：</p><ul><li><code>resolve</code> - 成功时的回调，它参数除正常的值外，也可以是一个 Promise 对象</li><li><code>reject</code> - 失败时的回调，它的参通常是一个 Error 对象</li></ul><p><code>then()</code></p><ul><li>在 Promise 对象内 resolve 时执行</li><li><p>可以接收两个回调函数参数：onFulfilled、onRejected (可选)。</p></li><li><p>执行后，会返回一个新 Promise 对象，</p></li></ul><p><code>catch()</code></p><ul><li>在 Promise 对象内 reject 时执行</li><li>执行后，会返回一个新 Promise 对象</li></ul><p><code>finally()</code></p><ul><li>不管成功还是失败，最后都会执行</li><li>它的回调函数没有参数</li><li>放在 then catch 的最后面</li></ul><p><code>Promise.all()</code></p><p>它能将多个 Promise 对象包装成一个新的 Promise 对象，同时执行这些 Promise 后，等待全部执行完成后一起返回。</p><ul><li><p>它的参数是一个 Promise 对象数组（也可以不是数组，但必须是可迭代的）</p></li><li><p>只要有 Promise 失败了（且它们没调用自己的 catch 方法），则就会触发 Promise.all 返回的新 Promise 对象的 catch 方法</p></li></ul><p><code>Promise.race()</code></p><p>它能将多个 Promise 对象包装成一个新的 Promise 对象，同时执行这些 Promise 后，只要有其中一个率先改变了状态，就会返回。</p><ul><li>参数与 Promise.all 的一样</li></ul><p><code>Promise.resolve()</code> </p><p>它能将现有的普通 JS 值包装成一个 Promise 对象。</p><p><code>Promise.reject()</code> </p><p>它能将值包装为一个状态为 rejected 的新 Promise 对象，且传入的参数会被用作内部 reject() 时的参数。</p><h4 id="Promise-的优缺点"><a href="#Promise-的优缺点" class="headerlink" title="Promise 的优缺点"></a>Promise 的优缺点</h4><p><strong>优点</strong></p><ul><li>统一了 JS 的异步处理方式</li><li>解决了回调地狱的问题</li></ul><p><strong>缺点</strong></p><ul><li>一旦开始执行，中途就无法取消</li><li>处于 pending 状态时，无法得知目前已执行到哪个阶段(即进度，比如是刚刚开始？还是即将完成呢？)</li><li>如果不设置 catch 回调函数，Promise 内部抛出的错误，不能被外部捕获到</li><li>报错时显示的信息不友好</li></ul><h3 id="5-2-手写-Promise"><a href="#5-2-手写-Promise" class="headerlink" title="5.2 手写 Promise"></a>5.2 手写 Promise</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 class 定义一个 Promise 类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Promise</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，参数为一个函数，该函数能接收两个参数: resolve, reject</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;pending&#x27;</span>; <span class="comment">// 当前状态</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>; <span class="comment">// 成功时返回的数据</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;<span class="comment">// 失败时返回的原因</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// resolve 和 reject 函数的实现</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">resolve</span> = value =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">reject</span> = reason =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 执行参数传入的任务函数，并为该函数提供两个参数：resolve、reject 方法</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">      <span class="comment">// 执行成功的回调</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 执行失败的回调</span></span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">10</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  p.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(res)&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125;)</span><br></pre></td></tr></table></figure><h2 id="六-Event-Loop"><a href="#六-Event-Loop" class="headerlink" title="六 Event Loop"></a>六 Event Loop</h2><p>由于 JS 本身是单线程运行，所以代码执行时是阻塞执行(即一次只能执行一个任务)。</p><p>为提高执行效率，发明了一种异步非阻塞执行机制，称为 Event Loop (事件循环)。</p><p>它由 JS 宿主环境提供(比如：浏览器、NodeJS)，能实现同一时间执行多个任务。</p><p>JS 本身是单线程的,但是 JS 所运行的宿主环境不是单线程</p><p>通过 Event Loop 机制来运行 JS 代码时，会将任务分为两类：<code>宏任务</code>和<code>微任务</code>，它们会被放入各自的任务队列进行协调和执行：<code>宏任务队列</code>和<code>微任务队列</code>。</p><h2 id="七-宏任务和微任务"><a href="#七-宏任务和微任务" class="headerlink" title="七 宏任务和微任务"></a>七 宏任务和微任务</h2><h3 id="7-1-分类"><a href="#7-1-分类" class="headerlink" title="7.1 分类"></a>7.1 分类</h3><p><strong>哪些代码是宏任务？哪些是微任务？</strong></p><p>四种微任务：</p><ul><li>Promise 的 <code>then、catch、finally</code></li><li><code>MutationObserver</code>（监视 DOM 变动的API，详情参考<a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MDN</a>）</li><li><code>Object.observe</code> (监听标准对象的变化，已废弃)</li><li><code>Process.nextTick</code>（Node环境特有）</li></ul><p>除了微任务，其他都是宏任务，比如：</p><ul><li><code>&lt;script&gt;</code>标签中的全部代码</li><li>DOM 操作</li><li>用户交互操作</li><li>所有网络请求</li><li>定时器：setTimeout、setInterval 等</li><li>···</li></ul><h3 id="7-2-执行顺序"><a href="#7-2-执行顺序" class="headerlink" title="7.2 执行顺序"></a>7.2 执行顺序</h3><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221114164418820.png" alt="image-20221114164418820"></p><p>先执行 js 主代码块, 遇到宏任务,会加入到循环队列中, 遇到微任务也会加入到循环队列中, 等到主代码块执行完毕后,会去事件对列中拿任务执行, 优先执行任务队列中的微任务, 其次执行宏任务。</p><p><strong>确定宏任务、微任务执行顺序的技巧：</strong></p><ol><li>先按宏任务的代码特征，整理出所有<code>宏任务区域</code>及<code>层次结构</code></li><li>然后在每一层中，理出该层的所有的<code>宏任务</code>及<code>该宏任务区域下的微任务</code></li><li>最终排序：从第一层开始逐层执行每层的：<code>宏任务+微任务</code> | <code>宏任务+微任务</code> | …</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&#x27;p1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;p2&#x27;</span>)</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;setTimeout1&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// abc 2 3 6  主代码块 宏任务</span></span><br><span class="line">    <span class="comment">// 在执行下一个宏任务之前查看是否有微任务</span></span><br><span class="line">    <span class="comment">// p2 p1</span></span><br><span class="line">    <span class="comment">// 微任务执行完 按顺序执行宏任务 三个定时任务 1 4 5</span></span><br><span class="line">    <span class="comment">// abc 2 3 6 p2 p1 1 4 5</span></span><br></pre></td></tr></table></figure><h2 id="八-await-到底在等什么"><a href="#八-await-到底在等什么" class="headerlink" title="八 await 到底在等什么"></a>八 await 到底在等什么</h2><h3 id="8-1-async-和-await"><a href="#8-1-async-和-await" class="headerlink" title="8.1 async 和 await"></a>8.1 async 和 await</h3><p>async 和 await 是一对关键字</p><ol><li><p>async 用于修饰一个函数, 表示一个函数是异步的</p><p>如果 async 函数内没有 await, 那么 async 没有意义的, 全是同步的内容</p><p>只有遇到了 await 开始往下, 才是异步的开始</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ol><li><p>await 要用在 async 函数中</p></li><li><p>await 后面一般会跟一个 promise 对象,  await 会阻塞 async 函数的执行,</p><p>直到等到 promise 成功的结果( resolve 的结果)</p></li><li><p>await 只会等待 promise 成功的结果, 如果失败了会报错, 需要 try catch</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">read</span> (filePath) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span> () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data1 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data2 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;b.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data3 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;c.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data4 = <span class="keyword">await</span> <span class="title function_">read</span>(<span class="string">&#x27;d.txt&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data4)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="comment">// console.log(&#x27;目前, 文件有丢失, 没有读到正确的文件, 请联系管理员&#x27;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h3 id="8-2-await-在等什么"><a href="#8-2-await-在等什么" class="headerlink" title="8.2 await 在等什么"></a>8.2 await 在等什么</h3><p>首先来看 await 后面应该跟的是什么内容：</p><ol><li><p>一个 Promise 对象、或一个 async 函数的调用（调用结果也是一个 Promise 对象）</p></li><li><p>一个普通的表达式</p></li></ol><p>所以结论就是：</p><ul><li>如果 await 后是 Promise 对象，则它等待的是 Promise 对象中调用 <code>resolve()</code> 进行返回 ，获取返回数据</li><li>如果 await 后是普通的表达式，则它等待的是表达式的运算结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动漫分享</title>
      <link href="/2022/11/05/%E5%8A%A8%E6%BC%AB%E5%88%86%E4%BA%AB/"/>
      <url>/2022/11/05/%E5%8A%A8%E6%BC%AB%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="Sword-Art-Online"><a href="#Sword-Art-Online" class="headerlink" title="Sword Art Online"></a>Sword Art Online</h2><blockquote><p><strong>“这虽然是游戏，但可不是闹着玩的。”</strong></p><p>2022 年 11 月 6 日        天气：晴            温度：11°C - 18°C</p></blockquote><p>2022 年开发出次世代主机 “NERvGear” ，人类终于将虚拟实境完全实现。使用 “NERvGear” 创造的真正的 VRMMORPG 游戏－“Sword Art Online(SAO)” 受到世界瞩目。</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/561fd58b8c611e912421acf59f6e284.jpg" alt="561fd58b8c611e912421acf59f6e284"></p><p>2022 年 10 月 31 日，发售当天，街头出现排队抢购人群。</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/462d1ad93877dedebe3febfc837f581.jpg" alt="462d1ad93877dedebe3febfc837f581"></p><p>游戏于 2022 年 11 月 6 日正式开服，届时将带给玩家完全进入虚拟世界的体验！</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/ccfbea775156f04bfd7cc01ff0f6056.jpg" alt="ccfbea775156f04bfd7cc01ff0f6056"></p><p>玩家需戴上头盔造型的 “NERvGear”，以“完全潜行”的状态和其他 9999 名玩家一起，享受正式版的 SAO 世界。</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/IMG_0381.JPG" alt="IMG_0381"></p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/IMG_0382.JPG" alt="IMG_0382"></p><p>接下来，Link Start! </p><p>欢迎来到 SAO ~~</p><h3 id="艾恩葛朗特"><a href="#艾恩葛朗特" class="headerlink" title="艾恩葛朗特"></a>艾恩葛朗特</h3><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/700049.jpg" alt="700049"></p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/647749.png" alt="647749"></p><p>(乱入一张ALO)</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/344bbfe446cb59dd1b77170eee91e150.jpeg" alt="344bbfe446cb59dd1b77170eee91e150"></p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/041e12230553f2c84378ce5524361455.jpeg" alt="041e12230553f2c84378ce5524361455"></p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/883ad14a9f9dadc12417cd40b6b8bc19.jpeg" alt="883ad14a9f9dadc12417cd40b6b8bc19"></p><p>今天起，将会有 10000 名玩家在这里开始新的生活，一起探索艾恩葛朗特。但是，你们应该也发现了，登出键消失了，不用怀疑自己的眼睛，也不用质疑是否是游戏 Bug，下面所有玩家将会一起被传送到开始地点广场。</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/a1e234954bf388892a3777f5430e9067.jpeg" alt="a1e234954bf388892a3777f5430e9067"></p><p>各位玩家，欢迎来到我的世界。」<br>「我的名字是茅场晶彦。是现在唯一能控制这个世界的人。」<br>「我想各位玩家应该都已经注意到，登出按钮从主要选项画面里消失的情况。但这并不是游戏有什么问题。我再重复一遍。这不是游戏有问题，而是『 Sword Art Online 刀剑神域』本来的版本。」</p><p>「从今之后，各位在到达这座城堡的顶端之前，将无法自己登出这个游戏。」<br>「……此外，没有办法靠外部的人来停止或者解除 NERvGear 的运作。如果有人尝试这么做的话——」<br>「——NERvGear 的信号组件发出的微波将破坏各位的大脑，停止各位的生命活动。」</p><p>「更具体来说，外部电源切断十分钟以上、网络断线两小时以上、尝试破坏 NERvGear 本体或是解除固定锁——只有在上述这几个条件下，脑部破坏程序才会执行。而这些条件，都已经透过本公司以及媒体在外面的世界发表出去了。顺带一提，现在这个时间点上，已经有不少玩家的家人朋友，无视我们的警告，尝试强制解除 NERvGear，而结果就是……」</p><p><img src="http://shiyitao.oss-cn-nanjing.aliyuncs.com/img/image-20221120222605199.png" alt="image-20221120222605199"></p><p>「——很遗憾，目前已有两百一十三名玩家，永远从现实世界及艾恩葛朗特里退场了。」<br>「各位没有必要担心放在现实世界里的身体。现在所有的电视、广播、网络媒体都不断重复报导着这个状况，以及有多数牺牲者出现的情形。所以各位头上的NERvGear被强制拆下来的危险性，可以说已经降到相当低的程度了。今后，各位在现实世界里的身体，应该会在戴着 NERvGear 下的两小时断线缓冲时间里，搬送到医院或是其它的设施，然后加以慎重地看护才对。希望各位可以安心……把精神放在攻略游戏上就可以了。」<br>「但是，希望大家要特别注意。对各位而言，『Sword Art Online 刀剑神域』已经不再只是游戏，而是另一个现实世界。今后……游戏中将取消所有复活的机能。所以当 HP 变成零的瞬间，各位的角色将永远消灭，同时……」<br>「各位的脑将被 NERvGear 给破坏。」<br>「能够将各位从这个游戏里解放出来的条件就只有一个。就是我刚刚提过，到达艾恩葛朗特的最高层，也就是第一百层，然后打倒在那边等待的最终魔王。我保证在那个瞬间，存活下来的全部玩家都可以安全地登出游戏。」<br>「最后，来让大家看看这个世界对你们来说，已经是唯一现实的证据。在各位的道具栏里面有我准备好的礼物。请大家看一下。」<br>「这些都不是我的目的。甚至可以说，我如今已经没有任何目的或理由了。要说为什么的话……那是因为对我而言，这个状况就是最终目的。创造出这个世界并观赏它，我就是为了这个目的才会发明 NERvGear，并创造出 SAO。而现在，我的所有目的都达成了。」<br>「……『Sword Art Online 刀剑神域』正式营运的游戏说明就到此为止。各位玩家——祝你们好运。」</p><blockquote><p>以上内容纯属虚构</p></blockquote><p>中二结束。</p>]]></content>
      
      
      <categories>
          
          <category> 动漫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动漫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
